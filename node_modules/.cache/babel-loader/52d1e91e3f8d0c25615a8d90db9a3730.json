{"ast":null,"code":"import ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Duration from \"../Duration.js\";\nimport Hbar from \"../Hbar.js\";\nimport Long from \"long\";\nimport * as proto from \"@hashgraph/proto\";\nimport TokenRelationshipMap from \"../account/TokenRelationshipMap.js\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\n\nexport default class ContractInfo {\n  /**\n   * @private\n   * @param {object} props\n   * @param {ContractId} props.contractId\n   * @param {AccountId} props.accountId\n   * @param {string} props.contractAccountId\n   * @param {?Key} props.adminKey\n   * @param {Timestamp} props.expirationTime\n   * @param {Duration} props.autoRenewPeriod\n   * @param {Long} props.storage\n   * @param {string} props.contractMemo\n   * @param {Hbar} props.balance\n   * @param {boolean} props.isDeleted\n   * @param {TokenRelationshipMap} props.tokenRelationships\n   * @param {LedgerId|null} props.ledgerId\n   */\n  constructor(props) {\n    /**\n     * ID of the contract instance, in the format used in transactions.\n     *\n     * @readonly\n     */\n    this.contractId = props.contractId;\n    /**\n     * ID of the cryptocurrency account owned by the contract instance,\n     * in the format used in transactions.\n     *\n     * @readonly\n     */\n\n    this.accountId = props.accountId;\n    /**\n     * ID of both the contract instance and the cryptocurrency account owned by the contract\n     * instance, in the format used by Solidity.\n     *\n     * @readonly\n     */\n\n    this.contractAccountId = props.contractAccountId;\n    /**\n     * The state of the instance and its fields can be modified arbitrarily if this key signs a\n     * transaction to modify it. If this is null, then such modifications are not possible,\n     * and there is no administrator that can override the normal operation of this smart\n     * contract instance. Note that if it is created with no admin keys, then there is no\n     * administrator to authorize changing the admin keys, so there can never be any admin keys\n     * for that instance.\n     *\n     * @readonly\n     */\n\n    this.adminKey = props.adminKey != null ? props.adminKey : null;\n    /**\n     * The current time at which this contract instance (and its account) is set to expire.\n     *\n     * @readonly\n     */\n\n    this.expirationTime = props.expirationTime;\n    /**\n     * The expiration time will extend every this many seconds. If there are insufficient funds,\n     * then it extends as long as possible. If the account is empty when it expires,\n     * then it is deleted.\n     *\n     * @readonly\n     */\n\n    this.autoRenewPeriod = props.autoRenewPeriod;\n    /**\n     * Number of bytes of storage being used by this instance (which affects the cost to\n     * extend the expiration time).\n     *\n     * @readonly\n     */\n\n    this.storage = props.storage;\n    /**\n     * The memo associated with the contract (max 100 bytes).\n     *\n     * @readonly\n     */\n\n    this.contractMemo = props.contractMemo;\n    /**\n     * The current balance of the contract.\n     *\n     * @readonly\n     */\n\n    this.balance = props.balance;\n    /**\n     * Whether the contract has been deleted\n     *\n     * @readonly\n     */\n\n    this.isDeleted = props.isDeleted;\n    /**\n     * The tokens associated to the contract\n     *\n     * @readonly\n     */\n\n    this.tokenRelationships = props.tokenRelationships;\n    this.ledgerId = props.ledgerId;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {proto.IContractInfo} info\n   * @returns {ContractInfo}\n   */\n\n\n  static _fromProtobuf(info) {\n    const autoRenewPeriod =\n    /** @type {Long | number} */\n\n    /** @type {proto.IDuration} */\n    info.autoRenewPeriod.seconds;\n    return new ContractInfo({\n      contractId: ContractId._fromProtobuf(\n      /** @type {proto.IContractID} */\n      info.contractID),\n      accountId: AccountId._fromProtobuf(\n      /** @type {proto.IAccountID} */\n      info.accountID),\n      contractAccountId: info.contractAccountID != null ? info.contractAccountID : \"\",\n      adminKey: info.adminKey != null ? Key._fromProtobufKey(info.adminKey) : null,\n      expirationTime: Timestamp._fromProtobuf(\n      /** @type {proto.ITimestamp} */\n      info.expirationTime),\n      autoRenewPeriod: new Duration(autoRenewPeriod),\n      storage: info.storage != null ? info.storage instanceof Long ? info.storage : Long.fromValue(info.storage) : Long.ZERO,\n      contractMemo: info.memo != null ? info.memo : \"\",\n      balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),\n      isDeleted:\n      /** @type {boolean} */\n      info.deleted,\n      tokenRelationships: TokenRelationshipMap._fromProtobuf(info.tokenRelationships != null ? info.tokenRelationships : []),\n      ledgerId: info.ledgerId != null ? LedgerId.fromBytes(info.ledgerId) : null\n    });\n  }\n  /**\n   * @internal\n   * @returns {proto.IContractInfo}\n   */\n\n\n  _toProtobuf() {\n    return {\n      contractID: this.contractId._toProtobuf(),\n      accountID: this.accountId._toProtobuf(),\n      contractAccountID: this.contractAccountId,\n      adminKey: this.adminKey != null ? this.adminKey._toProtobufKey() : null,\n      expirationTime: this.expirationTime._toProtobuf(),\n      autoRenewPeriod: this.autoRenewPeriod != null ? this.autoRenewPeriod._toProtobuf() : null,\n      storage: this.storage,\n      memo: this.contractMemo,\n      balance: this.balance.toTinybars(),\n      deleted: this.isDeleted,\n      tokenRelationships: this.tokenRelationships != null ? this.tokenRelationships._toProtobuf() : null,\n      ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null\n    };\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {ContractInfo}\n   */\n\n\n  static fromBytes(bytes) {\n    return ContractInfo._fromProtobuf(proto.ContractGetInfoResponse.ContractInfo.decode(bytes));\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return proto.ContractGetInfoResponse.ContractInfo.encode(this._toProtobuf()).finish();\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/contract/ContractInfo.js"],"names":["ContractId","AccountId","Timestamp","Duration","Hbar","Long","proto","TokenRelationshipMap","Key","LedgerId","ContractInfo","constructor","props","contractId","accountId","contractAccountId","adminKey","expirationTime","autoRenewPeriod","storage","contractMemo","balance","isDeleted","tokenRelationships","ledgerId","Object","freeze","_fromProtobuf","info","seconds","contractID","accountID","contractAccountID","_fromProtobufKey","fromValue","ZERO","memo","fromTinybars","deleted","fromBytes","_toProtobuf","_toProtobufKey","toTinybars","toBytes","bytes","ContractGetInfoResponse","decode","encode","finish"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,OAAOC,oBAAP,MAAiC,oCAAjC;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,CAAmB;AAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACR;AACA;AACA;AACA;AACQ,SAAKC,UAAL,GAAkBD,KAAK,CAACC,UAAxB;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiBF,KAAK,CAACE,SAAvB;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,iBAAL,GAAyBH,KAAK,CAACG,iBAA/B;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgBJ,KAAK,CAACI,QAAN,IAAkB,IAAlB,GAAyBJ,KAAK,CAACI,QAA/B,GAA0C,IAA1D;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,cAAL,GAAsBL,KAAK,CAACK,cAA5B;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,eAAL,GAAuBN,KAAK,CAACM,eAA7B;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,OAAL,GAAeP,KAAK,CAACO,OAArB;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,YAAL,GAAoBR,KAAK,CAACQ,YAA1B;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,OAAL,GAAeT,KAAK,CAACS,OAArB;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiBV,KAAK,CAACU,SAAvB;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,kBAAL,GAA0BX,KAAK,CAACW,kBAAhC;AAEA,SAAKC,QAAL,GAAgBZ,KAAK,CAACY,QAAtB;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbC,aAAa,CAACC,IAAD,EAAO;AACvB,UAAMV,eAAe;AAAG;;AACpB;AAAgCU,IAAAA,IAAI,CAACV,eAAN,CAAuBW,OAD1D;AAIA,WAAO,IAAInB,YAAJ,CAAiB;AACpBG,MAAAA,UAAU,EAAEb,UAAU,CAAC2B,aAAX;AACR;AAAkCC,MAAAA,IAAI,CAACE,UAD/B,CADQ;AAIpBhB,MAAAA,SAAS,EAAEb,SAAS,CAAC0B,aAAV;AACP;AAAiCC,MAAAA,IAAI,CAACG,SAD/B,CAJS;AAOpBhB,MAAAA,iBAAiB,EACba,IAAI,CAACI,iBAAL,IAA0B,IAA1B,GAAiCJ,IAAI,CAACI,iBAAtC,GAA0D,EAR1C;AASpBhB,MAAAA,QAAQ,EACJY,IAAI,CAACZ,QAAL,IAAiB,IAAjB,GACMR,GAAG,CAACyB,gBAAJ,CAAqBL,IAAI,CAACZ,QAA1B,CADN,GAEM,IAZU;AAapBC,MAAAA,cAAc,EAAEf,SAAS,CAACyB,aAAV;AACZ;AAAiCC,MAAAA,IAAI,CAACX,cAD1B,CAbI;AAgBpBC,MAAAA,eAAe,EAAE,IAAIf,QAAJ,CAAae,eAAb,CAhBG;AAiBpBC,MAAAA,OAAO,EACHS,IAAI,CAACT,OAAL,IAAgB,IAAhB,GACMS,IAAI,CAACT,OAAL,YAAwBd,IAAxB,GACIuB,IAAI,CAACT,OADT,GAEId,IAAI,CAAC6B,SAAL,CAAeN,IAAI,CAACT,OAApB,CAHV,GAIMd,IAAI,CAAC8B,IAtBK;AAuBpBf,MAAAA,YAAY,EAAEQ,IAAI,CAACQ,IAAL,IAAa,IAAb,GAAoBR,IAAI,CAACQ,IAAzB,GAAgC,EAvB1B;AAwBpBf,MAAAA,OAAO,EAAEjB,IAAI,CAACiC,YAAL,CAAkBT,IAAI,CAACP,OAAL,IAAgB,IAAhB,GAAuBO,IAAI,CAACP,OAA5B,GAAsC,CAAxD,CAxBW;AAyBpBC,MAAAA,SAAS;AAAE;AAAwBM,MAAAA,IAAI,CAACU,OAzBpB;AA0BpBf,MAAAA,kBAAkB,EAAEhB,oBAAoB,CAACoB,aAArB,CAChBC,IAAI,CAACL,kBAAL,IAA2B,IAA3B,GAAkCK,IAAI,CAACL,kBAAvC,GAA4D,EAD5C,CA1BA;AA6BpBC,MAAAA,QAAQ,EACJI,IAAI,CAACJ,QAAL,IAAiB,IAAjB,GACMf,QAAQ,CAAC8B,SAAT,CAAmBX,IAAI,CAACJ,QAAxB,CADN,GAEM;AAhCU,KAAjB,CAAP;AAkCH;AAED;AACJ;AACA;AACA;;;AACIgB,EAAAA,WAAW,GAAG;AACV,WAAO;AACHV,MAAAA,UAAU,EAAE,KAAKjB,UAAL,CAAgB2B,WAAhB,EADT;AAEHT,MAAAA,SAAS,EAAE,KAAKjB,SAAL,CAAe0B,WAAf,EAFR;AAGHR,MAAAA,iBAAiB,EAAE,KAAKjB,iBAHrB;AAIHC,MAAAA,QAAQ,EACJ,KAAKA,QAAL,IAAiB,IAAjB,GAAwB,KAAKA,QAAL,CAAcyB,cAAd,EAAxB,GAAyD,IAL1D;AAMHxB,MAAAA,cAAc,EAAE,KAAKA,cAAL,CAAoBuB,WAApB,EANb;AAOHtB,MAAAA,eAAe,EACX,KAAKA,eAAL,IAAwB,IAAxB,GACM,KAAKA,eAAL,CAAqBsB,WAArB,EADN,GAEM,IAVP;AAWHrB,MAAAA,OAAO,EAAE,KAAKA,OAXX;AAYHiB,MAAAA,IAAI,EAAE,KAAKhB,YAZR;AAaHC,MAAAA,OAAO,EAAE,KAAKA,OAAL,CAAaqB,UAAb,EAbN;AAcHJ,MAAAA,OAAO,EAAE,KAAKhB,SAdX;AAeHC,MAAAA,kBAAkB,EACd,KAAKA,kBAAL,IAA2B,IAA3B,GACM,KAAKA,kBAAL,CAAwBiB,WAAxB,EADN,GAEM,IAlBP;AAmBHhB,MAAAA,QAAQ,EAAE,KAAKA,QAAL,IAAiB,IAAjB,GAAwB,KAAKA,QAAL,CAAcmB,OAAd,EAAxB,GAAkD;AAnBzD,KAAP;AAqBH;AAED;AACJ;AACA;AACA;;;AACoB,SAATJ,SAAS,CAACK,KAAD,EAAQ;AACpB,WAAOlC,YAAY,CAACiB,aAAb,CACHrB,KAAK,CAACuC,uBAAN,CAA8BnC,YAA9B,CAA2CoC,MAA3C,CAAkDF,KAAlD,CADG,CAAP;AAGH;AAED;AACJ;AACA;;;AACID,EAAAA,OAAO,GAAG;AACN,WAAOrC,KAAK,CAACuC,uBAAN,CAA8BnC,YAA9B,CAA2CqC,MAA3C,CACH,KAAKP,WAAL,EADG,EAELQ,MAFK,EAAP;AAGH;;AAzM6B","sourcesContent":["import ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Duration from \"../Duration.js\";\nimport Hbar from \"../Hbar.js\";\nimport Long from \"long\";\nimport * as proto from \"@hashgraph/proto\";\nimport TokenRelationshipMap from \"../account/TokenRelationshipMap.js\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\nexport default class ContractInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {ContractId} props.contractId\n     * @param {AccountId} props.accountId\n     * @param {string} props.contractAccountId\n     * @param {?Key} props.adminKey\n     * @param {Timestamp} props.expirationTime\n     * @param {Duration} props.autoRenewPeriod\n     * @param {Long} props.storage\n     * @param {string} props.contractMemo\n     * @param {Hbar} props.balance\n     * @param {boolean} props.isDeleted\n     * @param {TokenRelationshipMap} props.tokenRelationships\n     * @param {LedgerId|null} props.ledgerId\n     */\n    constructor(props) {\n        /**\n         * ID of the contract instance, in the format used in transactions.\n         *\n         * @readonly\n         */\n        this.contractId = props.contractId;\n\n        /**\n         * ID of the cryptocurrency account owned by the contract instance,\n         * in the format used in transactions.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * ID of both the contract instance and the cryptocurrency account owned by the contract\n         * instance, in the format used by Solidity.\n         *\n         * @readonly\n         */\n        this.contractAccountId = props.contractAccountId;\n\n        /**\n         * The state of the instance and its fields can be modified arbitrarily if this key signs a\n         * transaction to modify it. If this is null, then such modifications are not possible,\n         * and there is no administrator that can override the normal operation of this smart\n         * contract instance. Note that if it is created with no admin keys, then there is no\n         * administrator to authorize changing the admin keys, so there can never be any admin keys\n         * for that instance.\n         *\n         * @readonly\n         */\n        this.adminKey = props.adminKey != null ? props.adminKey : null;\n\n        /**\n         * The current time at which this contract instance (and its account) is set to expire.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * The expiration time will extend every this many seconds. If there are insufficient funds,\n         * then it extends as long as possible. If the account is empty when it expires,\n         * then it is deleted.\n         *\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /**\n         * Number of bytes of storage being used by this instance (which affects the cost to\n         * extend the expiration time).\n         *\n         * @readonly\n         */\n        this.storage = props.storage;\n\n        /**\n         * The memo associated with the contract (max 100 bytes).\n         *\n         * @readonly\n         */\n        this.contractMemo = props.contractMemo;\n\n        /**\n         * The current balance of the contract.\n         *\n         * @readonly\n         */\n        this.balance = props.balance;\n\n        /**\n         * Whether the contract has been deleted\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * The tokens associated to the contract\n         *\n         * @readonly\n         */\n        this.tokenRelationships = props.tokenRelationships;\n\n        this.ledgerId = props.ledgerId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IContractInfo} info\n     * @returns {ContractInfo}\n     */\n    static _fromProtobuf(info) {\n        const autoRenewPeriod = /** @type {Long | number} */ (\n            /** @type {proto.IDuration} */ (info.autoRenewPeriod).seconds\n        );\n\n        return new ContractInfo({\n            contractId: ContractId._fromProtobuf(\n                /** @type {proto.IContractID} */ (info.contractID)\n            ),\n            accountId: AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (info.accountID)\n            ),\n            contractAccountId:\n                info.contractAccountID != null ? info.contractAccountID : \"\",\n            adminKey:\n                info.adminKey != null\n                    ? Key._fromProtobufKey(info.adminKey)\n                    : null,\n            expirationTime: Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */ (info.expirationTime)\n            ),\n            autoRenewPeriod: new Duration(autoRenewPeriod),\n            storage:\n                info.storage != null\n                    ? info.storage instanceof Long\n                        ? info.storage\n                        : Long.fromValue(info.storage)\n                    : Long.ZERO,\n            contractMemo: info.memo != null ? info.memo : \"\",\n            balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),\n            isDeleted: /** @type {boolean} */ (info.deleted),\n            tokenRelationships: TokenRelationshipMap._fromProtobuf(\n                info.tokenRelationships != null ? info.tokenRelationships : []\n            ),\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IContractInfo}\n     */\n    _toProtobuf() {\n        return {\n            contractID: this.contractId._toProtobuf(),\n            accountID: this.accountId._toProtobuf(),\n            contractAccountID: this.contractAccountId,\n            adminKey:\n                this.adminKey != null ? this.adminKey._toProtobufKey() : null,\n            expirationTime: this.expirationTime._toProtobuf(),\n            autoRenewPeriod:\n                this.autoRenewPeriod != null\n                    ? this.autoRenewPeriod._toProtobuf()\n                    : null,\n            storage: this.storage,\n            memo: this.contractMemo,\n            balance: this.balance.toTinybars(),\n            deleted: this.isDeleted,\n            tokenRelationships:\n                this.tokenRelationships != null\n                    ? this.tokenRelationships._toProtobuf()\n                    : null,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ContractInfo}\n     */\n    static fromBytes(bytes) {\n        return ContractInfo._fromProtobuf(\n            proto.ContractGetInfoResponse.ContractInfo.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.ContractGetInfoResponse.ContractInfo.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}