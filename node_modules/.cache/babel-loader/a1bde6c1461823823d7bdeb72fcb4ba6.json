{"ast":null,"code":"\"use strict\";\n\nmodule.exports = BufferReader; // extends Reader\n\nvar Reader = require(\"./reader\");\n\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\n\n\nfunction BufferReader(buffer) {\n  Reader.call(this, buffer);\n  /**\n   * Read buffer.\n   * @name BufferReader#buf\n   * @type {Buffer}\n   */\n}\n\nBufferReader._configure = function () {\n  /* istanbul ignore else */\n  if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n/**\n * @override\n */\n\n\nBufferReader.prototype.string = function read_string_buffer() {\n  var len = this.uint32(); // modifies pos\n\n  return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\n\nBufferReader._configure();","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/protobufjs/src/reader_buffer.js"],"names":["module","exports","BufferReader","Reader","require","prototype","Object","create","constructor","util","buffer","call","_configure","Buffer","_slice","slice","string","read_string_buffer","len","uint32","buf","utf8Slice","pos","Math","min","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB,C,CAEA;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,CAACF,YAAY,CAACG,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAcJ,MAAM,CAACE,SAArB,CAA1B,EAA2DG,WAA3D,GAAyEN,YAAzE;;AAEA,IAAIO,IAAI,GAAGL,OAAO,CAAC,gBAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,YAAT,CAAsBQ,MAAtB,EAA8B;AAC1BP,EAAAA,MAAM,CAACQ,IAAP,CAAY,IAAZ,EAAkBD,MAAlB;AAEA;AACJ;AACA;AACA;AACA;AACC;;AAEDR,YAAY,CAACU,UAAb,GAA0B,YAAY;AAClC;AACA,MAAIH,IAAI,CAACI,MAAT,EACIX,YAAY,CAACG,SAAb,CAAuBS,MAAvB,GAAgCL,IAAI,CAACI,MAAL,CAAYR,SAAZ,CAAsBU,KAAtD;AACP,CAJD;AAOA;AACA;AACA;;;AACAb,YAAY,CAACG,SAAb,CAAuBW,MAAvB,GAAgC,SAASC,kBAAT,GAA8B;AAC1D,MAAIC,GAAG,GAAG,KAAKC,MAAL,EAAV,CAD0D,CACjC;;AACzB,SAAO,KAAKC,GAAL,CAASC,SAAT,GACD,KAAKD,GAAL,CAASC,SAAT,CAAmB,KAAKC,GAAxB,EAA6B,KAAKA,GAAL,GAAWC,IAAI,CAACC,GAAL,CAAS,KAAKF,GAAL,GAAWJ,GAApB,EAAyB,KAAKA,GAA9B,CAAxC,CADC,GAED,KAAKE,GAAL,CAASK,QAAT,CAAkB,OAAlB,EAA2B,KAAKH,GAAhC,EAAqC,KAAKA,GAAL,GAAWC,IAAI,CAACC,GAAL,CAAS,KAAKF,GAAL,GAAWJ,GAApB,EAAyB,KAAKA,GAA9B,CAAhD,CAFN;AAGH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AAEAhB,YAAY,CAACU,UAAb","sourcesContent":["\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n"]},"metadata":{},"sourceType":"script"}