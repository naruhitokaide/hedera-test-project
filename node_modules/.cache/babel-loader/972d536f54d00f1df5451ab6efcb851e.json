{"ast":null,"code":"import ManagedNode from \"./ManagedNode.js\";\nimport { PREVIEWNET_CERTS, TESTNET_CERTS, MAINNET_CERTS } from \"./NodeCerts.js\";\n/**\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./address_book/NodeAddress.js\").default} NodeAddress\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./ManagedNodeAddress.js\").default} ManagedNodeAddress\n * @typedef {import(\"./LedgerId.js\").default} LedgerId\n */\n\n/**\n * @typedef {object} NewNode\n * @property {AccountId} accountId\n * @property {string} address\n * @property {(address: string, cert?: string) => Channel} channelInitFunction\n */\n\n/**\n * @typedef {object} CloneNode\n * @property {Node} node\n * @property {ManagedNodeAddress} address\n */\n\n/**\n * @augments {ManagedNode<Channel>}\n */\n\nexport default class Node extends ManagedNode {\n  /**\n   * @param {object} props\n   * @param {NewNode=} [props.newNode]\n   * @param {CloneNode=} [props.cloneNode]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(props);\n\n    if (props.newNode != null) {\n      /** @type {AccountId} */\n      this._accountId = props.newNode.accountId;\n      /** @type {NodeAddress | null} */\n\n      this._nodeAddress = null;\n    } else if (props.cloneNode != null) {\n      /** @type {AccountId} */\n      this._accountId = props.cloneNode.node._accountId;\n      /** @type {NodeAddress | null} */\n\n      this._nodeAddress = props.cloneNode.node._nodeAddress;\n    } else {\n      throw new Error(`failed to create node: ${JSON.stringify(props)}`);\n    }\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  getKey() {\n    return this._accountId.toString();\n  }\n  /**\n   * @returns {ManagedNode<Channel>}\n   */\n\n\n  toInsecure() {\n    return (\n      /** @type {this} */\n      new Node({\n        cloneNode: {\n          node: this,\n          address: this._address.toInsecure()\n        }\n      })\n    );\n  }\n  /**\n   * @returns {ManagedNode<Channel>}\n   */\n\n\n  toSecure() {\n    return (\n      /** @type {this} */\n      new Node({\n        cloneNode: {\n          node: this,\n          address: this._address.toSecure()\n        }\n      })\n    );\n  }\n  /**\n   * @param {LedgerId|string} ledgerId\n   * @returns {this}\n   */\n\n\n  setCert(ledgerId) {\n    switch (ledgerId.toString()) {\n      case \"previewnet\":\n        this._cert = PREVIEWNET_CERTS[this._accountId.toString()];\n        break;\n\n      case \"testnet\":\n        this._cert = TESTNET_CERTS[this._accountId.toString()];\n        break;\n\n      case \"mainnet\":\n        this._cert = MAINNET_CERTS[this._accountId.toString()];\n        break;\n    }\n\n    return this;\n  }\n  /**\n   * @returns {AccountId}\n   */\n\n\n  get accountId() {\n    return this._accountId;\n  }\n  /**\n   * @returns {NodeAddress | null}\n   */\n\n\n  get nodeAddress() {\n    return this._nodeAddress;\n  }\n  /**\n   * @param {NodeAddress} nodeAddress\n   * @returns {this}\n   */\n\n\n  setNodeAddress(nodeAddress) {\n    this._nodeAddress = nodeAddress;\n    return this;\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/Node.js"],"names":["ManagedNode","PREVIEWNET_CERTS","TESTNET_CERTS","MAINNET_CERTS","Node","constructor","props","newNode","_accountId","accountId","_nodeAddress","cloneNode","node","Error","JSON","stringify","getKey","toString","toInsecure","address","_address","toSecure","setCert","ledgerId","_cert","nodeAddress","setNodeAddress"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,aAA1C,QAA+D,gBAA/D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,IAAN,SAAmBJ,WAAnB,CAA+B;AAC1C;AACJ;AACA;AACA;AACA;AACIK,EAAAA,WAAW,GAAa;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AACpB,UAAMA,KAAN;;AAEA,QAAIA,KAAK,CAACC,OAAN,IAAiB,IAArB,EAA2B;AACvB;AACA,WAAKC,UAAL,GAAkBF,KAAK,CAACC,OAAN,CAAcE,SAAhC;AAEA;;AACA,WAAKC,YAAL,GAAoB,IAApB;AACH,KAND,MAMO,IAAIJ,KAAK,CAACK,SAAN,IAAmB,IAAvB,EAA6B;AAChC;AACA,WAAKH,UAAL,GAAkBF,KAAK,CAACK,SAAN,CAAgBC,IAAhB,CAAqBJ,UAAvC;AAEA;;AACA,WAAKE,YAAL,GAAoBJ,KAAK,CAACK,SAAN,CAAgBC,IAAhB,CAAqBF,YAAzC;AACH,KANM,MAMA;AACH,YAAM,IAAIG,KAAJ,CAAW,0BAAyBC,IAAI,CAACC,SAAL,CAAeT,KAAf,CAAsB,EAA1D,CAAN;AACH;AACJ;AAED;AACJ;AACA;;;AACIU,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKR,UAAL,CAAgBS,QAAhB,EAAP;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,UAAU,GAAG;AACT;AAAO;AACH,UAAId,IAAJ,CAAS;AACLO,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAE,IAAR;AAAcO,UAAAA,OAAO,EAAE,KAAKC,QAAL,CAAcF,UAAd;AAAvB;AADN,OAAT;AADJ;AAKH;AAED;AACJ;AACA;;;AACIG,EAAAA,QAAQ,GAAG;AACP;AAAO;AACH,UAAIjB,IAAJ,CAAS;AACLO,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAE,IAAR;AAAcO,UAAAA,OAAO,EAAE,KAAKC,QAAL,CAAcC,QAAd;AAAvB;AADN,OAAT;AADJ;AAKH;AAED;AACJ;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,YAAQA,QAAQ,CAACN,QAAT,EAAR;AACI,WAAK,YAAL;AACI,aAAKO,KAAL,GAAavB,gBAAgB,CAAC,KAAKO,UAAL,CAAgBS,QAAhB,EAAD,CAA7B;AACA;;AACJ,WAAK,SAAL;AACI,aAAKO,KAAL,GAAatB,aAAa,CAAC,KAAKM,UAAL,CAAgBS,QAAhB,EAAD,CAA1B;AACA;;AACJ,WAAK,SAAL;AACI,aAAKO,KAAL,GAAarB,aAAa,CAAC,KAAKK,UAAL,CAAgBS,QAAhB,EAAD,CAA1B;AACA;AATR;;AAYA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACiB,MAATR,SAAS,GAAG;AACZ,WAAO,KAAKD,UAAZ;AACH;AAED;AACJ;AACA;;;AACmB,MAAXiB,WAAW,GAAG;AACd,WAAO,KAAKf,YAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIgB,EAAAA,cAAc,CAACD,WAAD,EAAc;AACxB,SAAKf,YAAL,GAAoBe,WAApB;AACA,WAAO,IAAP;AACH;;AAhGyC","sourcesContent":["import ManagedNode from \"./ManagedNode.js\";\nimport { PREVIEWNET_CERTS, TESTNET_CERTS, MAINNET_CERTS } from \"./NodeCerts.js\";\n\n/**\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./address_book/NodeAddress.js\").default} NodeAddress\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./ManagedNodeAddress.js\").default} ManagedNodeAddress\n * @typedef {import(\"./LedgerId.js\").default} LedgerId\n */\n\n/**\n * @typedef {object} NewNode\n * @property {AccountId} accountId\n * @property {string} address\n * @property {(address: string, cert?: string) => Channel} channelInitFunction\n */\n\n/**\n * @typedef {object} CloneNode\n * @property {Node} node\n * @property {ManagedNodeAddress} address\n */\n\n/**\n * @augments {ManagedNode<Channel>}\n */\nexport default class Node extends ManagedNode {\n    /**\n     * @param {object} props\n     * @param {NewNode=} [props.newNode]\n     * @param {CloneNode=} [props.cloneNode]\n     */\n    constructor(props = {}) {\n        super(props);\n\n        if (props.newNode != null) {\n            /** @type {AccountId} */\n            this._accountId = props.newNode.accountId;\n\n            /** @type {NodeAddress | null} */\n            this._nodeAddress = null;\n        } else if (props.cloneNode != null) {\n            /** @type {AccountId} */\n            this._accountId = props.cloneNode.node._accountId;\n\n            /** @type {NodeAddress | null} */\n            this._nodeAddress = props.cloneNode.node._nodeAddress;\n        } else {\n            throw new Error(`failed to create node: ${JSON.stringify(props)}`);\n        }\n    }\n\n    /**\n     * @returns {string}\n     */\n    getKey() {\n        return this._accountId.toString();\n    }\n\n    /**\n     * @returns {ManagedNode<Channel>}\n     */\n    toInsecure() {\n        return /** @type {this} */ (\n            new Node({\n                cloneNode: { node: this, address: this._address.toInsecure() },\n            })\n        );\n    }\n\n    /**\n     * @returns {ManagedNode<Channel>}\n     */\n    toSecure() {\n        return /** @type {this} */ (\n            new Node({\n                cloneNode: { node: this, address: this._address.toSecure() },\n            })\n        );\n    }\n\n    /**\n     * @param {LedgerId|string} ledgerId\n     * @returns {this}\n     */\n    setCert(ledgerId) {\n        switch (ledgerId.toString()) {\n            case \"previewnet\":\n                this._cert = PREVIEWNET_CERTS[this._accountId.toString()];\n                break;\n            case \"testnet\":\n                this._cert = TESTNET_CERTS[this._accountId.toString()];\n                break;\n            case \"mainnet\":\n                this._cert = MAINNET_CERTS[this._accountId.toString()];\n                break;\n        }\n\n        return this;\n    }\n\n    /**\n     * @returns {AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @returns {NodeAddress | null}\n     */\n    get nodeAddress() {\n        return this._nodeAddress;\n    }\n\n    /**\n     * @param {NodeAddress} nodeAddress\n     * @returns {this}\n     */\n    setNodeAddress(nodeAddress) {\n        this._nodeAddress = nodeAddress;\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}