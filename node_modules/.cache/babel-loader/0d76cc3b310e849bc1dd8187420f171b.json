{"ast":null,"code":"import TokenId from \"./TokenId.js\";\nimport Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport Long from \"long\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenBurnTransactionBody} proto.ITokenBurnTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Burn a new Hedera™ crypto-currency token.\n */\n\nexport default class TokenBurnTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {TokenId | string} [props.tokenId]\n   * @param {Long | number} [props.amount]\n   * @param {(Long | number)[]} [props.serials]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?TokenId}\n     */\n\n    this._tokenId = null;\n    /**\n     * @private\n     * @type {?Long}\n     */\n\n    this._amount = null;\n    /**\n     * @private\n     * @type {Long[]}\n     */\n\n    this._serials = [];\n\n    if (props.tokenId != null) {\n      this.setTokenId(props.tokenId);\n    }\n\n    if (props.amount != null) {\n      this.setAmount(props.amount);\n    }\n\n    if (props.serials != null) {\n      this.setSerials(props.serials);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.ITransaction[]} transactions\n   * @param {proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {proto.ITransactionBody[]} bodies\n   * @returns {TokenBurnTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const burnToken =\n    /** @type {proto.ITokenBurnTransactionBody} */\n    body.tokenBurn;\n    return Transaction._fromProtobufTransactions(new TokenBurnTransaction({\n      tokenId: burnToken.token != null ? TokenId._fromProtobuf(burnToken.token) : undefined,\n      amount: burnToken.amount != null ? burnToken.amount : undefined,\n      serials: burnToken.serialNumbers != null ? burnToken.serialNumbers : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {?TokenId}\n   */\n\n\n  get tokenId() {\n    return this._tokenId;\n  }\n  /**\n   * @param {TokenId | string} tokenId\n   * @returns {this}\n   */\n\n\n  setTokenId(tokenId) {\n    this._requireNotFrozen();\n\n    this._tokenId = typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId.clone();\n    return this;\n  }\n  /**\n   * @returns {?Long}\n   */\n\n\n  get amount() {\n    return this._amount;\n  }\n  /**\n   * @param {Long | number} amount\n   * @returns {this}\n   */\n\n\n  setAmount(amount) {\n    this._requireNotFrozen();\n\n    this._amount = amount instanceof Long ? amount : Long.fromValue(amount);\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._tokenId != null) {\n      this._tokenId.validateChecksum(client);\n    }\n  }\n  /**\n   * @returns {Long[]}\n   */\n\n\n  get serials() {\n    return this._serials;\n  }\n  /**\n   * @param {(Long | number)[]} serials\n   * @returns {this}\n   */\n\n\n  setSerials(serials) {\n    this._requireNotFrozen();\n\n    this._serials = serials.map(serial => serial instanceof Long ? serial : Long.fromValue(serial));\n    return this;\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.ITransaction} request\n   * @returns {Promise<proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.token.burnToken(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"tokenBurn\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {proto.ITokenBurnTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      amount: this._amount,\n      serialNumbers: this._serials,\n      token: this._tokenId != null ? this._tokenId._toProtobuf() : null\n    };\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"tokenBurn\", // eslint-disable-next-line @typescript-eslint/unbound-method\nTokenBurnTransaction._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/token/TokenBurnTransaction.js"],"names":["TokenId","Transaction","TRANSACTION_REGISTRY","Long","TokenBurnTransaction","constructor","props","_tokenId","_amount","_serials","tokenId","setTokenId","amount","setAmount","serials","setSerials","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","burnToken","tokenBurn","_fromProtobufTransactions","token","undefined","serialNumbers","_requireNotFrozen","fromString","clone","fromValue","_validateChecksums","client","validateChecksum","map","serial","_execute","channel","request","_getTransactionDataCase","_makeTransactionData","_toProtobuf","set"],"mappings":"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","sourcesContent":["import TokenId from \"./TokenId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenBurnTransactionBody} proto.ITokenBurnTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Burn a new Hedera™ crypto-currency token.\n */\nexport default class TokenBurnTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {Long | number} [props.amount]\n     * @param {(Long | number)[]} [props.serials]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._amount = null;\n\n        /**\n         * @private\n         * @type {Long[]}\n         */\n        this._serials = [];\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.amount != null) {\n            this.setAmount(props.amount);\n        }\n\n        if (props.serials != null) {\n            this.setSerials(props.serials);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenBurnTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const burnToken = /** @type {proto.ITokenBurnTransactionBody} */ (\n            body.tokenBurn\n        );\n\n        return Transaction._fromProtobufTransactions(\n            new TokenBurnTransaction({\n                tokenId:\n                    burnToken.token != null\n                        ? TokenId._fromProtobuf(burnToken.token)\n                        : undefined,\n                amount: burnToken.amount != null ? burnToken.amount : undefined,\n                serials:\n                    burnToken.serialNumbers != null\n                        ? burnToken.serialNumbers\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : tokenId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * @param {Long | number} amount\n     * @returns {this}\n     */\n    setAmount(amount) {\n        this._requireNotFrozen();\n        this._amount = amount instanceof Long ? amount : Long.fromValue(amount);\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._tokenId != null) {\n            this._tokenId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @returns {Long[]}\n     */\n    get serials() {\n        return this._serials;\n    }\n\n    /**\n     * @param {(Long | number)[]} serials\n     * @returns {this}\n     */\n    setSerials(serials) {\n        this._requireNotFrozen();\n        this._serials = serials.map((serial) =>\n            serial instanceof Long ? serial : Long.fromValue(serial)\n        );\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.burnToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenBurn\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenBurnTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            amount: this._amount,\n            serialNumbers: this._serials,\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenBurn\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenBurnTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}