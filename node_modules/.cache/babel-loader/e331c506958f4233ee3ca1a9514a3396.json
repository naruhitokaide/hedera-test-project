{"ast":null,"code":"import BigNumber from \"bignumber.js\";\nexport default class HbarUnit {\n  /**\n   * @internal\n   * @param {string} name\n   * @param {string} symbol\n   * @param {BigNumber} tinybar\n   */\n  constructor(name, symbol, tinybar) {\n    /**\n     * @internal\n     * @readonly\n     */\n    this._name = name;\n    /**\n     * @internal\n     * @readonly\n     */\n\n    this._symbol = symbol;\n    /**\n     * @internal\n     * @readonly\n     */\n\n    this._tinybar = tinybar;\n    Object.freeze(this);\n  }\n  /**\n   * @param {string} unit\n   * @returns {HbarUnit}\n   */\n\n\n  static fromString(unit) {\n    switch (unit) {\n      case HbarUnit.Hbar._symbol:\n        return HbarUnit.Hbar;\n\n      case HbarUnit.Tinybar._symbol:\n        return HbarUnit.Tinybar;\n\n      case HbarUnit.Microbar._symbol:\n        return HbarUnit.Microbar;\n\n      case HbarUnit.Millibar._symbol:\n        return HbarUnit.Millibar;\n\n      case HbarUnit.Kilobar._symbol:\n        return HbarUnit.Kilobar;\n\n      case HbarUnit.Megabar._symbol:\n        return HbarUnit.Megabar;\n\n      case HbarUnit.Gigabar._symbol:\n        return HbarUnit.Gigabar;\n\n      default:\n        throw new Error(\"Unknown unit.\");\n    }\n  }\n\n}\nHbarUnit.Tinybar = new HbarUnit(\"tinybar\", \"tℏ\", new BigNumber(1));\nHbarUnit.Microbar = new HbarUnit(\"microbar\", \"μℏ\", new BigNumber(100));\nHbarUnit.Millibar = new HbarUnit(\"millibar\", \"mℏ\", new BigNumber(100000));\nHbarUnit.Hbar = new HbarUnit(\"hbar\", \"ℏ\", new BigNumber(\"100000000\"));\nHbarUnit.Kilobar = new HbarUnit(\"kilobar\", \"kℏ\", new BigNumber(1000).multipliedBy(new BigNumber(\"100000000\")));\nHbarUnit.Megabar = new HbarUnit(\"megabar\", \"Mℏ\", new BigNumber(1000000).multipliedBy(new BigNumber(\"100000000\")));\nHbarUnit.Gigabar = new HbarUnit(\"gigabar\", \"Gℏ\", new BigNumber(\"1000000000\").multipliedBy(new BigNumber(\"100000000\")));","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/HbarUnit.js"],"names":["BigNumber","HbarUnit","constructor","name","symbol","tinybar","_name","_symbol","_tinybar","Object","freeze","fromString","unit","Hbar","Tinybar","Microbar","Millibar","Kilobar","Megabar","Gigabar","Error","multipliedBy"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,eAAe,MAAMC,QAAN,CAAe;AAC1B;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAeC,OAAf,EAAwB;AAC/B;AACR;AACA;AACA;AACQ,SAAKC,KAAL,GAAaH,IAAb;AAEA;AACR;AACA;AACA;;AACQ,SAAKI,OAAL,GAAeH,MAAf;AAEA;AACR;AACA;AACA;;AACQ,SAAKI,QAAL,GAAgBH,OAAhB;AAEAI,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;;;AACqB,SAAVC,UAAU,CAACC,IAAD,EAAO;AACpB,YAAQA,IAAR;AACI,WAAKX,QAAQ,CAACY,IAAT,CAAcN,OAAnB;AACI,eAAON,QAAQ,CAACY,IAAhB;;AACJ,WAAKZ,QAAQ,CAACa,OAAT,CAAiBP,OAAtB;AACI,eAAON,QAAQ,CAACa,OAAhB;;AACJ,WAAKb,QAAQ,CAACc,QAAT,CAAkBR,OAAvB;AACI,eAAON,QAAQ,CAACc,QAAhB;;AACJ,WAAKd,QAAQ,CAACe,QAAT,CAAkBT,OAAvB;AACI,eAAON,QAAQ,CAACe,QAAhB;;AACJ,WAAKf,QAAQ,CAACgB,OAAT,CAAiBV,OAAtB;AACI,eAAON,QAAQ,CAACgB,OAAhB;;AACJ,WAAKhB,QAAQ,CAACiB,OAAT,CAAiBX,OAAtB;AACI,eAAON,QAAQ,CAACiB,OAAhB;;AACJ,WAAKjB,QAAQ,CAACkB,OAAT,CAAiBZ,OAAtB;AACI,eAAON,QAAQ,CAACkB,OAAhB;;AACJ;AACI,cAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AAhBR;AAkBH;;AApDyB;AAuD9BnB,QAAQ,CAACa,OAAT,GAAmB,IAAIb,QAAJ,CAAa,SAAb,EAAwB,IAAxB,EAA8B,IAAID,SAAJ,CAAc,CAAd,CAA9B,CAAnB;AAEAC,QAAQ,CAACc,QAAT,GAAoB,IAAId,QAAJ,CAAa,UAAb,EAAyB,IAAzB,EAA+B,IAAID,SAAJ,CAAc,GAAd,CAA/B,CAApB;AAEAC,QAAQ,CAACe,QAAT,GAAoB,IAAIf,QAAJ,CAAa,UAAb,EAAyB,IAAzB,EAA+B,IAAID,SAAJ,CAAc,MAAd,CAA/B,CAApB;AAEAC,QAAQ,CAACY,IAAT,GAAgB,IAAIZ,QAAJ,CAAa,MAAb,EAAqB,GAArB,EAA0B,IAAID,SAAJ,CAAc,WAAd,CAA1B,CAAhB;AAEAC,QAAQ,CAACgB,OAAT,GAAmB,IAAIhB,QAAJ,CACf,SADe,EAEf,IAFe,EAGf,IAAID,SAAJ,CAAc,IAAd,EAAoBqB,YAApB,CAAiC,IAAIrB,SAAJ,CAAc,WAAd,CAAjC,CAHe,CAAnB;AAMAC,QAAQ,CAACiB,OAAT,GAAmB,IAAIjB,QAAJ,CACf,SADe,EAEf,IAFe,EAGf,IAAID,SAAJ,CAAc,OAAd,EAAuBqB,YAAvB,CAAoC,IAAIrB,SAAJ,CAAc,WAAd,CAApC,CAHe,CAAnB;AAMAC,QAAQ,CAACkB,OAAT,GAAmB,IAAIlB,QAAJ,CACf,SADe,EAEf,IAFe,EAGf,IAAID,SAAJ,CAAc,YAAd,EAA4BqB,YAA5B,CAAyC,IAAIrB,SAAJ,CAAc,WAAd,CAAzC,CAHe,CAAnB","sourcesContent":["import BigNumber from \"bignumber.js\";\n\nexport default class HbarUnit {\n    /**\n     * @internal\n     * @param {string} name\n     * @param {string} symbol\n     * @param {BigNumber} tinybar\n     */\n    constructor(name, symbol, tinybar) {\n        /**\n         * @internal\n         * @readonly\n         */\n        this._name = name;\n\n        /**\n         * @internal\n         * @readonly\n         */\n        this._symbol = symbol;\n\n        /**\n         * @internal\n         * @readonly\n         */\n        this._tinybar = tinybar;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {string} unit\n     * @returns {HbarUnit}\n     */\n    static fromString(unit) {\n        switch (unit) {\n            case HbarUnit.Hbar._symbol:\n                return HbarUnit.Hbar;\n            case HbarUnit.Tinybar._symbol:\n                return HbarUnit.Tinybar;\n            case HbarUnit.Microbar._symbol:\n                return HbarUnit.Microbar;\n            case HbarUnit.Millibar._symbol:\n                return HbarUnit.Millibar;\n            case HbarUnit.Kilobar._symbol:\n                return HbarUnit.Kilobar;\n            case HbarUnit.Megabar._symbol:\n                return HbarUnit.Megabar;\n            case HbarUnit.Gigabar._symbol:\n                return HbarUnit.Gigabar;\n            default:\n                throw new Error(\"Unknown unit.\");\n        }\n    }\n}\n\nHbarUnit.Tinybar = new HbarUnit(\"tinybar\", \"tℏ\", new BigNumber(1));\n\nHbarUnit.Microbar = new HbarUnit(\"microbar\", \"μℏ\", new BigNumber(100));\n\nHbarUnit.Millibar = new HbarUnit(\"millibar\", \"mℏ\", new BigNumber(100000));\n\nHbarUnit.Hbar = new HbarUnit(\"hbar\", \"ℏ\", new BigNumber(\"100000000\"));\n\nHbarUnit.Kilobar = new HbarUnit(\n    \"kilobar\",\n    \"kℏ\",\n    new BigNumber(1000).multipliedBy(new BigNumber(\"100000000\"))\n);\n\nHbarUnit.Megabar = new HbarUnit(\n    \"megabar\",\n    \"Mℏ\",\n    new BigNumber(1000000).multipliedBy(new BigNumber(\"100000000\"))\n);\n\nHbarUnit.Gigabar = new HbarUnit(\n    \"gigabar\",\n    \"Gℏ\",\n    new BigNumber(\"1000000000\").multipliedBy(new BigNumber(\"100000000\"))\n);\n"]},"metadata":{},"sourceType":"module"}