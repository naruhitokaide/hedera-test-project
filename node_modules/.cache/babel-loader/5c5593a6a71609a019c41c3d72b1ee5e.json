{"ast":null,"code":"import TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Duration from \"../Duration.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport * as proto from \"@hashgraph/proto\";\nimport TokenType from \"./TokenType.js\";\nimport TokenSupplyType from \"./TokenSupplyType.js\";\nimport CustomFixedFee from \"./CustomFixedFee.js\";\nimport CustomFractionalFee from \"./CustomFractionalFee.js\";\nimport CustomRoyaltyFee from \"./CustomRoyaltyFee.js\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\n/**\n * @typedef {import(\"./CustomFee.js\").default} CustomFee\n */\n\n/**\n * Response when the client sends the node TokenGetInfoQuery.\n */\n\nexport default class TokenInfo {\n  /**\n   * @private\n   * @param {object} props\n   * @param {TokenId} props.tokenId;\n   * @param {string} props.name;\n   * @param {string} props.symbol;\n   * @param {number} props.decimals;\n   * @param {Long} props.totalSupply;\n   * @param {AccountId | null} props.treasuryAccountId;\n   * @param {Key | null} props.adminKey;\n   * @param {Key | null} props.kycKey;\n   * @param {Key | null} props.freezeKey;\n   * @param {Key | null} props.pauseKey;\n   * @param {Key | null} props.wipeKey;\n   * @param {Key | null} props.supplyKey;\n   * @param {Key | null} props.feeScheduleKey;\n   * @param {boolean | null} props.defaultFreezeStatus;\n   * @param {boolean | null} props.defaultKycStatus;\n   * @param {boolean | null} props.pauseStatus;\n   * @param {boolean} props.isDeleted;\n   * @param {AccountId | null} props.autoRenewAccountId;\n   * @param {Duration | null} props.autoRenewPeriod;\n   * @param {Timestamp | null} props.expirationTime;\n   * @param {string} props.tokenMemo;\n   * @param {CustomFee[]} props.customFees;\n   * @param {TokenType | null} props.tokenType;\n   * @param {TokenSupplyType | null} props.supplyType;\n   * @param {Long | null} props.maxSupply;\n   * @param {LedgerId|null} props.ledgerId\n   */\n  constructor(props) {\n    /**\n     * ID of the token instance\n     *\n     * @readonly\n     */\n    this.tokenId = props.tokenId;\n    /**\n     * The name of the token. It is a string of ASCII only characters\n     *\n     * @readonly\n     */\n\n    this.name = props.name;\n    /**\n     * The symbol of the token. It is a UTF-8 capitalized alphabetical string\n     *\n     * @readonly\n     */\n\n    this.symbol = props.symbol;\n    /**\n     * The number of decimal places a token is divisible by\n     *\n     * @readonly\n     */\n\n    this.decimals = props.decimals;\n    /**\n     * The total supply of tokens that are currently in circulation\n     *\n     * @readonly\n     */\n\n    this.totalSupply = props.totalSupply;\n    /**\n     * The ID of the account which is set as treasuryAccountId\n     *\n     * @readonly\n     */\n\n    this.treasuryAccountId = props.treasuryAccountId;\n    /**\n     * The key which can perform update/delete operations on the token. If empty, the token can be perceived as\n     * immutable (not being able to be updated/deleted)\n     *\n     * @readonly\n     */\n\n    this.adminKey = props.adminKey;\n    /**\n     * The key which can grant or revoke KYC of an account for the token's transactions. If empty, KYC is not required,\n     * and KYC grant or revoke operations are not possible.\n     *\n     * @readonly\n     */\n\n    this.kycKey = props.kycKey;\n    /**\n     * The key which can freeze or unfreeze an account for token transactions. If empty, freezing is not possible\n     *\n     * @readonly\n     */\n\n    this.freezeKey = props.freezeKey;\n    /**\n     * The Key which can pause and unpause the Token.\n     *\n     * @readonly\n     */\n\n    this.pauseKey = props.pauseKey;\n    /**\n     * The key which can wipe token balance of an account. If empty, wipe is not possible\n     *\n     * @readonly\n     */\n\n    this.wipeKey = props.wipeKey;\n    /**\n     * The key which can change the supply of a token. The key is used to sign Token Mint/Burn operations\n     *\n     * @readonly\n     */\n\n    this.supplyKey = props.supplyKey;\n    this.feeScheduleKey = props.feeScheduleKey;\n    /**\n     * The default Freeze status (not applicable = null, frozen = false, or unfrozen = true) of Hedera accounts relative to this token.\n     * FreezeNotApplicable is returned if Token Freeze Key is empty. Frozen is returned if Token Freeze Key is set and\n     * defaultFreeze is set to true. Unfrozen is returned if Token Freeze Key is set and defaultFreeze is set to false\n     *      FreezeNotApplicable = null;\n     *      Frozen = true;\n     *      Unfrozen = false;\n     *\n     * @readonly\n     */\n\n    this.defaultFreezeStatus = props.defaultFreezeStatus;\n    /**\n     * The default KYC status (KycNotApplicable or Revoked) of Hedera accounts relative to this token. KycNotApplicable\n     * is returned if KYC key is not set, otherwise Revoked\n     *      KycNotApplicable = null;\n     *      Granted = true;\n     *      Revoked = false;\n     *\n     * @readonly\n     */\n\n    this.defaultKycStatus = props.defaultKycStatus;\n    /**\n     * The default pause status of Hedera accounts relative to this token.\n     * PauseNotApplicable is returned if pauseKey is not set\n     *      PauseNotApplicable = null;\n     *      Paused = true;\n     *      Unpaused = false;\n     *\n     * @readonly\n     */\n\n    this.pauseStatus = props.pauseStatus;\n    /**\n     * Specifies whether the token was deleted or not\n     *\n     * @readonly\n     */\n\n    this.isDeleted = props.isDeleted;\n    /**\n     * An account which will be automatically charged to renew the token's expiration, at autoRenewPeriod interval\n     *\n     * @readonly\n     */\n\n    this.autoRenewAccountId = props.autoRenewAccountId;\n    /**\n     * The interval at which the auto-renew account will be charged to extend the token's expiry\n     *\n     * @readonly\n     */\n\n    this.autoRenewPeriod = props.autoRenewPeriod;\n    /**\n     * The epoch second at which the token expire: will; if an auto-renew account and period are specified,\n     * this is coerced to the current epoch second plus the autoRenewPeriod\n     *\n     * @readonly\n     */\n\n    this.expirationTime = props.expirationTime;\n    /**\n     * The memo associated with the token.\n     *\n     * @readonly\n     */\n\n    this.tokenMemo = props.tokenMemo;\n    this.customFees = props.customFees;\n    this.tokenType = props.tokenType;\n    this.supplyType = props.supplyType;\n    this.maxSupply = props.maxSupply;\n    this.ledgerId = props.ledgerId;\n  }\n  /**\n   * @internal\n   * @param {proto.ITokenInfo} info\n   * @returns {TokenInfo}\n   */\n\n\n  static _fromProtobuf(info) {\n    const defaultFreezeStatus =\n    /** @type {proto.TokenFreezeStatus} */\n    info.defaultFreezeStatus;\n    const defaultKycStatus =\n    /** @type {proto.TokenKycStatus} */\n    info.defaultKycStatus;\n    const pauseStatus =\n    /**@type {proto.TokenPauseStatus} */\n    info.pauseStatus;\n    const autoRenewAccountId = info.autoRenewAccount != null ? AccountId._fromProtobuf(info.autoRenewAccount) : new AccountId(0);\n    return new TokenInfo({\n      tokenId: TokenId._fromProtobuf(\n      /** @type {proto.ITokenID} */\n      info.tokenId),\n      name:\n      /** @type {string} */\n      info.name,\n      symbol:\n      /** @type {string} */\n      info.symbol,\n      decimals:\n      /** @type {number} */\n      info.decimals,\n      totalSupply: Long.fromValue(\n      /** @type {Long} */\n      info.totalSupply),\n      treasuryAccountId: info.treasury != null ? AccountId._fromProtobuf(\n      /** @type {proto.IAccountID} */\n      info.treasury) : null,\n      adminKey: info.adminKey != null ? Key._fromProtobufKey(info.adminKey) : null,\n      kycKey: info.kycKey != null ? Key._fromProtobufKey(info.kycKey) : null,\n      freezeKey: info.freezeKey != null ? Key._fromProtobufKey(info.freezeKey) : null,\n      pauseKey: info.pauseKey != null ? Key._fromProtobufKey(info.pauseKey) : null,\n      wipeKey: info.wipeKey != null ? Key._fromProtobufKey(info.wipeKey) : null,\n      supplyKey: info.supplyKey != null ? Key._fromProtobufKey(info.supplyKey) : null,\n      feeScheduleKey: info.feeScheduleKey != null ? Key._fromProtobufKey(info.feeScheduleKey) : null,\n      defaultFreezeStatus: defaultFreezeStatus === 0 ? null : defaultFreezeStatus == 1,\n      defaultKycStatus: defaultKycStatus === 0 ? null : defaultKycStatus == 1,\n      pauseStatus: pauseStatus === 0 ? null : pauseStatus == 1,\n      isDeleted:\n      /** @type {boolean} */\n      info.deleted,\n      autoRenewAccountId: !(autoRenewAccountId.shard.toInt() == 0 && autoRenewAccountId.realm.toInt() == 0 && autoRenewAccountId.num.toInt() == 0) ? autoRenewAccountId : null,\n      autoRenewPeriod: info.autoRenewPeriod != null ? Duration._fromProtobuf(\n      /** @type {proto.IDuration} */\n      info.autoRenewPeriod) : null,\n      expirationTime: info.expiry != null ? Timestamp._fromProtobuf(\n      /** @type {proto.ITimestamp} */\n      info.expiry) : null,\n      tokenMemo: info.memo != null ? info.memo : \"\",\n      customFees: info.customFees != null ? info.customFees.map(fee => {\n        if (fee.fixedFee != null) {\n          return CustomFixedFee._fromProtobuf(fee);\n        } else if (fee.fractionalFee != null) {\n          return CustomFractionalFee._fromProtobuf(fee);\n        } else {\n          return CustomRoyaltyFee._fromProtobuf(fee);\n        }\n      }) : [],\n      tokenType: info.tokenType != null ? TokenType._fromCode(info.tokenType) : null,\n      supplyType: info.supplyType != null ? TokenSupplyType._fromCode(info.supplyType) : null,\n      maxSupply: info.maxSupply != null ? info.maxSupply : null,\n      ledgerId: info.ledgerId != null ? LedgerId.fromBytes(info.ledgerId) : null\n    });\n  }\n  /**\n   * @returns {proto.ITokenInfo}\n   */\n\n\n  _toProtobuf() {\n    return {\n      tokenId: this.tokenId._toProtobuf(),\n      name: this.name,\n      symbol: this.symbol,\n      decimals: this.decimals,\n      totalSupply: this.totalSupply,\n      treasury: this.treasuryAccountId != null ? this.treasuryAccountId._toProtobuf() : null,\n      adminKey: this.adminKey != null ? this.adminKey._toProtobufKey() : null,\n      kycKey: this.kycKey != null ? this.kycKey._toProtobufKey() : null,\n      freezeKey: this.freezeKey != null ? this.freezeKey._toProtobufKey() : null,\n      pauseKey: this.pauseKey != null ? this.pauseKey._toProtobufKey() : null,\n      wipeKey: this.wipeKey != null ? this.wipeKey._toProtobufKey() : null,\n      supplyKey: this.supplyKey != null ? this.supplyKey._toProtobufKey() : null,\n      feeScheduleKey: this.feeScheduleKey != null ? this.feeScheduleKey._toProtobufKey() : null,\n      defaultFreezeStatus: this.defaultFreezeStatus == null ? 0 : this.defaultFreezeStatus ? 1 : 2,\n      defaultKycStatus: this.defaultKycStatus == null ? 0 : this.defaultKycStatus ? 1 : 2,\n      pauseStatus: this.pauseStatus == null ? 0 : this.pauseStatus ? 1 : 2,\n      deleted: this.isDeleted,\n      autoRenewAccount: this.autoRenewAccountId != null ? this.autoRenewAccountId._toProtobuf() : undefined,\n      autoRenewPeriod: this.autoRenewPeriod != null ? this.autoRenewPeriod._toProtobuf() : null,\n      expiry: this.expirationTime != null ? this.expirationTime._toProtobuf() : null,\n      memo: this.tokenMemo,\n      customFees: this.customFees.map(fee => fee._toProtobuf()),\n      tokenType: this.tokenType != null ? this.tokenType._code : null,\n      supplyType: this.supplyType != null ? this.supplyType._code : null,\n      maxSupply: this.maxSupply,\n      ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null\n    };\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {TokenInfo}\n   */\n\n\n  static fromBytes(bytes) {\n    return TokenInfo._fromProtobuf(proto.TokenInfo.decode(bytes));\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return proto.TokenInfo.encode(this._toProtobuf()).finish();\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/token/TokenInfo.js"],"names":["TokenId","AccountId","Duration","Timestamp","Long","proto","TokenType","TokenSupplyType","CustomFixedFee","CustomFractionalFee","CustomRoyaltyFee","Key","LedgerId","TokenInfo","constructor","props","tokenId","name","symbol","decimals","totalSupply","treasuryAccountId","adminKey","kycKey","freezeKey","pauseKey","wipeKey","supplyKey","feeScheduleKey","defaultFreezeStatus","defaultKycStatus","pauseStatus","isDeleted","autoRenewAccountId","autoRenewPeriod","expirationTime","tokenMemo","customFees","tokenType","supplyType","maxSupply","ledgerId","_fromProtobuf","info","autoRenewAccount","fromValue","treasury","_fromProtobufKey","deleted","shard","toInt","realm","num","expiry","memo","map","fee","fixedFee","fractionalFee","_fromCode","fromBytes","_toProtobuf","_toProtobufKey","undefined","_code","toBytes","bytes","decode","encode","finish"],"mappings":"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","sourcesContent":["import TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Duration from \"../Duration.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport * as proto from \"@hashgraph/proto\";\nimport TokenType from \"./TokenType.js\";\nimport TokenSupplyType from \"./TokenSupplyType.js\";\nimport CustomFixedFee from \"./CustomFixedFee.js\";\nimport CustomFractionalFee from \"./CustomFractionalFee.js\";\nimport CustomRoyaltyFee from \"./CustomRoyaltyFee.js\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * @typedef {import(\"./CustomFee.js\").default} CustomFee\n */\n\n/**\n * Response when the client sends the node TokenGetInfoQuery.\n */\nexport default class TokenInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {TokenId} props.tokenId;\n     * @param {string} props.name;\n     * @param {string} props.symbol;\n     * @param {number} props.decimals;\n     * @param {Long} props.totalSupply;\n     * @param {AccountId | null} props.treasuryAccountId;\n     * @param {Key | null} props.adminKey;\n     * @param {Key | null} props.kycKey;\n     * @param {Key | null} props.freezeKey;\n     * @param {Key | null} props.pauseKey;\n     * @param {Key | null} props.wipeKey;\n     * @param {Key | null} props.supplyKey;\n     * @param {Key | null} props.feeScheduleKey;\n     * @param {boolean | null} props.defaultFreezeStatus;\n     * @param {boolean | null} props.defaultKycStatus;\n     * @param {boolean | null} props.pauseStatus;\n     * @param {boolean} props.isDeleted;\n     * @param {AccountId | null} props.autoRenewAccountId;\n     * @param {Duration | null} props.autoRenewPeriod;\n     * @param {Timestamp | null} props.expirationTime;\n     * @param {string} props.tokenMemo;\n     * @param {CustomFee[]} props.customFees;\n     * @param {TokenType | null} props.tokenType;\n     * @param {TokenSupplyType | null} props.supplyType;\n     * @param {Long | null} props.maxSupply;\n     * @param {LedgerId|null} props.ledgerId\n     */\n    constructor(props) {\n        /**\n         * ID of the token instance\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The name of the token. It is a string of ASCII only characters\n         *\n         * @readonly\n         */\n        this.name = props.name;\n\n        /**\n         * The symbol of the token. It is a UTF-8 capitalized alphabetical string\n         *\n         * @readonly\n         */\n        this.symbol = props.symbol;\n\n        /**\n         * The number of decimal places a token is divisible by\n         *\n         * @readonly\n         */\n        this.decimals = props.decimals;\n\n        /**\n         * The total supply of tokens that are currently in circulation\n         *\n         * @readonly\n         */\n        this.totalSupply = props.totalSupply;\n\n        /**\n         * The ID of the account which is set as treasuryAccountId\n         *\n         * @readonly\n         */\n        this.treasuryAccountId = props.treasuryAccountId;\n\n        /**\n         * The key which can perform update/delete operations on the token. If empty, the token can be perceived as\n         * immutable (not being able to be updated/deleted)\n         *\n         * @readonly\n         */\n        this.adminKey = props.adminKey;\n\n        /**\n         * The key which can grant or revoke KYC of an account for the token's transactions. If empty, KYC is not required,\n         * and KYC grant or revoke operations are not possible.\n         *\n         * @readonly\n         */\n        this.kycKey = props.kycKey;\n\n        /**\n         * The key which can freeze or unfreeze an account for token transactions. If empty, freezing is not possible\n         *\n         * @readonly\n         */\n        this.freezeKey = props.freezeKey;\n\n        /**\n         * The Key which can pause and unpause the Token.\n         *\n         * @readonly\n         */\n        this.pauseKey = props.pauseKey;\n\n        /**\n         * The key which can wipe token balance of an account. If empty, wipe is not possible\n         *\n         * @readonly\n         */\n        this.wipeKey = props.wipeKey;\n\n        /**\n         * The key which can change the supply of a token. The key is used to sign Token Mint/Burn operations\n         *\n         * @readonly\n         */\n        this.supplyKey = props.supplyKey;\n\n        this.feeScheduleKey = props.feeScheduleKey;\n\n        /**\n         * The default Freeze status (not applicable = null, frozen = false, or unfrozen = true) of Hedera accounts relative to this token.\n         * FreezeNotApplicable is returned if Token Freeze Key is empty. Frozen is returned if Token Freeze Key is set and\n         * defaultFreeze is set to true. Unfrozen is returned if Token Freeze Key is set and defaultFreeze is set to false\n         *      FreezeNotApplicable = null;\n         *      Frozen = true;\n         *      Unfrozen = false;\n         *\n         * @readonly\n         */\n        this.defaultFreezeStatus = props.defaultFreezeStatus;\n\n        /**\n         * The default KYC status (KycNotApplicable or Revoked) of Hedera accounts relative to this token. KycNotApplicable\n         * is returned if KYC key is not set, otherwise Revoked\n         *      KycNotApplicable = null;\n         *      Granted = true;\n         *      Revoked = false;\n         *\n         * @readonly\n         */\n        this.defaultKycStatus = props.defaultKycStatus;\n\n        /**\n         * The default pause status of Hedera accounts relative to this token.\n         * PauseNotApplicable is returned if pauseKey is not set\n         *      PauseNotApplicable = null;\n         *      Paused = true;\n         *      Unpaused = false;\n         *\n         * @readonly\n         */\n        this.pauseStatus = props.pauseStatus;\n\n        /**\n         * Specifies whether the token was deleted or not\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * An account which will be automatically charged to renew the token's expiration, at autoRenewPeriod interval\n         *\n         * @readonly\n         */\n        this.autoRenewAccountId = props.autoRenewAccountId;\n\n        /**\n         * The interval at which the auto-renew account will be charged to extend the token's expiry\n         *\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /**\n         * The epoch second at which the token expire: will; if an auto-renew account and period are specified,\n         * this is coerced to the current epoch second plus the autoRenewPeriod\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * The memo associated with the token.\n         *\n         * @readonly\n         */\n        this.tokenMemo = props.tokenMemo;\n\n        this.customFees = props.customFees;\n\n        this.tokenType = props.tokenType;\n\n        this.supplyType = props.supplyType;\n\n        this.maxSupply = props.maxSupply;\n\n        this.ledgerId = props.ledgerId;\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITokenInfo} info\n     * @returns {TokenInfo}\n     */\n    static _fromProtobuf(info) {\n        const defaultFreezeStatus = /** @type {proto.TokenFreezeStatus} */ (\n            info.defaultFreezeStatus\n        );\n        const defaultKycStatus = /** @type {proto.TokenKycStatus} */ (\n            info.defaultKycStatus\n        );\n        const pauseStatus = /**@type {proto.TokenPauseStatus} */ (\n            info.pauseStatus\n        );\n\n        const autoRenewAccountId =\n            info.autoRenewAccount != null\n                ? AccountId._fromProtobuf(info.autoRenewAccount)\n                : new AccountId(0);\n\n        return new TokenInfo({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {proto.ITokenID} */ (info.tokenId)\n            ),\n            name: /** @type {string} */ (info.name),\n            symbol: /** @type {string} */ (info.symbol),\n            decimals: /** @type {number} */ (info.decimals),\n            totalSupply: Long.fromValue(/** @type {Long} */ (info.totalSupply)),\n            treasuryAccountId:\n                info.treasury != null\n                    ? AccountId._fromProtobuf(\n                          /** @type {proto.IAccountID} */ (info.treasury)\n                      )\n                    : null,\n            adminKey:\n                info.adminKey != null\n                    ? Key._fromProtobufKey(info.adminKey)\n                    : null,\n            kycKey:\n                info.kycKey != null ? Key._fromProtobufKey(info.kycKey) : null,\n            freezeKey:\n                info.freezeKey != null\n                    ? Key._fromProtobufKey(info.freezeKey)\n                    : null,\n            pauseKey:\n                info.pauseKey != null\n                    ? Key._fromProtobufKey(info.pauseKey)\n                    : null,\n            wipeKey:\n                info.wipeKey != null\n                    ? Key._fromProtobufKey(info.wipeKey)\n                    : null,\n            supplyKey:\n                info.supplyKey != null\n                    ? Key._fromProtobufKey(info.supplyKey)\n                    : null,\n            feeScheduleKey:\n                info.feeScheduleKey != null\n                    ? Key._fromProtobufKey(info.feeScheduleKey)\n                    : null,\n            defaultFreezeStatus:\n                defaultFreezeStatus === 0 ? null : defaultFreezeStatus == 1,\n            defaultKycStatus:\n                defaultKycStatus === 0 ? null : defaultKycStatus == 1,\n            pauseStatus: pauseStatus === 0 ? null : pauseStatus == 1,\n            isDeleted: /** @type {boolean} */ (info.deleted),\n            autoRenewAccountId: !(\n                autoRenewAccountId.shard.toInt() == 0 &&\n                autoRenewAccountId.realm.toInt() == 0 &&\n                autoRenewAccountId.num.toInt() == 0\n            )\n                ? autoRenewAccountId\n                : null,\n            autoRenewPeriod:\n                info.autoRenewPeriod != null\n                    ? Duration._fromProtobuf(\n                          /** @type {proto.IDuration} */ (info.autoRenewPeriod)\n                      )\n                    : null,\n            expirationTime:\n                info.expiry != null\n                    ? Timestamp._fromProtobuf(\n                          /** @type {proto.ITimestamp} */ (info.expiry)\n                      )\n                    : null,\n            tokenMemo: info.memo != null ? info.memo : \"\",\n            customFees:\n                info.customFees != null\n                    ? info.customFees.map((fee) => {\n                          if (fee.fixedFee != null) {\n                              return CustomFixedFee._fromProtobuf(fee);\n                          } else if (fee.fractionalFee != null) {\n                              return CustomFractionalFee._fromProtobuf(fee);\n                          } else {\n                              return CustomRoyaltyFee._fromProtobuf(fee);\n                          }\n                      })\n                    : [],\n            tokenType:\n                info.tokenType != null\n                    ? TokenType._fromCode(info.tokenType)\n                    : null,\n            supplyType:\n                info.supplyType != null\n                    ? TokenSupplyType._fromCode(info.supplyType)\n                    : null,\n            maxSupply: info.maxSupply != null ? info.maxSupply : null,\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n        });\n    }\n\n    /**\n     * @returns {proto.ITokenInfo}\n     */\n    _toProtobuf() {\n        return {\n            tokenId: this.tokenId._toProtobuf(),\n            name: this.name,\n            symbol: this.symbol,\n            decimals: this.decimals,\n            totalSupply: this.totalSupply,\n            treasury:\n                this.treasuryAccountId != null\n                    ? this.treasuryAccountId._toProtobuf()\n                    : null,\n            adminKey:\n                this.adminKey != null ? this.adminKey._toProtobufKey() : null,\n            kycKey: this.kycKey != null ? this.kycKey._toProtobufKey() : null,\n            freezeKey:\n                this.freezeKey != null ? this.freezeKey._toProtobufKey() : null,\n            pauseKey:\n                this.pauseKey != null ? this.pauseKey._toProtobufKey() : null,\n            wipeKey:\n                this.wipeKey != null ? this.wipeKey._toProtobufKey() : null,\n            supplyKey:\n                this.supplyKey != null ? this.supplyKey._toProtobufKey() : null,\n            feeScheduleKey:\n                this.feeScheduleKey != null\n                    ? this.feeScheduleKey._toProtobufKey()\n                    : null,\n            defaultFreezeStatus:\n                this.defaultFreezeStatus == null\n                    ? 0\n                    : this.defaultFreezeStatus\n                    ? 1\n                    : 2,\n            defaultKycStatus:\n                this.defaultKycStatus == null\n                    ? 0\n                    : this.defaultKycStatus\n                    ? 1\n                    : 2,\n            pauseStatus:\n                this.pauseStatus == null ? 0 : this.pauseStatus ? 1 : 2,\n            deleted: this.isDeleted,\n            autoRenewAccount:\n                this.autoRenewAccountId != null\n                    ? this.autoRenewAccountId._toProtobuf()\n                    : undefined,\n            autoRenewPeriod:\n                this.autoRenewPeriod != null\n                    ? this.autoRenewPeriod._toProtobuf()\n                    : null,\n            expiry:\n                this.expirationTime != null\n                    ? this.expirationTime._toProtobuf()\n                    : null,\n            memo: this.tokenMemo,\n            customFees: this.customFees.map((fee) => fee._toProtobuf()),\n            tokenType: this.tokenType != null ? this.tokenType._code : null,\n            supplyType: this.supplyType != null ? this.supplyType._code : null,\n            maxSupply: this.maxSupply,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TokenInfo}\n     */\n    static fromBytes(bytes) {\n        return TokenInfo._fromProtobuf(proto.TokenInfo.decode(bytes));\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.TokenInfo.encode(this._toProtobuf()).finish();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}