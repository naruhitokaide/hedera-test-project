{"ast":null,"code":"var _jsxFileName = \"C:\\\\Work\\\\coding-sandbox\\\\react-again\\\\dapp-days\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction, TokenMintTransaction } from \"@hashgraph/sdk\";\nimport operator from \"./config.js\";\nimport MyButton from \"./components/MyButton.jsx\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tokenId, setTokenId] = useState();\n  const operatorId = AccountId.fromString(operator.id);\n  const operatorKey = PrivateKey.fromString(operator.pvkey);\n  const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n\n  async function tokenCreate() {\n    console.log(\"- Creating token\");\n    const tokenCreateTx = new TokenCreateTransaction().setTokenName(\"dAppDayToken\").setTokenSymbol(\"DDT\").setTreasuryAccountId(operatorId).setInitialSupply(100).setDecimals(0).freezeWith(client);\n    const tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n    const tokenCreateSubmit = await tokenCreateSign.execute(client);\n    const tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n    const id = tokenCreateRec.receipt.tokenId;\n    setToken(id);\n  }\n\n  async function tokenMint() {\n    console.log(\"- Minting new tokens!\");\n    const tokenMintTx = new TokenMintTransaction().setTokenId(token).setAmount(100).freezeWith(client);\n    const tokenMintSign = await tokenMintTx.sign(operatorKey);\n    const tokenMintSubmit = await tokenMintSign.execute(client);\n    const tokenMintRec = await tokenMintSubmit.getRecord(client);\n  }\n\n  let confirmationText;\n\n  if (token === undefined) {\n    confirmationText = \"\";\n    console.log(`Nothing  yet`);\n  } else {\n    confirmationText = `Created token with ID: ${token}`;\n    console.log(`Token ID ${token}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(MyButton, {\n      fcn: tokenCreate,\n      text: \"Create New Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: confirmationText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }, this), \"\", /*#__PURE__*/_jsxDEV(MyButton, {\n      fcn: tokenMint,\n      text: \"Mint New Tokens\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: confirmationText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"j2py1OIN7tAX6j2AGeFAmYeKV+0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/src/App.jsx"],"names":["React","useState","useRef","Client","AccountId","PrivateKey","TokenCreateTransaction","TokenMintTransaction","operator","MyButton","App","tokenId","setTokenId","operatorId","fromString","id","operatorKey","pvkey","client","forTestnet","setOperator","tokenCreate","console","log","tokenCreateTx","setTokenName","setTokenSymbol","setTreasuryAccountId","setInitialSupply","setDecimals","freezeWith","tokenCreateSign","sign","tokenCreateSubmit","execute","tokenCreateRec","getRecord","receipt","setToken","tokenMint","tokenMintTx","token","setAmount","tokenMintSign","tokenMintSubmit","tokenMintRec","confirmationText","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction, TokenMintTransaction } from \"@hashgraph/sdk\";\nimport operator from \"./config.js\";\nimport MyButton from \"./components/MyButton.jsx\";\nimport \"./styles/App.css\";\n\nfunction App() {\n\tconst [tokenId, setTokenId] = useState();\n\n\tconst operatorId = AccountId.fromString(operator.id);\n\tconst operatorKey = PrivateKey.fromString(operator.pvkey);\n\tconst client = Client.forTestnet().setOperator(operatorId, operatorKey);\n\n\tasync function tokenCreate() {\n\t\tconsole.log(\"- Creating token\");\n\n\t\tconst tokenCreateTx = new TokenCreateTransaction()\n\t\t\t.setTokenName(\"dAppDayToken\")\n\t\t\t.setTokenSymbol(\"DDT\")\n\t\t\t.setTreasuryAccountId(operatorId)\n\t\t\t.setInitialSupply(100)\n\t\t\t.setDecimals(0)\n\t\t\t.freezeWith(client);\n\t\tconst tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n\t\tconst tokenCreateSubmit = await tokenCreateSign.execute(client);\n\t\tconst tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n\t\tconst id = tokenCreateRec.receipt.tokenId;\n\t\tsetToken(id);\n\t}\n\n\tasync function tokenMint() {\n\t\tconsole.log(\"- Minting new tokens!\");\n\n\t\tconst tokenMintTx = new TokenMintTransaction().setTokenId(token).setAmount(100).freezeWith(client);\n\t\tconst tokenMintSign = await tokenMintTx.sign(operatorKey);\n\t\tconst tokenMintSubmit = await tokenMintSign.execute(client);\n\t\tconst tokenMintRec = await tokenMintSubmit.getRecord(client);\n\t}\n\n\tlet confirmationText;\n\tif (token === undefined) {\n\t\tconfirmationText = \"\";\n\t\tconsole.log(`Nothing  yet`);\n\t} else {\n\t\tconfirmationText = `Created token with ID: ${token}`;\n\t\tconsole.log(`Token ID ${token}`);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<MyButton fcn={tokenCreate} text={\"Create New Token\"} />\n\t\t\t<p>{confirmationText}</p>\n\t\t\t{\"\"}\n\t\t\t<MyButton fcn={tokenMint} text={\"Mint New Tokens\"} />\n\t\t\t<p>{confirmationText}</p>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}