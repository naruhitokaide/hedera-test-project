{"ast":null,"code":"import { Client, AccountId, PrivateKey, TokenCreateTransaction } from \"@hashgraph/sdk\";\nimport operator from \"../config.js\";\nconst operatorId = AccountId.fromString(operator.id);\nconst operatorKey = PrivateKey.fromString(operator.pvkey);\nconst client = Client.forTestnet().setOperator(operatorId, operatorKey);\n\nconst a = async function tokenCreate() {\n  console.log(\"- Starting token creation\");\n  const tokenCreateTx = new TokenCreateTransaction().setTokenName(\"dAppDayToken\").setTokenSymbol(\"DDT\").setTreasuryAccountId(operatorId).setInitialSupply(100).setDecimals(0).freezeWith(client);\n  const tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n  const tokenCreateSubmit = await tokenCreateSign.execute(client);\n  const tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n  const tokenId = tokenCreateRec.receipt.tokenId;\n  console.log(`- Token ID: ${tokenId}`);\n  return tokenId;\n};\n\nexport default a;","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/src/components/tokenCreate.js"],"names":["Client","AccountId","PrivateKey","TokenCreateTransaction","operator","operatorId","fromString","id","operatorKey","pvkey","client","forTestnet","setOperator","a","tokenCreate","console","log","tokenCreateTx","setTokenName","setTokenSymbol","setTreasuryAccountId","setInitialSupply","setDecimals","freezeWith","tokenCreateSign","sign","tokenCreateSubmit","execute","tokenCreateRec","getRecord","tokenId","receipt"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,EAAwCC,sBAAxC,QAAsE,gBAAtE;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,MAAMC,UAAU,GAAGJ,SAAS,CAACK,UAAV,CAAqBF,QAAQ,CAACG,EAA9B,CAAnB;AACA,MAAMC,WAAW,GAAGN,UAAU,CAACI,UAAX,CAAsBF,QAAQ,CAACK,KAA/B,CAApB;AACA,MAAMC,MAAM,GAAGV,MAAM,CAACW,UAAP,GAAoBC,WAApB,CAAgCP,UAAhC,EAA4CG,WAA5C,CAAf;;AAEA,MAAMK,CAAC,GAAG,eAAeC,WAAf,GAA6B;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAEA,QAAMC,aAAa,GAAG,IAAId,sBAAJ,GACpBe,YADoB,CACP,cADO,EAEpBC,cAFoB,CAEL,KAFK,EAGpBC,oBAHoB,CAGCf,UAHD,EAIpBgB,gBAJoB,CAIH,GAJG,EAKpBC,WALoB,CAKR,CALQ,EAMpBC,UANoB,CAMTb,MANS,CAAtB;AAOA,QAAMc,eAAe,GAAG,MAAMP,aAAa,CAACQ,IAAd,CAAmBjB,WAAnB,CAA9B;AACA,QAAMkB,iBAAiB,GAAG,MAAMF,eAAe,CAACG,OAAhB,CAAwBjB,MAAxB,CAAhC;AACA,QAAMkB,cAAc,GAAG,MAAMF,iBAAiB,CAACG,SAAlB,CAA4BnB,MAA5B,CAA7B;AACA,QAAMoB,OAAO,GAAGF,cAAc,CAACG,OAAf,CAAuBD,OAAvC;AAEAf,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAcc,OAAQ,EAAnC;AACA,SAAOA,OAAP;AACA,CAjBD;;AAmBA,eAAejB,CAAf","sourcesContent":["import { Client, AccountId, PrivateKey, TokenCreateTransaction } from \"@hashgraph/sdk\";\r\nimport operator from \"../config.js\";\r\n\r\nconst operatorId = AccountId.fromString(operator.id);\r\nconst operatorKey = PrivateKey.fromString(operator.pvkey);\r\nconst client = Client.forTestnet().setOperator(operatorId, operatorKey);\r\n\r\nconst a = async function tokenCreate() {\r\n\tconsole.log(\"- Starting token creation\");\r\n\r\n\tconst tokenCreateTx = new TokenCreateTransaction()\r\n\t\t.setTokenName(\"dAppDayToken\")\r\n\t\t.setTokenSymbol(\"DDT\")\r\n\t\t.setTreasuryAccountId(operatorId)\r\n\t\t.setInitialSupply(100)\r\n\t\t.setDecimals(0)\r\n\t\t.freezeWith(client);\r\n\tconst tokenCreateSign = await tokenCreateTx.sign(operatorKey);\r\n\tconst tokenCreateSubmit = await tokenCreateSign.execute(client);\r\n\tconst tokenCreateRec = await tokenCreateSubmit.getRecord(client);\r\n\tconst tokenId = tokenCreateRec.receipt.tokenId;\r\n\r\n\tconsole.log(`- Token ID: ${tokenId}`);\r\n\treturn tokenId;\r\n};\r\n\r\nexport default a;\r\n"]},"metadata":{},"sourceType":"module"}