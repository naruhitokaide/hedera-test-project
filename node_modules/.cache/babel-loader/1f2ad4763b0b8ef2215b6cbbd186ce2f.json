{"ast":null,"code":"import TokenId from \"./TokenId.js\";\nimport Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport Long from \"long\";\nimport * as hex from \"../encoding/hex.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenMintTransactionBody} proto.ITokenMintTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Mint a new Hederaâ„¢ crypto-currency token.\n */\n\nexport default class TokenMintTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {TokenId | string} [props.tokenId]\n   * @param {Long | number} [props.amount]\n   * @param {Uint8Array[]} [props.metadata]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?TokenId}\n     */\n\n    this._tokenId = null;\n    /**\n     * @private\n     * @type {?Long}\n     */\n\n    this._amount = null;\n    /**\n     * @private\n     * @type {Uint8Array[]}\n     */\n\n    this._metadata = [];\n\n    if (props.tokenId != null) {\n      this.setTokenId(props.tokenId);\n    }\n\n    if (props.amount != null) {\n      this.setAmount(props.amount);\n    }\n\n    if (props.metadata != null) {\n      this.setMetadata(props.metadata);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.ITransaction[]} transactions\n   * @param {proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {proto.ITransactionBody[]} bodies\n   * @returns {TokenMintTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const mintToken =\n    /** @type {proto.ITokenMintTransactionBody} */\n    body.tokenMint;\n    return Transaction._fromProtobufTransactions(new TokenMintTransaction({\n      tokenId: mintToken.token != null ? TokenId._fromProtobuf(mintToken.token) : undefined,\n      amount: mintToken.amount != null ? mintToken.amount : undefined,\n      metadata: mintToken.metadata != null ? mintToken.metadata : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {?TokenId}\n   */\n\n\n  get tokenId() {\n    return this._tokenId;\n  }\n  /**\n   * @param {TokenId | string} tokenId\n   * @returns {this}\n   */\n\n\n  setTokenId(tokenId) {\n    this._requireNotFrozen();\n\n    this._tokenId = typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId.clone();\n    return this;\n  }\n  /**\n   * @returns {?Long}\n   */\n\n\n  get amount() {\n    return this._amount;\n  }\n  /**\n   * @param {Long | number} amount\n   * @returns {this}\n   */\n\n\n  setAmount(amount) {\n    this._requireNotFrozen();\n\n    this._amount = amount instanceof Long ? amount : Long.fromValue(amount);\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._tokenId != null) {\n      this._tokenId.validateChecksum(client);\n    }\n  }\n  /**\n   * @returns {Uint8Array[]}\n   */\n\n\n  get metadata() {\n    return this._metadata;\n  }\n  /**\n   * @param {Uint8Array | string} metadata\n   * @returns {this}\n   */\n\n\n  addMetadata(metadata) {\n    this._requireNotFrozen();\n\n    if (typeof metadata === \"string\") {\n      console.warn(\"Passing a `string` for token metadata is considered a bug, and has been removed. Please provide a `Uint8Array` instead.\");\n    }\n\n    this._metadata.push(typeof metadata === \"string\" ? hex.decode(metadata) : metadata);\n\n    return this;\n  }\n  /**\n   * @param {Uint8Array[]} metadata\n   * @returns {this}\n   */\n\n\n  setMetadata(metadata) {\n    this._requireNotFrozen();\n\n    for (const data of metadata) {\n      if (typeof data === \"string\") {\n        console.warn(\"Passing a `string` for token metadata is considered a bug, and has been removed. Please provide a `Uint8Array` instead.\");\n        break;\n      }\n    }\n\n    this._metadata = metadata.map(data => typeof data === \"string\" ? hex.decode(data) : data);\n    return this;\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.ITransaction} request\n   * @returns {Promise<proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.token.mintToken(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"tokenMint\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {proto.ITokenMintTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      amount: this._amount,\n      token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n      metadata: this._metadata\n    };\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"tokenMint\", // eslint-disable-next-line @typescript-eslint/unbound-method\nTokenMintTransaction._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/token/TokenMintTransaction.js"],"names":["TokenId","Transaction","TRANSACTION_REGISTRY","Long","hex","TokenMintTransaction","constructor","props","_tokenId","_amount","_metadata","tokenId","setTokenId","amount","setAmount","metadata","setMetadata","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","mintToken","tokenMint","_fromProtobufTransactions","token","undefined","_requireNotFrozen","fromString","clone","fromValue","_validateChecksums","client","validateChecksum","addMetadata","console","warn","push","decode","data","map","_execute","channel","request","_getTransactionDataCase","_makeTransactionData","_toProtobuf","set"],"mappings":"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","sourcesContent":["import TokenId from \"./TokenId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Long from \"long\";\nimport * as hex from \"../encoding/hex.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ITokenMintTransactionBody} proto.ITokenMintTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Mint a new Hederaâ„¢ crypto-currency token.\n */\nexport default class TokenMintTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {Long | number} [props.amount]\n     * @param {Uint8Array[]} [props.metadata]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._amount = null;\n\n        /**\n         * @private\n         * @type {Uint8Array[]}\n         */\n        this._metadata = [];\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.amount != null) {\n            this.setAmount(props.amount);\n        }\n\n        if (props.metadata != null) {\n            this.setMetadata(props.metadata);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TokenMintTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const mintToken = /** @type {proto.ITokenMintTransactionBody} */ (\n            body.tokenMint\n        );\n\n        return Transaction._fromProtobufTransactions(\n            new TokenMintTransaction({\n                tokenId:\n                    mintToken.token != null\n                        ? TokenId._fromProtobuf(mintToken.token)\n                        : undefined,\n                amount: mintToken.amount != null ? mintToken.amount : undefined,\n                metadata:\n                    mintToken.metadata != null ? mintToken.metadata : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : tokenId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * @param {Long | number} amount\n     * @returns {this}\n     */\n    setAmount(amount) {\n        this._requireNotFrozen();\n        this._amount = amount instanceof Long ? amount : Long.fromValue(amount);\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._tokenId != null) {\n            this._tokenId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @returns {Uint8Array[]}\n     */\n    get metadata() {\n        return this._metadata;\n    }\n\n    /**\n     * @param {Uint8Array | string} metadata\n     * @returns {this}\n     */\n    addMetadata(metadata) {\n        this._requireNotFrozen();\n\n        if (typeof metadata === \"string\") {\n            console.warn(\n                \"Passing a `string` for token metadata is considered a bug, and has been removed. Please provide a `Uint8Array` instead.\"\n            );\n        }\n\n        this._metadata.push(\n            typeof metadata === \"string\" ? hex.decode(metadata) : metadata\n        );\n\n        return this;\n    }\n\n    /**\n     * @param {Uint8Array[]} metadata\n     * @returns {this}\n     */\n    setMetadata(metadata) {\n        this._requireNotFrozen();\n\n        for (const data of metadata) {\n            if (typeof data === \"string\") {\n                console.warn(\n                    \"Passing a `string` for token metadata is considered a bug, and has been removed. Please provide a `Uint8Array` instead.\"\n                );\n                break;\n            }\n        }\n\n        this._metadata = metadata.map((data) =>\n            typeof data === \"string\" ? hex.decode(data) : data\n        );\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.mintToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenMint\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ITokenMintTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            amount: this._amount,\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            metadata: this._metadata,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenMint\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenMintTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}