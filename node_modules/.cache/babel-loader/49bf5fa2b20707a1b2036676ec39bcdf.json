{"ast":null,"code":"import PublicKey from \"../PublicKey.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n/**\n * @augments {ObjectMap<PublicKey, Uint8Array>}\n */\n\nexport default class NodeAccountIdSignatureMap extends ObjectMap {\n  constructor() {\n    super(s => PublicKey.fromString(s));\n  }\n  /**\n   * @param {import(\"@hashgraph/proto\").ISignatureMap} sigMap\n   * @returns {NodeAccountIdSignatureMap}\n   */\n\n\n  static _fromTransactionSigMap(sigMap) {\n    const signatures = new NodeAccountIdSignatureMap();\n    const sigPairs = sigMap.sigPair != null ? sigMap.sigPair : [];\n\n    for (const sigPair of sigPairs) {\n      if (sigPair.pubKeyPrefix != null) {\n        if (sigPair.ed25519 != null) {\n          signatures._set(PublicKey.fromBytesED25519(sigPair.pubKeyPrefix), sigPair.ed25519);\n        } else if (sigPair.ECDSASecp256k1 != null) {\n          signatures._set(PublicKey.fromBytesECDSA(sigPair.pubKeyPrefix), sigPair.ECDSASecp256k1);\n        }\n      }\n    }\n\n    return signatures;\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/transaction/NodeAccountIdSignatureMap.js"],"names":["PublicKey","ObjectMap","NodeAccountIdSignatureMap","constructor","s","fromString","_fromTransactionSigMap","sigMap","signatures","sigPairs","sigPair","pubKeyPrefix","ed25519","_set","fromBytesED25519","ECDSASecp256k1","fromBytesECDSA"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,yBAAN,SAAwCD,SAAxC,CAAkD;AAC7DE,EAAAA,WAAW,GAAG;AACV,UAAOC,CAAD,IAAOJ,SAAS,CAACK,UAAV,CAAqBD,CAArB,CAAb;AACH;AAED;AACJ;AACA;AACA;;;AACiC,SAAtBE,sBAAsB,CAACC,MAAD,EAAS;AAClC,UAAMC,UAAU,GAAG,IAAIN,yBAAJ,EAAnB;AAEA,UAAMO,QAAQ,GAAGF,MAAM,CAACG,OAAP,IAAkB,IAAlB,GAAyBH,MAAM,CAACG,OAAhC,GAA0C,EAA3D;;AAEA,SAAK,MAAMA,OAAX,IAAsBD,QAAtB,EAAgC;AAC5B,UAAIC,OAAO,CAACC,YAAR,IAAwB,IAA5B,EAAkC;AAC9B,YAAID,OAAO,CAACE,OAAR,IAAmB,IAAvB,EAA6B;AACzBJ,UAAAA,UAAU,CAACK,IAAX,CACIb,SAAS,CAACc,gBAAV,CAA2BJ,OAAO,CAACC,YAAnC,CADJ,EAEID,OAAO,CAACE,OAFZ;AAIH,SALD,MAKO,IAAIF,OAAO,CAACK,cAAR,IAA0B,IAA9B,EAAoC;AACvCP,UAAAA,UAAU,CAACK,IAAX,CACIb,SAAS,CAACgB,cAAV,CAAyBN,OAAO,CAACC,YAAjC,CADJ,EAEID,OAAO,CAACK,cAFZ;AAIH;AACJ;AACJ;;AAED,WAAOP,UAAP;AACH;;AA/B4D","sourcesContent":["import PublicKey from \"../PublicKey.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @augments {ObjectMap<PublicKey, Uint8Array>}\n */\nexport default class NodeAccountIdSignatureMap extends ObjectMap {\n    constructor() {\n        super((s) => PublicKey.fromString(s));\n    }\n\n    /**\n     * @param {import(\"@hashgraph/proto\").ISignatureMap} sigMap\n     * @returns {NodeAccountIdSignatureMap}\n     */\n    static _fromTransactionSigMap(sigMap) {\n        const signatures = new NodeAccountIdSignatureMap();\n\n        const sigPairs = sigMap.sigPair != null ? sigMap.sigPair : [];\n\n        for (const sigPair of sigPairs) {\n            if (sigPair.pubKeyPrefix != null) {\n                if (sigPair.ed25519 != null) {\n                    signatures._set(\n                        PublicKey.fromBytesED25519(sigPair.pubKeyPrefix),\n                        sigPair.ed25519\n                    );\n                } else if (sigPair.ECDSASecp256k1 != null) {\n                    signatures._set(\n                        PublicKey.fromBytesECDSA(sigPair.pubKeyPrefix),\n                        sigPair.ECDSASecp256k1\n                    );\n                }\n            }\n        }\n\n        return signatures;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}