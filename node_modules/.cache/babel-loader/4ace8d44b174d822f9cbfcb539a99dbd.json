{"ast":null,"code":"import MirrorNode from \"../MirrorNode.js\";\nimport ManagedNetwork from \"./ManagedNetwork.js\";\n/**\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n */\n\n/**\n * @augments {ManagedNetwork<MirrorChannel, MirrorNode, string>}\n */\n\nexport default class MirrorNetwork extends ManagedNetwork {\n  /**\n   * @param {(address: string) => MirrorChannel} channelInitFunction\n   */\n  constructor(channelInitFunction) {\n    super(channelInitFunction);\n  }\n  /**\n   * @param {string[]} network\n   */\n\n\n  setNetwork(network) {\n    // eslint-disable-next-line ie11/no-collection-args\n    this._setNetwork(new Map(network.map(address => [address, address])));\n  }\n  /**\n   * @returns {string[]}\n   */\n\n\n  get network() {\n    /**\n     * @type {string[]}\n     */\n    var n = []; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    for (const node of this._nodes) {\n      n.push(node.address.toString());\n    }\n\n    return n;\n  }\n  /**\n   * @abstract\n   * @param {[string, string]} entry\n   * @returns {MirrorNode}\n   */\n\n\n  _createNodeFromNetworkEntry(entry) {\n    return new MirrorNode({\n      newNode: {\n        address: entry[1],\n        channelInitFunction: this._createNetworkChannel\n      }\n    }).setMinBackoff(this._minBackoff);\n  }\n  /**\n   * @abstract\n   * @param {Map<string, string>} network\n   * @returns {number[]}\n   */\n\n\n  _getNodesToRemove(network) {\n    const indexes = [];\n    const values = Object.values(network);\n\n    for (let i = this._nodes.length - 1; i >= 0; i--) {\n      const node = this._nodes[i];\n\n      if (!values.includes(node.address.toString())) {\n        indexes.push(i);\n      }\n    }\n\n    return indexes;\n  }\n  /**\n   * @returns {MirrorNode}\n   */\n\n\n  getNextMirrorNode() {\n    if (this._createNetworkChannel == null) {\n      throw new Error(\"mirror network not supported on browser\");\n    }\n\n    return this._getNumberOfMostHealthyNodes(1)[0];\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/client/MirrorNetwork.js"],"names":["MirrorNode","ManagedNetwork","MirrorNetwork","constructor","channelInitFunction","setNetwork","network","_setNetwork","Map","map","address","n","node","_nodes","push","toString","_createNodeFromNetworkEntry","entry","newNode","_createNetworkChannel","setMinBackoff","_minBackoff","_getNodesToRemove","indexes","values","Object","i","length","includes","getNextMirrorNode","Error","_getNumberOfMostHealthyNodes"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,aAAN,SAA4BD,cAA5B,CAA2C;AACtD;AACJ;AACA;AACIE,EAAAA,WAAW,CAACC,mBAAD,EAAsB;AAC7B,UAAMA,mBAAN;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,UAAU,CAACC,OAAD,EAAU;AAChB;AACA,SAAKC,WAAL,CAAiB,IAAIC,GAAJ,CAAQF,OAAO,CAACG,GAAR,CAAaC,OAAD,IAAa,CAACA,OAAD,EAAUA,OAAV,CAAzB,CAAR,CAAjB;AACH;AAED;AACJ;AACA;;;AACe,MAAPJ,OAAO,GAAG;AACV;AACR;AACA;AACQ,QAAIK,CAAC,GAAG,EAAR,CAJU,CAMV;;AACA,SAAK,MAAMC,IAAX,IAAmB,KAAKC,MAAxB,EAAgC;AAC5BF,MAAAA,CAAC,CAACG,IAAF,CAAOF,IAAI,CAACF,OAAL,CAAaK,QAAb,EAAP;AACH;;AAED,WAAOJ,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIK,EAAAA,2BAA2B,CAACC,KAAD,EAAQ;AAC/B,WAAO,IAAIjB,UAAJ,CAAe;AAClBkB,MAAAA,OAAO,EAAE;AACLR,QAAAA,OAAO,EAAEO,KAAK,CAAC,CAAD,CADT;AAELb,QAAAA,mBAAmB,EAAE,KAAKe;AAFrB;AADS,KAAf,EAKJC,aALI,CAKU,KAAKC,WALf,CAAP;AAMH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,iBAAiB,CAAChB,OAAD,EAAU;AACvB,UAAMiB,OAAO,GAAG,EAAhB;AAEA,UAAMC,MAAM,GAAGC,MAAM,CAACD,MAAP,CAAclB,OAAd,CAAf;;AAEA,SAAK,IAAIoB,CAAC,GAAG,KAAKb,MAAL,CAAYc,MAAZ,GAAqB,CAAlC,EAAqCD,CAAC,IAAI,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAC9C,YAAMd,IAAI,GAAG,KAAKC,MAAL,CAAYa,CAAZ,CAAb;;AAEA,UAAI,CAACF,MAAM,CAACI,QAAP,CAAgBhB,IAAI,CAACF,OAAL,CAAaK,QAAb,EAAhB,CAAL,EAA+C;AAC3CQ,QAAAA,OAAO,CAACT,IAAR,CAAaY,CAAb;AACH;AACJ;;AAED,WAAOH,OAAP;AACH;AAED;AACJ;AACA;;;AACIM,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKV,qBAAL,IAA8B,IAAlC,EAAwC;AACpC,YAAM,IAAIW,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAED,WAAO,KAAKC,4BAAL,CAAkC,CAAlC,EAAqC,CAArC,CAAP;AACH;;AA7EqD","sourcesContent":["import MirrorNode from \"../MirrorNode.js\";\nimport ManagedNetwork from \"./ManagedNetwork.js\";\n\n/**\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n */\n\n/**\n * @augments {ManagedNetwork<MirrorChannel, MirrorNode, string>}\n */\nexport default class MirrorNetwork extends ManagedNetwork {\n    /**\n     * @param {(address: string) => MirrorChannel} channelInitFunction\n     */\n    constructor(channelInitFunction) {\n        super(channelInitFunction);\n    }\n\n    /**\n     * @param {string[]} network\n     */\n    setNetwork(network) {\n        // eslint-disable-next-line ie11/no-collection-args\n        this._setNetwork(new Map(network.map((address) => [address, address])));\n    }\n\n    /**\n     * @returns {string[]}\n     */\n    get network() {\n        /**\n         * @type {string[]}\n         */\n        var n = [];\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const node of this._nodes) {\n            n.push(node.address.toString());\n        }\n\n        return n;\n    }\n\n    /**\n     * @abstract\n     * @param {[string, string]} entry\n     * @returns {MirrorNode}\n     */\n    _createNodeFromNetworkEntry(entry) {\n        return new MirrorNode({\n            newNode: {\n                address: entry[1],\n                channelInitFunction: this._createNetworkChannel,\n            },\n        }).setMinBackoff(this._minBackoff);\n    }\n\n    /**\n     * @abstract\n     * @param {Map<string, string>} network\n     * @returns {number[]}\n     */\n    _getNodesToRemove(network) {\n        const indexes = [];\n\n        const values = Object.values(network);\n\n        for (let i = this._nodes.length - 1; i >= 0; i--) {\n            const node = this._nodes[i];\n\n            if (!values.includes(node.address.toString())) {\n                indexes.push(i);\n            }\n        }\n\n        return indexes;\n    }\n\n    /**\n     * @returns {MirrorNode}\n     */\n    getNextMirrorNode() {\n        if (this._createNetworkChannel == null) {\n            throw new Error(\"mirror network not supported on browser\");\n        }\n\n        return this._getNumberOfMostHealthyNodes(1)[0];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}