{"ast":null,"code":"import GrpcStatus from \"./GrpcStatus.js\";\n/**\n * Describes how the gRPC request failed.\n *\n * Exists in order for the Hedera JavaScript SDK to produce the same error type for gRPC errors regardless of\n * operating in node or the browser.\n *\n * Definition taken from <https://grpc.github.io/grpc/node/grpc.html#~ServiceError>.\n */\n\nexport default class GrpcServiceError extends Error {\n  /**\n   * @param {GrpcStatus} status\n   */\n  constructor(status) {\n    super(`gRPC service failed with status: ${status.toString()}`);\n    /**\n     * @readonly\n     */\n\n    this.status = status;\n    this.name = \"GrpcServiceError\";\n\n    if (typeof Error.captureStackTrace !== \"undefined\") {\n      Error.captureStackTrace(this, GrpcServiceError);\n    }\n  }\n  /**\n   * @param {Error & { code?: number; details?: string }} obj\n   * @returns {Error}\n   */\n\n\n  static _fromResponse(obj) {\n    if (obj.code != null && obj.details != null) {\n      const status = GrpcStatus._fromValue(obj.code);\n\n      const err = new GrpcServiceError(status);\n      err.message = obj.details;\n      return err;\n    } else {\n      return (\n        /** @type {Error} */\n        obj\n      );\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/grpc/GrpcServiceError.js"],"names":["GrpcStatus","GrpcServiceError","Error","constructor","status","toString","name","captureStackTrace","_fromResponse","obj","code","details","_fromValue","err","message"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BC,KAA/B,CAAqC;AAChD;AACJ;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,UAAO,oCAAmCA,MAAM,CAACC,QAAP,EAAkB,EAA5D;AAEA;AACR;AACA;;AACQ,SAAKD,MAAL,GAAcA,MAAd;AAEA,SAAKE,IAAL,GAAY,kBAAZ;;AAEA,QAAI,OAAOJ,KAAK,CAACK,iBAAb,KAAmC,WAAvC,EAAoD;AAChDL,MAAAA,KAAK,CAACK,iBAAN,CAAwB,IAAxB,EAA8BN,gBAA9B;AACH;AACJ;AAED;AACJ;AACA;AACA;;;AACwB,SAAbO,aAAa,CAACC,GAAD,EAAM;AACtB,QAAIA,GAAG,CAACC,IAAJ,IAAY,IAAZ,IAAoBD,GAAG,CAACE,OAAJ,IAAe,IAAvC,EAA6C;AACzC,YAAMP,MAAM,GAAGJ,UAAU,CAACY,UAAX,CAAsBH,GAAG,CAACC,IAA1B,CAAf;;AACA,YAAMG,GAAG,GAAG,IAAIZ,gBAAJ,CAAqBG,MAArB,CAAZ;AACAS,MAAAA,GAAG,CAACC,OAAJ,GAAcL,GAAG,CAACE,OAAlB;AACA,aAAOE,GAAP;AACH,KALD,MAKO;AACH;AAAO;AAAsBJ,QAAAA;AAA7B;AACH;AACJ;;AAhC+C","sourcesContent":["import GrpcStatus from \"./GrpcStatus.js\";\n\n/**\n * Describes how the gRPC request failed.\n *\n * Exists in order for the Hedera JavaScript SDK to produce the same error type for gRPC errors regardless of\n * operating in node or the browser.\n *\n * Definition taken from <https://grpc.github.io/grpc/node/grpc.html#~ServiceError>.\n */\nexport default class GrpcServiceError extends Error {\n    /**\n     * @param {GrpcStatus} status\n     */\n    constructor(status) {\n        super(`gRPC service failed with status: ${status.toString()}`);\n\n        /**\n         * @readonly\n         */\n        this.status = status;\n\n        this.name = \"GrpcServiceError\";\n\n        if (typeof Error.captureStackTrace !== \"undefined\") {\n            Error.captureStackTrace(this, GrpcServiceError);\n        }\n    }\n\n    /**\n     * @param {Error & { code?: number; details?: string }} obj\n     * @returns {Error}\n     */\n    static _fromResponse(obj) {\n        if (obj.code != null && obj.details != null) {\n            const status = GrpcStatus._fromValue(obj.code);\n            const err = new GrpcServiceError(status);\n            err.message = obj.details;\n            return err;\n        } else {\n            return /** @type {Error} */ (obj);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}