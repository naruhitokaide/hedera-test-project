{"ast":null,"code":"export const CipherAlgorithm = {\n  Aes128Ctr: \"AES-128-CTR\",\n  Aes128Cbc: \"AES-128-CBC\"\n};\n/**\n * @param {string} algorithm\n * @param {Uint8Array} key\n * @param {Uint8Array} iv\n * @param {Uint8Array} data\n * @returns {Promise<Uint8Array>}\n */\n\nexport async function createCipheriv(algorithm, key, iv, data) {\n  let algorithm_;\n\n  switch (algorithm.toUpperCase()) {\n    case CipherAlgorithm.Aes128Ctr:\n      algorithm_ = {\n        name: \"AES-CTR\",\n        counter: iv,\n        length: 128\n      };\n      break;\n\n    case CipherAlgorithm.Aes128Cbc:\n      algorithm_ = {\n        name: \"AES-CBC\",\n        iv: iv\n      };\n      break;\n\n    default:\n      throw new Error(\"(BUG) non-exhaustive switch statement for CipherAlgorithm\");\n  }\n\n  const key_ = await window.crypto.subtle.importKey(\"raw\", key, algorithm_.name, false, [\"encrypt\"]);\n  return new Uint8Array(await window.crypto.subtle.encrypt(algorithm_, key_, data));\n}\n/**\n * @param {string} algorithm\n * @param {Uint8Array} key\n * @param {Uint8Array} iv\n * @param {Uint8Array} data\n * @returns {Promise<Uint8Array>}\n */\n\nexport async function createDecipheriv(algorithm, key, iv, data) {\n  let algorithm_;\n\n  switch (algorithm.toUpperCase()) {\n    case CipherAlgorithm.Aes128Ctr:\n      algorithm_ = {\n        name: \"AES-CTR\",\n        counter: iv,\n        length: 128\n      };\n      break;\n\n    case CipherAlgorithm.Aes128Cbc:\n      algorithm_ = {\n        name: \"AES-CBC\",\n        iv\n      };\n      break;\n\n    default:\n      throw new Error(\"(BUG) non-exhaustive switch statement for CipherAlgorithm\");\n  }\n\n  const key_ = await window.crypto.subtle.importKey(\"raw\", key, algorithm_.name, false, [\"decrypt\"]);\n  return new Uint8Array(await window.crypto.subtle.decrypt(algorithm_, key_, data));\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/cryptography/src/primitive/aes.browser.js"],"names":["CipherAlgorithm","Aes128Ctr","Aes128Cbc","createCipheriv","algorithm","key","iv","data","algorithm_","toUpperCase","name","counter","length","Error","key_","window","crypto","subtle","importKey","Uint8Array","encrypt","createDecipheriv","decrypt"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG;AAC3BC,EAAAA,SAAS,EAAE,aADgB;AAE3BC,EAAAA,SAAS,EAAE;AAFgB,CAAxB;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,cAAf,CAA8BC,SAA9B,EAAyCC,GAAzC,EAA8CC,EAA9C,EAAkDC,IAAlD,EAAwD;AAC3D,MAAIC,UAAJ;;AAEA,UAAQJ,SAAS,CAACK,WAAV,EAAR;AACI,SAAKT,eAAe,CAACC,SAArB;AACIO,MAAAA,UAAU,GAAG;AACTE,QAAAA,IAAI,EAAE,SADG;AAETC,QAAAA,OAAO,EAAEL,EAFA;AAGTM,QAAAA,MAAM,EAAE;AAHC,OAAb;AAKA;;AACJ,SAAKZ,eAAe,CAACE,SAArB;AACIM,MAAAA,UAAU,GAAG;AACTE,QAAAA,IAAI,EAAE,SADG;AAETJ,QAAAA,EAAE,EAAEA;AAFK,OAAb;AAIA;;AACJ;AACI,YAAM,IAAIO,KAAJ,CACF,2DADE,CAAN;AAfR;;AAoBA,QAAMC,IAAI,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBC,SAArB,CACf,KADe,EAEfb,GAFe,EAGfG,UAAU,CAACE,IAHI,EAIf,KAJe,EAKf,CAAC,SAAD,CALe,CAAnB;AAQA,SAAO,IAAIS,UAAJ,CACH,MAAMJ,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBG,OAArB,CAA6BZ,UAA7B,EAAyCM,IAAzC,EAA+CP,IAA/C,CADH,CAAP;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAec,gBAAf,CAAgCjB,SAAhC,EAA2CC,GAA3C,EAAgDC,EAAhD,EAAoDC,IAApD,EAA0D;AAC7D,MAAIC,UAAJ;;AAEA,UAAQJ,SAAS,CAACK,WAAV,EAAR;AACI,SAAKT,eAAe,CAACC,SAArB;AACIO,MAAAA,UAAU,GAAG;AACTE,QAAAA,IAAI,EAAE,SADG;AAETC,QAAAA,OAAO,EAAEL,EAFA;AAGTM,QAAAA,MAAM,EAAE;AAHC,OAAb;AAKA;;AACJ,SAAKZ,eAAe,CAACE,SAArB;AACIM,MAAAA,UAAU,GAAG;AACTE,QAAAA,IAAI,EAAE,SADG;AAETJ,QAAAA;AAFS,OAAb;AAIA;;AACJ;AACI,YAAM,IAAIO,KAAJ,CACF,2DADE,CAAN;AAfR;;AAoBA,QAAMC,IAAI,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBC,SAArB,CACf,KADe,EAEfb,GAFe,EAGfG,UAAU,CAACE,IAHI,EAIf,KAJe,EAKf,CAAC,SAAD,CALe,CAAnB;AAQA,SAAO,IAAIS,UAAJ,CACH,MAAMJ,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBK,OAArB,CAA6Bd,UAA7B,EAAyCM,IAAzC,EAA+CP,IAA/C,CADH,CAAP;AAGH","sourcesContent":["export const CipherAlgorithm = {\n    Aes128Ctr: \"AES-128-CTR\",\n    Aes128Cbc: \"AES-128-CBC\",\n};\n\n/**\n * @param {string} algorithm\n * @param {Uint8Array} key\n * @param {Uint8Array} iv\n * @param {Uint8Array} data\n * @returns {Promise<Uint8Array>}\n */\nexport async function createCipheriv(algorithm, key, iv, data) {\n    let algorithm_;\n\n    switch (algorithm.toUpperCase()) {\n        case CipherAlgorithm.Aes128Ctr:\n            algorithm_ = {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 128,\n            };\n            break;\n        case CipherAlgorithm.Aes128Cbc:\n            algorithm_ = {\n                name: \"AES-CBC\",\n                iv: iv,\n            };\n            break;\n        default:\n            throw new Error(\n                \"(BUG) non-exhaustive switch statement for CipherAlgorithm\"\n            );\n    }\n\n    const key_ = await window.crypto.subtle.importKey(\n        \"raw\",\n        key,\n        algorithm_.name,\n        false,\n        [\"encrypt\"]\n    );\n\n    return new Uint8Array(\n        await window.crypto.subtle.encrypt(algorithm_, key_, data)\n    );\n}\n\n/**\n * @param {string} algorithm\n * @param {Uint8Array} key\n * @param {Uint8Array} iv\n * @param {Uint8Array} data\n * @returns {Promise<Uint8Array>}\n */\nexport async function createDecipheriv(algorithm, key, iv, data) {\n    let algorithm_;\n\n    switch (algorithm.toUpperCase()) {\n        case CipherAlgorithm.Aes128Ctr:\n            algorithm_ = {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 128,\n            };\n            break;\n        case CipherAlgorithm.Aes128Cbc:\n            algorithm_ = {\n                name: \"AES-CBC\",\n                iv,\n            };\n            break;\n        default:\n            throw new Error(\n                \"(BUG) non-exhaustive switch statement for CipherAlgorithm\"\n            );\n    }\n\n    const key_ = await window.crypto.subtle.importKey(\n        \"raw\",\n        key,\n        algorithm_.name,\n        false,\n        [\"decrypt\"]\n    );\n\n    return new Uint8Array(\n        await window.crypto.subtle.decrypt(algorithm_, key_, data)\n    );\n}\n"]},"metadata":{},"sourceType":"module"}