{"ast":null,"code":"import Key from \"./Key.js\";\nimport BadKeyError from \"./BadKeyError.js\";\nimport { arrayEqual, arrayStartsWith } from \"./util/array.js\";\nimport * as hex from \"./encoding/hex.js\";\nimport * as ecdsa from \"./primitive/ecdsa.js\";\nconst derPrefix = \"302f300706052b8104000a0324000421\";\nconst derPrefixBytes = hex.decode(derPrefix);\n/**\n * An public key on the Hedera™ network.\n */\n\nexport default class EcdsaPublicKey extends Key {\n  /**\n   * @internal\n   * @hideconstructor\n   * @param {Uint8Array} keyData\n   */\n  constructor(keyData) {\n    super();\n    /**\n     * @type {Uint8Array}\n     * @private\n     * @readonly\n     */\n\n    this._keyData = keyData;\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  get _type() {\n    return \"secp256k1\";\n  }\n  /**\n   * @param {Uint8Array} data\n   * @returns {EcdsaPublicKey}\n   */\n\n\n  static fromBytes(data) {\n    switch (data.length) {\n      case 33:\n        return EcdsaPublicKey.fromBytesRaw(data);\n\n      case 49:\n        return EcdsaPublicKey.fromBytesDer(data);\n\n      default:\n        throw new BadKeyError(`invalid public key length: ${data.length} bytes`);\n    }\n  }\n  /**\n   * @param {Uint8Array} data\n   * @returns {EcdsaPublicKey}\n   */\n\n\n  static fromBytesDer(data) {\n    if (data.length != 44 || !arrayStartsWith(data, derPrefixBytes)) {\n      throw new BadKeyError(`invalid public key length: ${data.length} bytes`);\n    }\n\n    return new EcdsaPublicKey(data.subarray(12));\n  }\n  /**\n   * @param {Uint8Array} data\n   * @returns {EcdsaPublicKey}\n   */\n\n\n  static fromBytesRaw(data) {\n    if (data.length != 33) {\n      throw new BadKeyError(`invalid public key length: ${data.length} bytes`);\n    }\n\n    return new EcdsaPublicKey(data);\n  }\n  /**\n   * Parse a public key from a string of hexadecimal digits.\n   *\n   * The public key may optionally be prefixed with\n   * the DER header.\n   *\n   * @param {string} text\n   * @returns {EcdsaPublicKey}\n   */\n\n\n  static fromString(text) {\n    return EcdsaPublicKey.fromBytes(hex.decode(text));\n  }\n  /**\n   * Verify a signature on a message with this public key.\n   *\n   * @param {Uint8Array} message\n   * @param {Uint8Array} signature\n   * @returns {boolean}\n   */\n\n\n  verify(message, signature) {\n    return ecdsa.verify(this._keyData, message, signature);\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytesDer() {\n    const bytes = new Uint8Array(derPrefixBytes.length + this._keyData.length);\n    bytes.set(derPrefixBytes, 0);\n    bytes.set(this._keyData, derPrefixBytes.length);\n    return bytes;\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytesRaw() {\n    return new Uint8Array(this._keyData.subarray());\n  }\n  /**\n   * @param {EcdsaPublicKey} other\n   * @returns {boolean}\n   */\n\n\n  equals(other) {\n    return arrayEqual(this._keyData, other._keyData);\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/cryptography/src/EcdsaPublicKey.js"],"names":["Key","BadKeyError","arrayEqual","arrayStartsWith","hex","ecdsa","derPrefix","derPrefixBytes","decode","EcdsaPublicKey","constructor","keyData","_keyData","_type","fromBytes","data","length","fromBytesRaw","fromBytesDer","subarray","fromString","text","verify","message","signature","toBytesDer","bytes","Uint8Array","set","toBytesRaw","equals","other"],"mappings":"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","sourcesContent":["import Key from \"./Key.js\";\nimport BadKeyError from \"./BadKeyError.js\";\nimport { arrayEqual, arrayStartsWith } from \"./util/array.js\";\nimport * as hex from \"./encoding/hex.js\";\nimport * as ecdsa from \"./primitive/ecdsa.js\";\n\nconst derPrefix = \"302f300706052b8104000a0324000421\";\nconst derPrefixBytes = hex.decode(derPrefix);\n\n/**\n * An public key on the Hedera™ network.\n */\nexport default class EcdsaPublicKey extends Key {\n    /**\n     * @internal\n     * @hideconstructor\n     * @param {Uint8Array} keyData\n     */\n    constructor(keyData) {\n        super();\n\n        /**\n         * @type {Uint8Array}\n         * @private\n         * @readonly\n         */\n        this._keyData = keyData;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get _type() {\n        return \"secp256k1\";\n    }\n\n    /**\n     * @param {Uint8Array} data\n     * @returns {EcdsaPublicKey}\n     */\n    static fromBytes(data) {\n        switch (data.length) {\n            case 33:\n                return EcdsaPublicKey.fromBytesRaw(data);\n            case 49:\n                return EcdsaPublicKey.fromBytesDer(data);\n            default:\n                throw new BadKeyError(\n                    `invalid public key length: ${data.length} bytes`\n                );\n        }\n    }\n\n    /**\n     * @param {Uint8Array} data\n     * @returns {EcdsaPublicKey}\n     */\n    static fromBytesDer(data) {\n        if (data.length != 44 || !arrayStartsWith(data, derPrefixBytes)) {\n            throw new BadKeyError(\n                `invalid public key length: ${data.length} bytes`\n            );\n        }\n\n        return new EcdsaPublicKey(data.subarray(12));\n    }\n\n    /**\n     * @param {Uint8Array} data\n     * @returns {EcdsaPublicKey}\n     */\n    static fromBytesRaw(data) {\n        if (data.length != 33) {\n            throw new BadKeyError(\n                `invalid public key length: ${data.length} bytes`\n            );\n        }\n\n        return new EcdsaPublicKey(data);\n    }\n\n    /**\n     * Parse a public key from a string of hexadecimal digits.\n     *\n     * The public key may optionally be prefixed with\n     * the DER header.\n     *\n     * @param {string} text\n     * @returns {EcdsaPublicKey}\n     */\n    static fromString(text) {\n        return EcdsaPublicKey.fromBytes(hex.decode(text));\n    }\n\n    /**\n     * Verify a signature on a message with this public key.\n     *\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {boolean}\n     */\n    verify(message, signature) {\n        return ecdsa.verify(this._keyData, message, signature);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytesDer() {\n        const bytes = new Uint8Array(\n            derPrefixBytes.length + this._keyData.length\n        );\n\n        bytes.set(derPrefixBytes, 0);\n        bytes.set(this._keyData, derPrefixBytes.length);\n\n        return bytes;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytesRaw() {\n        return new Uint8Array(this._keyData.subarray());\n    }\n\n    /**\n     * @param {EcdsaPublicKey} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        return arrayEqual(this._keyData, other._keyData);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}