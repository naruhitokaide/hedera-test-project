{"ast":null,"code":"import AccountId from \"../account/AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport FileId from \"../file/FileId.js\";\nimport TopicId from \"../topic/TopicId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport ScheduleId from \"../schedule/ScheduleId.js\";\nimport ExchangeRate from \"../ExchangeRate.js\";\nimport Status from \"../Status.js\";\nimport Long from \"long\";\nimport * as proto from \"@hashgraph/proto\";\nimport TransactionId from \"../transaction/TransactionId.js\";\n/**\n * The consensus result for a transaction, which might not be currently known,\n * or may succeed or fail.\n */\n\nexport default class TransactionReceipt {\n  /**\n   * @private\n   * @param {object} props\n   * @param {Status} props.status\n   * @param {?AccountId} props.accountId\n   * @param {?FileId} props.fileId\n   * @param {?ContractId} props.contractId\n   * @param {?TopicId} props.topicId\n   * @param {?TokenId} props.tokenId\n   * @param {?ScheduleId} props.scheduleId\n   * @param {?ExchangeRate} props.exchangeRate\n   * @param {?Long} props.topicSequenceNumber\n   * @param {?Uint8Array} props.topicRunningHash\n   * @param {?Long} props.totalSupply\n   * @param {?TransactionId} props.scheduledTransactionId\n   * @param {Long[]} props.serials\n   * @param {TransactionReceipt[]} props.duplicates\n   * @param {TransactionReceipt[]} props.children\n   */\n  constructor(props) {\n    /**\n     * Whether the transaction succeeded or failed (or is unknown).\n     *\n     * @readonly\n     */\n    this.status = props.status;\n    /**\n     * The account ID, if a new account was created.\n     *\n     * @readonly\n     */\n\n    this.accountId = props.accountId;\n    /**\n     * The file ID, if a new file was created.\n     *\n     * @readonly\n     */\n\n    this.fileId = props.fileId;\n    /**\n     * The contract ID, if a new contract was created.\n     *\n     * @readonly\n     */\n\n    this.contractId = props.contractId;\n    /**\n     * The topic ID, if a new topic was created.\n     *\n     * @readonly\n     */\n\n    this.topicId = props.topicId;\n    /**\n     * The token ID, if a new token was created.\n     *\n     * @readonly\n     */\n\n    this.tokenId = props.tokenId;\n    /**\n     * The schedule ID, if a new schedule was created.\n     *\n     * @readonly\n     */\n\n    this.scheduleId = props.scheduleId;\n    /**\n     * The exchange rate of Hbars to cents (USD).\n     *\n     * @readonly\n     */\n\n    this.exchangeRate = props.exchangeRate;\n    /**\n     * Updated sequence number for a consensus service topic.\n     *\n     * @readonly\n     */\n\n    this.topicSequenceNumber = props.topicSequenceNumber;\n    /**\n     * Updated running hash for a consensus service topic.\n     *\n     * @readonly\n     */\n\n    this.topicRunningHash = props.topicRunningHash;\n    /**\n     * Updated total supply for a token\n     *\n     * @readonly\n     */\n\n    this.totalSupply = props.totalSupply;\n    this.scheduledTransactionId = props.scheduledTransactionId;\n    this.serials = props.serials;\n    /**\n     * @readonly\n     */\n\n    this.duplicates = props.duplicates;\n    /**\n     * @readonly\n     */\n\n    this.children = props.children;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @returns {proto.ITransactionGetReceiptResponse}\n   */\n\n\n  _toProtobuf() {\n    const duplicates = this.duplicates.map(receipt =>\n    /** @type {proto.ITransactionReceipt} */\n    receipt._toProtobuf().receipt);\n    const children = this.children.map(receipt =>\n    /** @type {proto.ITransactionReceipt} */\n    receipt._toProtobuf().receipt);\n    return {\n      duplicateTransactionReceipts: duplicates,\n      childTransactionReceipts: children,\n      receipt: {\n        status: this.status.valueOf(),\n        accountID: this.accountId != null ? this.accountId._toProtobuf() : null,\n        fileID: this.fileId != null ? this.fileId._toProtobuf() : null,\n        contractID: this.contractId != null ? this.contractId._toProtobuf() : null,\n        topicID: this.topicId != null ? this.topicId._toProtobuf() : null,\n        tokenID: this.topicId != null ? this.topicId._toProtobuf() : null,\n        scheduleID: this.topicId != null ? this.topicId._toProtobuf() : null,\n        topicRunningHash: this.topicRunningHash == null ? null : this.topicRunningHash,\n        topicSequenceNumber: this.topicSequenceNumber,\n        exchangeRate: {\n          nextRate: null,\n          currentRate: this.exchangeRate != null ? this.exchangeRate._toProtobuf() : null\n        },\n        scheduledTransactionID: this.scheduledTransactionId != null ? this.scheduledTransactionId._toProtobuf() : null,\n        serialNumbers: this.serials\n      }\n    };\n  }\n  /**\n   * @internal\n   * @param {proto.ITransactionGetReceiptResponse} response\n   * @returns {TransactionReceipt}\n   */\n\n\n  static _fromProtobuf(response) {\n    const receipt =\n    /** @type {proto.ITransactionReceipt} */\n    response.receipt;\n    const exchangeRateSet =\n    /** @type {proto.IExchangeRateSet} */\n    receipt.exchangeRate;\n    const children = response.childTransactionReceipts != null ? response.childTransactionReceipts.map(child => TransactionReceipt._fromProtobuf({\n      receipt: child\n    })) : [];\n    const duplicates = response.duplicateTransactionReceipts != null ? response.duplicateTransactionReceipts.map(duplicate => TransactionReceipt._fromProtobuf({\n      receipt: duplicate\n    })) : [];\n    return new TransactionReceipt({\n      status: Status._fromCode(receipt.status != null ? receipt.status : 0),\n      accountId: receipt.accountID != null ? AccountId._fromProtobuf(receipt.accountID) : null,\n      fileId: receipt.fileID != null ? FileId._fromProtobuf(receipt.fileID) : null,\n      contractId: receipt.contractID != null ? ContractId._fromProtobuf(receipt.contractID) : null,\n      topicId: receipt.topicID != null ? TopicId._fromProtobuf(receipt.topicID) : null,\n      tokenId: receipt.tokenID != null ? TokenId._fromProtobuf(receipt.tokenID) : null,\n      scheduleId: receipt.scheduleID != null ? ScheduleId._fromProtobuf(receipt.scheduleID) : null,\n      exchangeRate: receipt.exchangeRate != null ? ExchangeRate._fromProtobuf(\n      /** @type {proto.IExchangeRate} */\n      exchangeRateSet.currentRate) : null,\n      topicSequenceNumber: receipt.topicSequenceNumber == null ? null : Long.fromValue(receipt.topicSequenceNumber),\n      topicRunningHash: receipt.topicRunningHash != null ? receipt.topicRunningHash : null,\n      totalSupply: receipt.newTotalSupply != null ? receipt.newTotalSupply : null,\n      scheduledTransactionId: receipt.scheduledTransactionID != null ? TransactionId._fromProtobuf(receipt.scheduledTransactionID) : null,\n      serials: receipt.serialNumbers != null ? receipt.serialNumbers : [],\n      children,\n      duplicates\n    });\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {TransactionReceipt}\n   */\n\n\n  static fromBytes(bytes) {\n    return TransactionReceipt._fromProtobuf(proto.TransactionGetReceiptResponse.decode(bytes));\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return proto.TransactionGetReceiptResponse.encode(this._toProtobuf()).finish();\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/transaction/TransactionReceipt.js"],"names":["AccountId","ContractId","FileId","TopicId","TokenId","ScheduleId","ExchangeRate","Status","Long","proto","TransactionId","TransactionReceipt","constructor","props","status","accountId","fileId","contractId","topicId","tokenId","scheduleId","exchangeRate","topicSequenceNumber","topicRunningHash","totalSupply","scheduledTransactionId","serials","duplicates","children","Object","freeze","_toProtobuf","map","receipt","duplicateTransactionReceipts","childTransactionReceipts","valueOf","accountID","fileID","contractID","topicID","tokenID","scheduleID","nextRate","currentRate","scheduledTransactionID","serialNumbers","_fromProtobuf","response","exchangeRateSet","child","duplicate","_fromCode","fromValue","newTotalSupply","fromBytes","bytes","TransactionGetReceiptResponse","decode","toBytes","encode","finish"],"mappings":"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","sourcesContent":["import AccountId from \"../account/AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport FileId from \"../file/FileId.js\";\nimport TopicId from \"../topic/TopicId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport ScheduleId from \"../schedule/ScheduleId.js\";\nimport ExchangeRate from \"../ExchangeRate.js\";\nimport Status from \"../Status.js\";\nimport Long from \"long\";\nimport * as proto from \"@hashgraph/proto\";\nimport TransactionId from \"../transaction/TransactionId.js\";\n\n/**\n * The consensus result for a transaction, which might not be currently known,\n * or may succeed or fail.\n */\nexport default class TransactionReceipt {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Status} props.status\n     * @param {?AccountId} props.accountId\n     * @param {?FileId} props.fileId\n     * @param {?ContractId} props.contractId\n     * @param {?TopicId} props.topicId\n     * @param {?TokenId} props.tokenId\n     * @param {?ScheduleId} props.scheduleId\n     * @param {?ExchangeRate} props.exchangeRate\n     * @param {?Long} props.topicSequenceNumber\n     * @param {?Uint8Array} props.topicRunningHash\n     * @param {?Long} props.totalSupply\n     * @param {?TransactionId} props.scheduledTransactionId\n     * @param {Long[]} props.serials\n     * @param {TransactionReceipt[]} props.duplicates\n     * @param {TransactionReceipt[]} props.children\n     */\n    constructor(props) {\n        /**\n         * Whether the transaction succeeded or failed (or is unknown).\n         *\n         * @readonly\n         */\n        this.status = props.status;\n\n        /**\n         * The account ID, if a new account was created.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * The file ID, if a new file was created.\n         *\n         * @readonly\n         */\n        this.fileId = props.fileId;\n\n        /**\n         * The contract ID, if a new contract was created.\n         *\n         * @readonly\n         */\n        this.contractId = props.contractId;\n\n        /**\n         * The topic ID, if a new topic was created.\n         *\n         * @readonly\n         */\n        this.topicId = props.topicId;\n\n        /**\n         * The token ID, if a new token was created.\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The schedule ID, if a new schedule was created.\n         *\n         * @readonly\n         */\n        this.scheduleId = props.scheduleId;\n\n        /**\n         * The exchange rate of Hbars to cents (USD).\n         *\n         * @readonly\n         */\n        this.exchangeRate = props.exchangeRate;\n\n        /**\n         * Updated sequence number for a consensus service topic.\n         *\n         * @readonly\n         */\n        this.topicSequenceNumber = props.topicSequenceNumber;\n\n        /**\n         * Updated running hash for a consensus service topic.\n         *\n         * @readonly\n         */\n        this.topicRunningHash = props.topicRunningHash;\n\n        /**\n         * Updated total supply for a token\n         *\n         * @readonly\n         */\n        this.totalSupply = props.totalSupply;\n\n        this.scheduledTransactionId = props.scheduledTransactionId;\n\n        this.serials = props.serials;\n\n        /**\n         * @readonly\n         */\n        this.duplicates = props.duplicates;\n\n        /**\n         * @readonly\n         */\n        this.children = props.children;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @returns {proto.ITransactionGetReceiptResponse}\n     */\n    _toProtobuf() {\n        const duplicates = this.duplicates.map(\n            (receipt) =>\n                /** @type {proto.ITransactionReceipt} */ (\n                    receipt._toProtobuf().receipt\n                )\n        );\n        const children = this.children.map(\n            (receipt) =>\n                /** @type {proto.ITransactionReceipt} */ (\n                    receipt._toProtobuf().receipt\n                )\n        );\n\n        return {\n            duplicateTransactionReceipts: duplicates,\n            childTransactionReceipts: children,\n            receipt: {\n                status: this.status.valueOf(),\n\n                accountID:\n                    this.accountId != null\n                        ? this.accountId._toProtobuf()\n                        : null,\n                fileID: this.fileId != null ? this.fileId._toProtobuf() : null,\n                contractID:\n                    this.contractId != null\n                        ? this.contractId._toProtobuf()\n                        : null,\n                topicID:\n                    this.topicId != null ? this.topicId._toProtobuf() : null,\n                tokenID:\n                    this.topicId != null ? this.topicId._toProtobuf() : null,\n                scheduleID:\n                    this.topicId != null ? this.topicId._toProtobuf() : null,\n\n                topicRunningHash:\n                    this.topicRunningHash == null\n                        ? null\n                        : this.topicRunningHash,\n\n                topicSequenceNumber: this.topicSequenceNumber,\n\n                exchangeRate: {\n                    nextRate: null,\n                    currentRate:\n                        this.exchangeRate != null\n                            ? this.exchangeRate._toProtobuf()\n                            : null,\n                },\n\n                scheduledTransactionID:\n                    this.scheduledTransactionId != null\n                        ? this.scheduledTransactionId._toProtobuf()\n                        : null,\n\n                serialNumbers: this.serials,\n            },\n        };\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransactionGetReceiptResponse} response\n     * @returns {TransactionReceipt}\n     */\n    static _fromProtobuf(response) {\n        const receipt = /** @type {proto.ITransactionReceipt} */ (\n            response.receipt\n        );\n\n        const exchangeRateSet = /** @type {proto.IExchangeRateSet} */ (\n            receipt.exchangeRate\n        );\n\n        const children =\n            response.childTransactionReceipts != null\n                ? response.childTransactionReceipts.map((child) =>\n                      TransactionReceipt._fromProtobuf({ receipt: child })\n                  )\n                : [];\n\n        const duplicates =\n            response.duplicateTransactionReceipts != null\n                ? response.duplicateTransactionReceipts.map((duplicate) =>\n                      TransactionReceipt._fromProtobuf({ receipt: duplicate })\n                  )\n                : [];\n\n        return new TransactionReceipt({\n            status: Status._fromCode(\n                receipt.status != null ? receipt.status : 0\n            ),\n\n            accountId:\n                receipt.accountID != null\n                    ? AccountId._fromProtobuf(receipt.accountID)\n                    : null,\n\n            fileId:\n                receipt.fileID != null\n                    ? FileId._fromProtobuf(receipt.fileID)\n                    : null,\n\n            contractId:\n                receipt.contractID != null\n                    ? ContractId._fromProtobuf(receipt.contractID)\n                    : null,\n\n            topicId:\n                receipt.topicID != null\n                    ? TopicId._fromProtobuf(receipt.topicID)\n                    : null,\n\n            tokenId:\n                receipt.tokenID != null\n                    ? TokenId._fromProtobuf(receipt.tokenID)\n                    : null,\n\n            scheduleId:\n                receipt.scheduleID != null\n                    ? ScheduleId._fromProtobuf(receipt.scheduleID)\n                    : null,\n\n            exchangeRate:\n                receipt.exchangeRate != null\n                    ? ExchangeRate._fromProtobuf(\n                          /** @type {proto.IExchangeRate} */\n                          (exchangeRateSet.currentRate)\n                      )\n                    : null,\n\n            topicSequenceNumber:\n                receipt.topicSequenceNumber == null\n                    ? null\n                    : Long.fromValue(receipt.topicSequenceNumber),\n\n            topicRunningHash:\n                receipt.topicRunningHash != null\n                    ? receipt.topicRunningHash\n                    : null,\n\n            totalSupply:\n                receipt.newTotalSupply != null ? receipt.newTotalSupply : null,\n\n            scheduledTransactionId:\n                receipt.scheduledTransactionID != null\n                    ? TransactionId._fromProtobuf(\n                          receipt.scheduledTransactionID\n                      )\n                    : null,\n            serials: receipt.serialNumbers != null ? receipt.serialNumbers : [],\n            children,\n            duplicates,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionReceipt}\n     */\n    static fromBytes(bytes) {\n        return TransactionReceipt._fromProtobuf(\n            proto.TransactionGetReceiptResponse.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.TransactionGetReceiptResponse.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}