{"ast":null,"code":"import NftId from \"./NftId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport LedgerId from \"../LedgerId.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").TokenFreezeStatus} proto.TokenFreezeStatus\n * @typedef {import(\"@hashgraph/proto\").TokenKycStatus} proto.TokenKycStatus\n * @typedef {import(\"@hashgraph/proto\").TokenPauseStatus} proto.TokenPauseStatus\n * @typedef {import(\"@hashgraph/proto\").ITokenNftInfo} proto.ITokenNftInfo\n * @typedef {import(\"@hashgraph/proto\").INftID} proto.INftID\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").IKey} proto.IKey\n * @typedef {import(\"@hashgraph/proto\").IDuration} proto.IDuration\n */\n\nexport default class TokenNftInfo {\n  /**\n   * @private\n   * @param {object} props\n   * @param {NftId} props.nftId\n   * @param {AccountId} props.accountId\n   * @param {Timestamp} props.creationTime\n   * @param {Uint8Array | null} props.metadata\n   * @param {LedgerId|null} props.ledgerId\n   */\n  constructor(props) {\n    /**\n     * ID of the nft instance\n     *\n     * @readonly\n     */\n    this.nftId = props.nftId;\n    /**\n     * @readonly\n     */\n\n    this.accountId = props.accountId;\n    /**\n     * @readonly\n     */\n\n    this.creationTime = props.creationTime;\n    /**\n     * @readonly\n     */\n\n    this.metadata = props.metadata;\n    this.ledgerId = props.ledgerId;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {proto.ITokenNftInfo} info\n   * @returns {TokenNftInfo}\n   */\n\n\n  static _fromProtobuf(info) {\n    return new TokenNftInfo({\n      nftId: NftId._fromProtobuf(\n      /** @type {proto.INftID} */\n      info.nftID),\n      accountId: AccountId._fromProtobuf(\n      /** @type {proto.IAccountID} */\n      info.accountID),\n      creationTime: Timestamp._fromProtobuf(\n      /** @type {proto.ITimestamp} */\n      info.creationTime),\n      metadata: info.metadata !== undefined ? info.metadata : null,\n      ledgerId: info.ledgerId != null ? LedgerId.fromBytes(info.ledgerId) : null\n    });\n  }\n  /**\n   * @returns {proto.ITokenNftInfo}\n   */\n\n\n  _toProtobuf() {\n    return {\n      nftID: this.nftId._toProtobuf(),\n      accountID: this.accountId._toProtobuf(),\n      creationTime: this.creationTime._toProtobuf(),\n      metadata: this.metadata,\n      ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null\n    };\n  }\n  /**\n   * @typedef {object} TokenNftInfoJson\n   * @property {string} nftId\n   * @property {string} accountId\n   * @property {string} creationTime\n   * @property {string | null} metadata\n   * @property {string | null} ledgerId\n   * @returns {TokenNftInfoJson}\n   */\n\n\n  toJson() {\n    return {\n      nftId: this.nftId.toString(),\n      accountId: this.accountId.toString(),\n      creationTime: this.creationTime.toString(),\n      metadata: this.metadata != null ? hex.encode(this.metadata) : null,\n      ledgerId: this.ledgerId != null ? this.ledgerId.toString() : null\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJson());\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/token/TokenNftInfo.js"],"names":["NftId","AccountId","Timestamp","hex","LedgerId","TokenNftInfo","constructor","props","nftId","accountId","creationTime","metadata","ledgerId","Object","freeze","_fromProtobuf","info","nftID","accountID","undefined","fromBytes","_toProtobuf","toBytes","toJson","toString","encode","JSON","stringify"],"mappings":"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","sourcesContent":["import NftId from \"./NftId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").TokenFreezeStatus} proto.TokenFreezeStatus\n * @typedef {import(\"@hashgraph/proto\").TokenKycStatus} proto.TokenKycStatus\n * @typedef {import(\"@hashgraph/proto\").TokenPauseStatus} proto.TokenPauseStatus\n * @typedef {import(\"@hashgraph/proto\").ITokenNftInfo} proto.ITokenNftInfo\n * @typedef {import(\"@hashgraph/proto\").INftID} proto.INftID\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").IKey} proto.IKey\n * @typedef {import(\"@hashgraph/proto\").IDuration} proto.IDuration\n */\n\nexport default class TokenNftInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {NftId} props.nftId\n     * @param {AccountId} props.accountId\n     * @param {Timestamp} props.creationTime\n     * @param {Uint8Array | null} props.metadata\n     * @param {LedgerId|null} props.ledgerId\n     */\n    constructor(props) {\n        /**\n         * ID of the nft instance\n         *\n         * @readonly\n         */\n        this.nftId = props.nftId;\n\n        /**\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * @readonly\n         */\n        this.creationTime = props.creationTime;\n\n        /**\n         * @readonly\n         */\n        this.metadata = props.metadata;\n\n        this.ledgerId = props.ledgerId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITokenNftInfo} info\n     * @returns {TokenNftInfo}\n     */\n    static _fromProtobuf(info) {\n        return new TokenNftInfo({\n            nftId: NftId._fromProtobuf(\n                /** @type {proto.INftID} */ (info.nftID)\n            ),\n            accountId: AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (info.accountID)\n            ),\n            creationTime: Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */ (info.creationTime)\n            ),\n            metadata: info.metadata !== undefined ? info.metadata : null,\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n        });\n    }\n\n    /**\n     * @returns {proto.ITokenNftInfo}\n     */\n    _toProtobuf() {\n        return {\n            nftID: this.nftId._toProtobuf(),\n            accountID: this.accountId._toProtobuf(),\n            creationTime: this.creationTime._toProtobuf(),\n            metadata: this.metadata,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n        };\n    }\n\n    /**\n     * @typedef {object} TokenNftInfoJson\n     * @property {string} nftId\n     * @property {string} accountId\n     * @property {string} creationTime\n     * @property {string | null} metadata\n     * @property {string | null} ledgerId\n     * @returns {TokenNftInfoJson}\n     */\n    toJson() {\n        return {\n            nftId: this.nftId.toString(),\n            accountId: this.accountId.toString(),\n            creationTime: this.creationTime.toString(),\n            metadata: this.metadata != null ? hex.encode(this.metadata) : null,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toString() : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJson());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}