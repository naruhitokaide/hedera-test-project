{"ast":null,"code":"import TopicId from \"./TopicId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport Duration from \"../Duration.js\";\nimport * as proto from \"@hashgraph/proto\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\n/**\n * Current state of a topic.\n */\n\nexport default class TopicInfo {\n  /**\n   * @private\n   * @param {object} props\n   * @param {TopicId} props.topicId\n   * @param {string} props.topicMemo\n   * @param {Uint8Array} props.runningHash\n   * @param {Long} props.sequenceNumber\n   * @param {?Timestamp} props.expirationTime\n   * @param {?Key} props.adminKey\n   * @param {?Key} props.submitKey\n   * @param {?Duration} props.autoRenewPeriod\n   * @param {?AccountId} props.autoRenewAccountId\n   * @param {LedgerId|null} props.ledgerId\n   */\n  constructor(props) {\n    /**\n     * The ID of the topic for which information is requested.\n     *\n     * @readonly\n     */\n    this.topicId = props.topicId;\n    /**\n     * Short publicly visible memo about the topic. No guarantee of uniqueness.\n     *\n     * @readonly\n     */\n\n    this.topicMemo = props.topicMemo;\n    /**\n     * SHA-384 running hash of (previousRunningHash, topicId, consensusTimestamp, sequenceNumber, message).\n     *\n     * @readonly\n     */\n\n    this.runningHash = props.runningHash;\n    /**\n     * Sequence number (starting at 1 for the first submitMessage) of messages on the topic.\n     *\n     * @readonly\n     */\n\n    this.sequenceNumber = props.sequenceNumber;\n    /**\n     * Effective consensus timestamp at (and after) which submitMessage calls will no longer succeed on the topic.\n     *\n     * @readonly\n     */\n\n    this.expirationTime = props.expirationTime;\n    /**\n     * Access control for update/delete of the topic. Null if there is no key.\n     *\n     * @readonly\n     */\n\n    this.adminKey = props.adminKey;\n    /**\n     * Access control for ConsensusService.submitMessage. Null if there is no key.\n     *\n     * @readonly\n     */\n\n    this.submitKey = props.submitKey;\n    /**\n     * @readonly\n     */\n\n    this.autoRenewPeriod = props.autoRenewPeriod;\n    /**\n     * @readonly\n     */\n\n    this.autoRenewAccountId = props.autoRenewAccountId;\n    this.ledgerId = props.ledgerId;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {proto.IConsensusGetTopicInfoResponse} infoResponse\n   * @returns {TopicInfo}\n   */\n\n\n  static _fromProtobuf(infoResponse) {\n    const info =\n    /** @type {proto.IConsensusTopicInfo} */\n    infoResponse.topicInfo;\n    return new TopicInfo({\n      topicId: TopicId._fromProtobuf(\n      /** @type {proto.ITopicID} */\n      infoResponse.topicID),\n      topicMemo: info.memo != null ? info.memo : \"\",\n      runningHash: info.runningHash != null ? info.runningHash : new Uint8Array(),\n      sequenceNumber: info.sequenceNumber != null ? info.sequenceNumber instanceof Long ? info.sequenceNumber : Long.fromValue(info.sequenceNumber) : Long.ZERO,\n      expirationTime: info.expirationTime != null ? Timestamp._fromProtobuf(info.expirationTime) : null,\n      adminKey: info.adminKey != null ? Key._fromProtobufKey(info.adminKey) : null,\n      submitKey: info.submitKey != null ? Key._fromProtobufKey(info.submitKey) : null,\n      autoRenewPeriod: info.autoRenewPeriod != null ? new Duration(\n      /** @type {Long} */\n      info.autoRenewPeriod.seconds) : null,\n      autoRenewAccountId: info.autoRenewAccount != null ? AccountId._fromProtobuf(info.autoRenewAccount) : null,\n      ledgerId: info.ledgerId != null ? LedgerId.fromBytes(info.ledgerId) : null\n    });\n  }\n  /**\n   * @internal\n   * @returns {proto.IConsensusGetTopicInfoResponse}\n   */\n\n\n  _toProtobuf() {\n    return {\n      topicID: this.topicId._toProtobuf(),\n      topicInfo: {\n        memo: this.topicMemo,\n        runningHash: this.runningHash,\n        sequenceNumber: this.sequenceNumber,\n        expirationTime: this.expirationTime != null ? this.expirationTime._toProtobuf() : null,\n        adminKey: this.adminKey != null ? this.adminKey._toProtobufKey() : null,\n        submitKey: this.submitKey != null ? this.submitKey._toProtobufKey() : null,\n        autoRenewPeriod: this.autoRenewPeriod != null ? this.autoRenewPeriod._toProtobuf() : null,\n        autoRenewAccount: this.autoRenewAccountId != null ? this.autoRenewAccountId._toProtobuf() : null\n      }\n    };\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {TopicInfo}\n   */\n\n\n  static fromBytes(bytes) {\n    return TopicInfo._fromProtobuf({\n      topicInfo: proto.ConsensusTopicInfo.decode(bytes)\n    });\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return proto.ConsensusTopicInfo.encode(\n    /** @type {proto.IConsensusTopicInfo} */\n    this._toProtobuf().topicInfo).finish();\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/topic/TopicInfo.js"],"names":["TopicId","AccountId","Timestamp","Long","Duration","proto","Key","LedgerId","TopicInfo","constructor","props","topicId","topicMemo","runningHash","sequenceNumber","expirationTime","adminKey","submitKey","autoRenewPeriod","autoRenewAccountId","ledgerId","Object","freeze","_fromProtobuf","infoResponse","info","topicInfo","topicID","memo","Uint8Array","fromValue","ZERO","_fromProtobufKey","seconds","autoRenewAccount","fromBytes","_toProtobuf","_toProtobufKey","bytes","ConsensusTopicInfo","decode","toBytes","encode","finish"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,SAAN,CAAgB;AAC3B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACR;AACA;AACA;AACA;AACQ,SAAKC,OAAL,GAAeD,KAAK,CAACC,OAArB;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiBF,KAAK,CAACE,SAAvB;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,WAAL,GAAmBH,KAAK,CAACG,WAAzB;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,cAAL,GAAsBJ,KAAK,CAACI,cAA5B;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,cAAL,GAAsBL,KAAK,CAACK,cAA5B;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgBN,KAAK,CAACM,QAAtB;AAEA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiBP,KAAK,CAACO,SAAvB;AAEA;AACR;AACA;;AACQ,SAAKC,eAAL,GAAuBR,KAAK,CAACQ,eAA7B;AAEA;AACR;AACA;;AACQ,SAAKC,kBAAL,GAA0BT,KAAK,CAACS,kBAAhC;AAEA,SAAKC,QAAL,GAAgBV,KAAK,CAACU,QAAtB;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbC,aAAa,CAACC,YAAD,EAAe;AAC/B,UAAMC,IAAI;AAAG;AACTD,IAAAA,YAAY,CAACE,SADjB;AAIA,WAAO,IAAIlB,SAAJ,CAAc;AACjBG,MAAAA,OAAO,EAAEX,OAAO,CAACuB,aAAR;AACL;AAA+BC,MAAAA,YAAY,CAACG,OADvC,CADQ;AAIjBf,MAAAA,SAAS,EAAEa,IAAI,CAACG,IAAL,IAAa,IAAb,GAAoBH,IAAI,CAACG,IAAzB,GAAgC,EAJ1B;AAKjBf,MAAAA,WAAW,EACPY,IAAI,CAACZ,WAAL,IAAoB,IAApB,GAA2BY,IAAI,CAACZ,WAAhC,GAA8C,IAAIgB,UAAJ,EANjC;AAOjBf,MAAAA,cAAc,EACVW,IAAI,CAACX,cAAL,IAAuB,IAAvB,GACMW,IAAI,CAACX,cAAL,YAA+BX,IAA/B,GACIsB,IAAI,CAACX,cADT,GAEIX,IAAI,CAAC2B,SAAL,CAAeL,IAAI,CAACX,cAApB,CAHV,GAIMX,IAAI,CAAC4B,IAZE;AAajBhB,MAAAA,cAAc,EACVU,IAAI,CAACV,cAAL,IAAuB,IAAvB,GACMb,SAAS,CAACqB,aAAV,CAAwBE,IAAI,CAACV,cAA7B,CADN,GAEM,IAhBO;AAiBjBC,MAAAA,QAAQ,EACJS,IAAI,CAACT,QAAL,IAAiB,IAAjB,GACMV,GAAG,CAAC0B,gBAAJ,CAAqBP,IAAI,CAACT,QAA1B,CADN,GAEM,IApBO;AAqBjBC,MAAAA,SAAS,EACLQ,IAAI,CAACR,SAAL,IAAkB,IAAlB,GACMX,GAAG,CAAC0B,gBAAJ,CAAqBP,IAAI,CAACR,SAA1B,CADN,GAEM,IAxBO;AAyBjBC,MAAAA,eAAe,EACXO,IAAI,CAACP,eAAL,IAAwB,IAAxB,GACM,IAAId,QAAJ;AACI;AAAqBqB,MAAAA,IAAI,CAACP,eAAL,CAAqBe,OAD9C,CADN,GAIM,IA9BO;AA+BjBd,MAAAA,kBAAkB,EACdM,IAAI,CAACS,gBAAL,IAAyB,IAAzB,GACMjC,SAAS,CAACsB,aAAV,CAAwBE,IAAI,CAACS,gBAA7B,CADN,GAEM,IAlCO;AAmCjBd,MAAAA,QAAQ,EACJK,IAAI,CAACL,QAAL,IAAiB,IAAjB,GACMb,QAAQ,CAAC4B,SAAT,CAAmBV,IAAI,CAACL,QAAxB,CADN,GAEM;AAtCO,KAAd,CAAP;AAwCH;AAED;AACJ;AACA;AACA;;;AACIgB,EAAAA,WAAW,GAAG;AACV,WAAO;AACHT,MAAAA,OAAO,EAAE,KAAKhB,OAAL,CAAayB,WAAb,EADN;AAEHV,MAAAA,SAAS,EAAE;AACPE,QAAAA,IAAI,EAAE,KAAKhB,SADJ;AAEPC,QAAAA,WAAW,EAAE,KAAKA,WAFX;AAGPC,QAAAA,cAAc,EAAE,KAAKA,cAHd;AAIPC,QAAAA,cAAc,EACV,KAAKA,cAAL,IAAuB,IAAvB,GACM,KAAKA,cAAL,CAAoBqB,WAApB,EADN,GAEM,IAPH;AAQPpB,QAAAA,QAAQ,EACJ,KAAKA,QAAL,IAAiB,IAAjB,GACM,KAAKA,QAAL,CAAcqB,cAAd,EADN,GAEM,IAXH;AAYPpB,QAAAA,SAAS,EACL,KAAKA,SAAL,IAAkB,IAAlB,GACM,KAAKA,SAAL,CAAeoB,cAAf,EADN,GAEM,IAfH;AAgBPnB,QAAAA,eAAe,EACX,KAAKA,eAAL,IAAwB,IAAxB,GACM,KAAKA,eAAL,CAAqBkB,WAArB,EADN,GAEM,IAnBH;AAoBPF,QAAAA,gBAAgB,EACZ,KAAKf,kBAAL,IAA2B,IAA3B,GACM,KAAKA,kBAAL,CAAwBiB,WAAxB,EADN,GAEM;AAvBH;AAFR,KAAP;AA4BH;AAED;AACJ;AACA;AACA;;;AACoB,SAATD,SAAS,CAACG,KAAD,EAAQ;AACpB,WAAO9B,SAAS,CAACe,aAAV,CAAwB;AAC3BG,MAAAA,SAAS,EAAErB,KAAK,CAACkC,kBAAN,CAAyBC,MAAzB,CAAgCF,KAAhC;AADgB,KAAxB,CAAP;AAGH;AAED;AACJ;AACA;;;AACIG,EAAAA,OAAO,GAAG;AACN,WAAOpC,KAAK,CAACkC,kBAAN,CAAyBG,MAAzB;AACH;AACI,SAAKN,WAAL,GAAmBV,SAFpB,EAILiB,MAJK,EAAP;AAKH;;AA1L0B","sourcesContent":["import TopicId from \"./TopicId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport Duration from \"../Duration.js\";\nimport * as proto from \"@hashgraph/proto\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * Current state of a topic.\n */\nexport default class TopicInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {TopicId} props.topicId\n     * @param {string} props.topicMemo\n     * @param {Uint8Array} props.runningHash\n     * @param {Long} props.sequenceNumber\n     * @param {?Timestamp} props.expirationTime\n     * @param {?Key} props.adminKey\n     * @param {?Key} props.submitKey\n     * @param {?Duration} props.autoRenewPeriod\n     * @param {?AccountId} props.autoRenewAccountId\n     * @param {LedgerId|null} props.ledgerId\n     */\n    constructor(props) {\n        /**\n         * The ID of the topic for which information is requested.\n         *\n         * @readonly\n         */\n        this.topicId = props.topicId;\n\n        /**\n         * Short publicly visible memo about the topic. No guarantee of uniqueness.\n         *\n         * @readonly\n         */\n        this.topicMemo = props.topicMemo;\n\n        /**\n         * SHA-384 running hash of (previousRunningHash, topicId, consensusTimestamp, sequenceNumber, message).\n         *\n         * @readonly\n         */\n        this.runningHash = props.runningHash;\n\n        /**\n         * Sequence number (starting at 1 for the first submitMessage) of messages on the topic.\n         *\n         * @readonly\n         */\n        this.sequenceNumber = props.sequenceNumber;\n\n        /**\n         * Effective consensus timestamp at (and after) which submitMessage calls will no longer succeed on the topic.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * Access control for update/delete of the topic. Null if there is no key.\n         *\n         * @readonly\n         */\n        this.adminKey = props.adminKey;\n\n        /**\n         * Access control for ConsensusService.submitMessage. Null if there is no key.\n         *\n         * @readonly\n         */\n        this.submitKey = props.submitKey;\n\n        /**\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /**\n         * @readonly\n         */\n        this.autoRenewAccountId = props.autoRenewAccountId;\n\n        this.ledgerId = props.ledgerId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IConsensusGetTopicInfoResponse} infoResponse\n     * @returns {TopicInfo}\n     */\n    static _fromProtobuf(infoResponse) {\n        const info = /** @type {proto.IConsensusTopicInfo} */ (\n            infoResponse.topicInfo\n        );\n\n        return new TopicInfo({\n            topicId: TopicId._fromProtobuf(\n                /** @type {proto.ITopicID} */ (infoResponse.topicID)\n            ),\n            topicMemo: info.memo != null ? info.memo : \"\",\n            runningHash:\n                info.runningHash != null ? info.runningHash : new Uint8Array(),\n            sequenceNumber:\n                info.sequenceNumber != null\n                    ? info.sequenceNumber instanceof Long\n                        ? info.sequenceNumber\n                        : Long.fromValue(info.sequenceNumber)\n                    : Long.ZERO,\n            expirationTime:\n                info.expirationTime != null\n                    ? Timestamp._fromProtobuf(info.expirationTime)\n                    : null,\n            adminKey:\n                info.adminKey != null\n                    ? Key._fromProtobufKey(info.adminKey)\n                    : null,\n            submitKey:\n                info.submitKey != null\n                    ? Key._fromProtobufKey(info.submitKey)\n                    : null,\n            autoRenewPeriod:\n                info.autoRenewPeriod != null\n                    ? new Duration(\n                          /** @type {Long} */ (info.autoRenewPeriod.seconds)\n                      )\n                    : null,\n            autoRenewAccountId:\n                info.autoRenewAccount != null\n                    ? AccountId._fromProtobuf(info.autoRenewAccount)\n                    : null,\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IConsensusGetTopicInfoResponse}\n     */\n    _toProtobuf() {\n        return {\n            topicID: this.topicId._toProtobuf(),\n            topicInfo: {\n                memo: this.topicMemo,\n                runningHash: this.runningHash,\n                sequenceNumber: this.sequenceNumber,\n                expirationTime:\n                    this.expirationTime != null\n                        ? this.expirationTime._toProtobuf()\n                        : null,\n                adminKey:\n                    this.adminKey != null\n                        ? this.adminKey._toProtobufKey()\n                        : null,\n                submitKey:\n                    this.submitKey != null\n                        ? this.submitKey._toProtobufKey()\n                        : null,\n                autoRenewPeriod:\n                    this.autoRenewPeriod != null\n                        ? this.autoRenewPeriod._toProtobuf()\n                        : null,\n                autoRenewAccount:\n                    this.autoRenewAccountId != null\n                        ? this.autoRenewAccountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TopicInfo}\n     */\n    static fromBytes(bytes) {\n        return TopicInfo._fromProtobuf({\n            topicInfo: proto.ConsensusTopicInfo.decode(bytes),\n        });\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.ConsensusTopicInfo.encode(\n            /** @type {proto.IConsensusTopicInfo} */ (\n                this._toProtobuf().topicInfo\n            )\n        ).finish();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}