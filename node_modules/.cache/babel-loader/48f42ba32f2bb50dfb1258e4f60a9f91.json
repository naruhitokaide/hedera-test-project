{"ast":null,"code":"import LedgerId from \"../LedgerId.js\"; // import {\n//     PREVIEWNET_ADDRESS_BOOK,\n//     TESTNET_ADDRESS_BOOK,\n//     MAINNET_ADDRESS_BOOK,\n// } from \"../address_book/AddressBooks.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"../Node.js\").default} Node\n * @typedef {import(\"../MirrorNode.js\").default} MirrorNode\n * @typedef {import(\"../address_book/NodeAddressBook.js\").default} NodeAddressBook\n */\n\n/**\n * @template {Channel | MirrorChannel} ChannelT\n * @typedef {import(\"../ManagedNode.js\").default<ChannelT>} ManagedNode\n */\n\n/**\n * @template {Channel | MirrorChannel} ChannelT\n * @template {ManagedNode<ChannelT>} NetworkNodeT\n * @template {{ toString: () => string }} KeyT\n */\n\nexport default class MangedNetwork {\n  /**\n   * @param {(address: string) => ChannelT} createNetworkChannel\n   */\n  constructor(createNetworkChannel) {\n    /**\n     * Map of node account ID (as a string)\n     * to the node URL.\n     *\n     * @internal\n     * @type {Map<string, NetworkNodeT[]>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this._network = new Map();\n    /**\n     * List of node account IDs.\n     *\n     * @protected\n     * @type {NetworkNodeT[]}\n     */\n\n    this._nodes = [];\n    /** @type {(address: string, cert?: string) => ChannelT} */\n\n    this._createNetworkChannel = createNetworkChannel;\n    /** @type {LedgerId | null} */\n\n    this._ledgerId = null;\n    /** @type {number} */\n\n    this._minBackoff = 250;\n    /** @type {number} */\n\n    this._maxNodeAttempts = -1;\n    this._transportSecurity = false;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  isTransportSecurity() {\n    return this._transportSecurity;\n  }\n  /**\n   * @param {boolean} transportSecurity\n   * @returns {this}\n   */\n\n\n  setTransportSecurity(transportSecurity) {\n    if (this._transportSecurity != transportSecurity) {\n      this._network.clear();\n\n      for (let i = 0; i < this._nodes.length; i++) {\n        let node = this._nodes[i];\n        node.close();\n        node =\n        /** @type {NetworkNodeT} */\n        transportSecurity ? node.toSecure().setCert(this._ledgerId != null ? this._ledgerId._toStringForChecksum() : \"\") : node.toInsecure();\n        this._nodes[i] = node;\n        const nodes = this._network.get(node.getKey()) != null ?\n        /** @type {NetworkNodeT[]} */\n        this._network.get(node.getKey()) : [];\n        nodes.push(node);\n\n        this._network.set(node.getKey(), nodes);\n      }\n    }\n\n    this._transportSecurity = transportSecurity;\n    return this;\n  }\n  /**\n   * @deprecated\n   * @param {string} networkName\n   * @returns {this}\n   */\n\n\n  setNetworkName(networkName) {\n    console.warn(\"Deprecated: Use `setLedgerId` instead\");\n    return this.setLedgerId(networkName);\n  }\n  /**\n   * @deprecated\n   * @returns {string | null}\n   */\n\n\n  get networkName() {\n    console.warn(\"Deprecated: Use `ledgerId` instead\");\n    return this.ledgerId != null ? this.ledgerId.toString() : null;\n  }\n  /**\n   * @param {string|LedgerId} ledgerId\n   * @returns {this}\n   */\n\n\n  setLedgerId(ledgerId) {\n    this._ledgerId = typeof ledgerId === \"string\" ? LedgerId.fromString(ledgerId) : ledgerId;\n    return this;\n  }\n  /**\n   * @returns {LedgerId | null}\n   */\n\n\n  get ledgerId() {\n    return this._ledgerId != null ? this._ledgerId : null;\n  }\n  /**\n   * @abstract\n   * @param {[string, KeyT]} entry\n   * @returns {NetworkNodeT}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _createNodeFromNetworkEntry(entry) {\n    throw new Error(\"not implemented\");\n  }\n  /**\n   * @abstract\n   * @param {Map<string, KeyT>} network\n   * @returns {number[]}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _getNodesToRemove(network) {\n    throw new Error(\"not implemented\");\n  }\n\n  _removeDeadNodes() {\n    if (this._maxNodeAttempts > 0) {\n      for (let i = this._nodes.length - 1; i >= 0; i--) {\n        const node = this._nodes[i];\n\n        if (node._attempts < this._maxNodeAttempts) {\n          continue;\n        }\n\n        this._closeNode(i);\n      }\n    }\n  }\n  /**\n   * @param {number} count\n   * @returns {NetworkNodeT[]}\n   */\n\n\n  _getNumberOfMostHealthyNodes(count) {\n    this._removeDeadNodes();\n\n    this._nodes.sort((a, b) => a.compare(b));\n\n    for (const [, value] of this._network) {\n      // eslint-disable-next-line ie11/no-loop-func\n      value.sort((a, b) => a.compare(b));\n    }\n    /** @type {NetworkNodeT[]} */\n\n\n    const nodes = [];\n    const keys = new Set();\n\n    for (const node of this._nodes) {\n      if (keys.size >= count) {\n        break;\n      }\n\n      if (!keys.has(node.getKey())) {\n        nodes.push(node);\n      }\n    }\n\n    return nodes;\n  }\n  /**\n   * @param {number} i\n   */\n\n\n  _closeNode(i) {\n    const node = this._nodes[i];\n    node.close();\n\n    this._removeNodeFromNetwork(node);\n\n    this._nodes.splice(i, 1);\n  }\n  /**\n   * @param {NetworkNodeT} node\n   */\n\n\n  _removeNodeFromNetwork(node) {\n    const network =\n    /** @type {NetworkNodeT[]} */\n    this._network.get(node.getKey());\n\n    for (let j = 0; j < network.length; j++) {\n      if (network[j] === node) {\n        network.splice(j, 1);\n        break;\n      }\n    }\n\n    if (network.length === 0) {\n      this._network.delete(node.getKey());\n    }\n  }\n  /**\n   * @param {Map<string, KeyT>} network\n   * @returns {this}\n   */\n\n\n  _setNetwork(network) {\n    // Remove nodes that are not in the new network\n    for (const i of this._getNodesToRemove(network)) {\n      this._closeNode(i);\n    } // Add new nodes\n\n\n    for (const [key, value] of network) {\n      const node = this._createNodeFromNetworkEntry([key, value]);\n\n      this._nodes.push(node);\n\n      const network = this._network.has(node.getKey()) ?\n      /** @type {NetworkNodeT[]} */\n      this._network.get(node.getKey()) : [];\n      network.push(node);\n\n      this._network.set(node.getKey(), network);\n    }\n\n    shuffle(this._nodes);\n\n    for (const [, value] of this._network) {\n      shuffle(value);\n    }\n\n    this._ledgerId = null;\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get maxNodeAttempts() {\n    return this._maxNodeAttempts;\n  }\n  /**\n   * @param {number} maxNodeAttempts\n   * @returns {this}\n   */\n\n\n  setMaxNodeAttempts(maxNodeAttempts) {\n    this._maxNodeAttempts = maxNodeAttempts;\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get minBackoff() {\n    return this._minBackoff;\n  }\n  /**\n   * @param {number} minBackoff\n   * @returns {this}\n   */\n\n\n  setMinBackoff(minBackoff) {\n    this._minBackoff = minBackoff;\n\n    for (const node of this._nodes) {\n      node.setMinBackoff(minBackoff);\n    }\n\n    return this;\n  }\n  /**\n   * @param {KeyT} key\n   * @returns {NetworkNodeT}\n   */\n\n\n  getNode(key) {\n    return (\n      /** @type {NetworkNodeT[]} */\n      this._network.get(key.toString())[0]\n    );\n  }\n\n  close() {\n    for (const node of this._nodes) {\n      node.close();\n    }\n\n    this._network.clear();\n\n    this._nodes = [];\n  }\n\n}\n/**\n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n *\n * @template T\n * @param {Array<T>} array\n */\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/client/ManagedNetwork.js"],"names":["LedgerId","MangedNetwork","constructor","createNetworkChannel","_network","Map","_nodes","_createNetworkChannel","_ledgerId","_minBackoff","_maxNodeAttempts","_transportSecurity","isTransportSecurity","setTransportSecurity","transportSecurity","clear","i","length","node","close","toSecure","setCert","_toStringForChecksum","toInsecure","nodes","get","getKey","push","set","setNetworkName","networkName","console","warn","setLedgerId","ledgerId","toString","fromString","_createNodeFromNetworkEntry","entry","Error","_getNodesToRemove","network","_removeDeadNodes","_attempts","_closeNode","_getNumberOfMostHealthyNodes","count","sort","a","b","compare","value","keys","Set","size","has","_removeNodeFromNetwork","splice","j","delete","_setNetwork","key","shuffle","maxNodeAttempts","setMaxNodeAttempts","minBackoff","setMinBackoff","getNode","array","currentIndex","temporaryValue","randomIndex","Math","floor","random"],"mappings":"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","sourcesContent":["import LedgerId from \"../LedgerId.js\";\n// import {\n//     PREVIEWNET_ADDRESS_BOOK,\n//     TESTNET_ADDRESS_BOOK,\n//     MAINNET_ADDRESS_BOOK,\n// } from \"../address_book/AddressBooks.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"../Node.js\").default} Node\n * @typedef {import(\"../MirrorNode.js\").default} MirrorNode\n * @typedef {import(\"../address_book/NodeAddressBook.js\").default} NodeAddressBook\n */\n\n/**\n * @template {Channel | MirrorChannel} ChannelT\n * @typedef {import(\"../ManagedNode.js\").default<ChannelT>} ManagedNode\n */\n\n/**\n * @template {Channel | MirrorChannel} ChannelT\n * @template {ManagedNode<ChannelT>} NetworkNodeT\n * @template {{ toString: () => string }} KeyT\n */\nexport default class MangedNetwork {\n    /**\n     * @param {(address: string) => ChannelT} createNetworkChannel\n     */\n    constructor(createNetworkChannel) {\n        /**\n         * Map of node account ID (as a string)\n         * to the node URL.\n         *\n         * @internal\n         * @type {Map<string, NetworkNodeT[]>}\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this._network = new Map();\n\n        /**\n         * List of node account IDs.\n         *\n         * @protected\n         * @type {NetworkNodeT[]}\n         */\n        this._nodes = [];\n\n        /** @type {(address: string, cert?: string) => ChannelT} */\n        this._createNetworkChannel = createNetworkChannel;\n\n        /** @type {LedgerId | null} */\n        this._ledgerId = null;\n\n        /** @type {number} */\n        this._minBackoff = 250;\n\n        /** @type {number} */\n        this._maxNodeAttempts = -1;\n\n        this._transportSecurity = false;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isTransportSecurity() {\n        return this._transportSecurity;\n    }\n\n    /**\n     * @param {boolean} transportSecurity\n     * @returns {this}\n     */\n    setTransportSecurity(transportSecurity) {\n        if (this._transportSecurity != transportSecurity) {\n            this._network.clear();\n\n            for (let i = 0; i < this._nodes.length; i++) {\n                let node = this._nodes[i];\n                node.close();\n\n                node = /** @type {NetworkNodeT} */ (\n                    transportSecurity\n                        ? node\n                              .toSecure()\n                              .setCert(\n                                  this._ledgerId != null\n                                      ? this._ledgerId._toStringForChecksum()\n                                      : \"\"\n                              )\n                        : node.toInsecure()\n                );\n                this._nodes[i] = node;\n\n                const nodes =\n                    this._network.get(node.getKey()) != null\n                        ? /** @type {NetworkNodeT[]} */ (\n                              this._network.get(node.getKey())\n                          )\n                        : [];\n                nodes.push(node);\n                this._network.set(node.getKey(), nodes);\n            }\n        }\n\n        this._transportSecurity = transportSecurity;\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {string} networkName\n     * @returns {this}\n     */\n    setNetworkName(networkName) {\n        console.warn(\"Deprecated: Use `setLedgerId` instead\");\n        return this.setLedgerId(networkName);\n    }\n\n    /**\n     * @deprecated\n     * @returns {string | null}\n     */\n    get networkName() {\n        console.warn(\"Deprecated: Use `ledgerId` instead\");\n        return this.ledgerId != null ? this.ledgerId.toString() : null;\n    }\n\n    /**\n     * @param {string|LedgerId} ledgerId\n     * @returns {this}\n     */\n    setLedgerId(ledgerId) {\n        this._ledgerId =\n            typeof ledgerId === \"string\"\n                ? LedgerId.fromString(ledgerId)\n                : ledgerId;\n        return this;\n    }\n\n    /**\n     * @returns {LedgerId | null}\n     */\n    get ledgerId() {\n        return this._ledgerId != null ? this._ledgerId : null;\n    }\n\n    /**\n     * @abstract\n     * @param {[string, KeyT]} entry\n     * @returns {NetworkNodeT}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _createNodeFromNetworkEntry(entry) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @param {Map<string, KeyT>} network\n     * @returns {number[]}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _getNodesToRemove(network) {\n        throw new Error(\"not implemented\");\n    }\n\n    _removeDeadNodes() {\n        if (this._maxNodeAttempts > 0) {\n            for (let i = this._nodes.length - 1; i >= 0; i--) {\n                const node = this._nodes[i];\n\n                if (node._attempts < this._maxNodeAttempts) {\n                    continue;\n                }\n\n                this._closeNode(i);\n            }\n        }\n    }\n\n    /**\n     * @param {number} count\n     * @returns {NetworkNodeT[]}\n     */\n    _getNumberOfMostHealthyNodes(count) {\n        this._removeDeadNodes();\n        this._nodes.sort((a, b) => a.compare(b));\n\n        for (const [, value] of this._network) {\n            // eslint-disable-next-line ie11/no-loop-func\n            value.sort((a, b) => a.compare(b));\n        }\n\n        /** @type {NetworkNodeT[]} */\n        const nodes = [];\n        const keys = new Set();\n\n        for (const node of this._nodes) {\n            if (keys.size >= count) {\n                break;\n            }\n\n            if (!keys.has(node.getKey())) {\n                nodes.push(node);\n            }\n        }\n\n        return nodes;\n    }\n\n    /**\n     * @param {number} i\n     */\n    _closeNode(i) {\n        const node = this._nodes[i];\n\n        node.close();\n        this._removeNodeFromNetwork(node);\n        this._nodes.splice(i, 1);\n    }\n\n    /**\n     * @param {NetworkNodeT} node\n     */\n    _removeNodeFromNetwork(node) {\n        const network = /** @type {NetworkNodeT[]} */ (\n            this._network.get(node.getKey())\n        );\n\n        for (let j = 0; j < network.length; j++) {\n            if (network[j] === node) {\n                network.splice(j, 1);\n                break;\n            }\n        }\n\n        if (network.length === 0) {\n            this._network.delete(node.getKey());\n        }\n    }\n\n    /**\n     * @param {Map<string, KeyT>} network\n     * @returns {this}\n     */\n    _setNetwork(network) {\n        // Remove nodes that are not in the new network\n        for (const i of this._getNodesToRemove(network)) {\n            this._closeNode(i);\n        }\n\n        // Add new nodes\n        for (const [key, value] of network) {\n            const node = this._createNodeFromNetworkEntry([key, value]);\n\n            this._nodes.push(node);\n\n            const network = this._network.has(node.getKey())\n                ? /** @type {NetworkNodeT[]} */ (\n                      this._network.get(node.getKey())\n                  )\n                : [];\n            network.push(node);\n            this._network.set(node.getKey(), network);\n        }\n\n        shuffle(this._nodes);\n        for (const [, value] of this._network) {\n            shuffle(value);\n        }\n\n        this._ledgerId = null;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxNodeAttempts() {\n        return this._maxNodeAttempts;\n    }\n\n    /**\n     * @param {number} maxNodeAttempts\n     * @returns {this}\n     */\n    setMaxNodeAttempts(maxNodeAttempts) {\n        this._maxNodeAttempts = maxNodeAttempts;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get minBackoff() {\n        return this._minBackoff;\n    }\n\n    /**\n     * @param {number} minBackoff\n     * @returns {this}\n     */\n    setMinBackoff(minBackoff) {\n        this._minBackoff = minBackoff;\n        for (const node of this._nodes) {\n            node.setMinBackoff(minBackoff);\n        }\n        return this;\n    }\n\n    /**\n     * @param {KeyT} key\n     * @returns {NetworkNodeT}\n     */\n    getNode(key) {\n        return /** @type {NetworkNodeT[]} */ (\n            this._network.get(key.toString())\n        )[0];\n    }\n\n    close() {\n        for (const node of this._nodes) {\n            node.close();\n        }\n\n        this._network.clear();\n        this._nodes = [];\n    }\n}\n\n/**\n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n *\n * @template T\n * @param {Array<T>} array\n */\nfunction shuffle(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}