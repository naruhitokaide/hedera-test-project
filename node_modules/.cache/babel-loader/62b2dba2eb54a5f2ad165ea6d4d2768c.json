{"ast":null,"code":"import * as proto from \"@hashgraph/proto\";\nimport TokenId from \"../token/TokenId.js\";\nimport Long from \"long\";\n/**\n * The ID for a crypto-currency token on Hedera.\n *\n * @augments {EntityId<proto.INftID>}\n */\n\nexport default class NftId {\n  /**\n   * @param {TokenId} token\n   * @param {number | Long} serial\n   */\n  constructor(token, serial) {\n    this.tokenId = token;\n    this.serial = typeof serial === \"number\" ? Long.fromNumber(serial) : serial;\n    Object.freeze(this);\n  }\n  /**\n   * @param {string} text\n   * @returns {NftId}\n   */\n\n\n  static fromString(text) {\n    const strings = text.split(\"/\").length > 1 ? text.split(\"/\") : text.split(\"@\");\n\n    for (const string of strings) {\n      if (string === \"\") {\n        throw new Error(\"invalid format for NftId: use [token]/[serial] or [token]@[serial]\");\n      }\n    }\n\n    const token = TokenId.fromString(strings[0]);\n    const serial = Long.fromString(strings[1]);\n    return new NftId(token, serial);\n  }\n  /**\n   * @internal\n   * @param {proto.INftID} id\n   * @returns {NftId}\n   */\n\n\n  static _fromProtobuf(id) {\n    return new NftId(TokenId._fromProtobuf(\n    /** @type {proto.ITokenID} */\n    id.tokenID), id.serialNumber != null ? id.serialNumber : Long.ZERO);\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {NftId}\n   */\n\n\n  static fromBytes(bytes) {\n    return NftId._fromProtobuf(proto.NftID.decode(bytes));\n  }\n  /**\n   * @internal\n   * @returns {proto.INftID}\n   */\n\n\n  _toProtobuf() {\n    return {\n      tokenID: this.tokenId._toProtobuf(),\n      serialNumber: Long.fromValue(this.serial !== undefined ? this.serial : 0)\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return `${this.serial.toString()}@${this.tokenId.toString()}`;\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return proto.NftID.encode(this._toProtobuf()).finish();\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/token/NftId.js"],"names":["proto","TokenId","Long","NftId","constructor","token","serial","tokenId","fromNumber","Object","freeze","fromString","text","strings","split","length","string","Error","_fromProtobuf","id","tokenID","serialNumber","ZERO","fromBytes","bytes","NftID","decode","_toProtobuf","fromValue","undefined","toString","toBytes","encode","finish"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,kBAAvB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,KAAN,CAAY;AACvB;AACJ;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvB,SAAKC,OAAL,GAAeF,KAAf;AACA,SAAKC,MAAL,GACI,OAAOA,MAAP,KAAkB,QAAlB,GAA6BJ,IAAI,CAACM,UAAL,CAAgBF,MAAhB,CAA7B,GAAuDA,MAD3D;AAGAG,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;;;AACqB,SAAVC,UAAU,CAACC,IAAD,EAAO;AACpB,UAAMC,OAAO,GACTD,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgBC,MAAhB,GAAyB,CAAzB,GAA6BH,IAAI,CAACE,KAAL,CAAW,GAAX,CAA7B,GAA+CF,IAAI,CAACE,KAAL,CAAW,GAAX,CADnD;;AAGA,SAAK,MAAME,MAAX,IAAqBH,OAArB,EAA8B;AAC1B,UAAIG,MAAM,KAAK,EAAf,EAAmB;AACf,cAAM,IAAIC,KAAJ,CACF,oEADE,CAAN;AAGH;AACJ;;AAED,UAAMZ,KAAK,GAAGJ,OAAO,CAACU,UAAR,CAAmBE,OAAO,CAAC,CAAD,CAA1B,CAAd;AACA,UAAMP,MAAM,GAAGJ,IAAI,CAACS,UAAL,CAAgBE,OAAO,CAAC,CAAD,CAAvB,CAAf;AAEA,WAAO,IAAIV,KAAJ,CAAUE,KAAV,EAAiBC,MAAjB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbY,aAAa,CAACC,EAAD,EAAK;AACrB,WAAO,IAAIhB,KAAJ,CACHF,OAAO,CAACiB,aAAR;AAAsB;AAA+BC,IAAAA,EAAE,CAACC,OAAxD,CADG,EAEHD,EAAE,CAACE,YAAH,IAAmB,IAAnB,GAA0BF,EAAE,CAACE,YAA7B,GAA4CnB,IAAI,CAACoB,IAF9C,CAAP;AAIH;AAED;AACJ;AACA;AACA;;;AACoB,SAATC,SAAS,CAACC,KAAD,EAAQ;AACpB,WAAOrB,KAAK,CAACe,aAAN,CAAoBlB,KAAK,CAACyB,KAAN,CAAYC,MAAZ,CAAmBF,KAAnB,CAApB,CAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIG,EAAAA,WAAW,GAAG;AACV,WAAO;AACHP,MAAAA,OAAO,EAAE,KAAKb,OAAL,CAAaoB,WAAb,EADN;AAEHN,MAAAA,YAAY,EAAEnB,IAAI,CAAC0B,SAAL,CACV,KAAKtB,MAAL,KAAgBuB,SAAhB,GAA4B,KAAKvB,MAAjC,GAA0C,CADhC;AAFX,KAAP;AAMH;AAED;AACJ;AACA;;;AACIwB,EAAAA,QAAQ,GAAG;AACP,WAAQ,GAAE,KAAKxB,MAAL,CAAYwB,QAAZ,EAAuB,IAAG,KAAKvB,OAAL,CAAauB,QAAb,EAAwB,EAA5D;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,OAAO,GAAG;AACN,WAAO/B,KAAK,CAACyB,KAAN,CAAYO,MAAZ,CAAmB,KAAKL,WAAL,EAAnB,EAAuCM,MAAvC,EAAP;AACH;;AAhFsB","sourcesContent":["import * as proto from \"@hashgraph/proto\";\nimport TokenId from \"../token/TokenId.js\";\nimport Long from \"long\";\n\n/**\n * The ID for a crypto-currency token on Hedera.\n *\n * @augments {EntityId<proto.INftID>}\n */\nexport default class NftId {\n    /**\n     * @param {TokenId} token\n     * @param {number | Long} serial\n     */\n    constructor(token, serial) {\n        this.tokenId = token;\n        this.serial =\n            typeof serial === \"number\" ? Long.fromNumber(serial) : serial;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {string} text\n     * @returns {NftId}\n     */\n    static fromString(text) {\n        const strings =\n            text.split(\"/\").length > 1 ? text.split(\"/\") : text.split(\"@\");\n\n        for (const string of strings) {\n            if (string === \"\") {\n                throw new Error(\n                    \"invalid format for NftId: use [token]/[serial] or [token]@[serial]\"\n                );\n            }\n        }\n\n        const token = TokenId.fromString(strings[0]);\n        const serial = Long.fromString(strings[1]);\n\n        return new NftId(token, serial);\n    }\n\n    /**\n     * @internal\n     * @param {proto.INftID} id\n     * @returns {NftId}\n     */\n    static _fromProtobuf(id) {\n        return new NftId(\n            TokenId._fromProtobuf(/** @type {proto.ITokenID} */ (id.tokenID)),\n            id.serialNumber != null ? id.serialNumber : Long.ZERO\n        );\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NftId}\n     */\n    static fromBytes(bytes) {\n        return NftId._fromProtobuf(proto.NftID.decode(bytes));\n    }\n\n    /**\n     * @internal\n     * @returns {proto.INftID}\n     */\n    _toProtobuf() {\n        return {\n            tokenID: this.tokenId._toProtobuf(),\n            serialNumber: Long.fromValue(\n                this.serial !== undefined ? this.serial : 0\n            ),\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this.serial.toString()}@${this.tokenId.toString()}`;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.NftID.encode(this._toProtobuf()).finish();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}