{"ast":null,"code":"\"use strict\";\n\nmodule.exports = factory(factory);\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n// Factory function for the purpose of node-based testing in modified global environments\n\nfunction factory(exports) {\n  // float: typed array\n  if (typeof Float32Array !== \"undefined\") (function () {\n    var f32 = new Float32Array([-0]),\n        f8b = new Uint8Array(f32.buffer),\n        le = f8b[3] === 128;\n\n    function writeFloat_f32_cpy(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n    }\n\n    function writeFloat_f32_rev(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[3];\n      buf[pos + 1] = f8b[2];\n      buf[pos + 2] = f8b[1];\n      buf[pos + 3] = f8b[0];\n    }\n    /* istanbul ignore next */\n\n\n    exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\n    /* istanbul ignore next */\n\n    exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\n\n    function readFloat_f32_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      return f32[0];\n    }\n\n    function readFloat_f32_rev(buf, pos) {\n      f8b[3] = buf[pos];\n      f8b[2] = buf[pos + 1];\n      f8b[1] = buf[pos + 2];\n      f8b[0] = buf[pos + 3];\n      return f32[0];\n    }\n    /* istanbul ignore next */\n\n\n    exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\n    /* istanbul ignore next */\n\n    exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy; // float: ieee754\n  })();else (function () {\n    function writeFloat_ieee754(writeUint, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) writeUint(1 / val > 0 ?\n      /* positive */\n      0 :\n      /* negative 0 */\n      2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38) // +-Infinity\n        writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38) // denormal\n        writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {\n        var exponent = Math.floor(Math.log(val) / Math.LN2),\n            mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\n        writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\n      }\n    }\n\n    exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\n    exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\n\n    function readFloat_ieee754(readUint, buf, pos) {\n      var uint = readUint(buf, pos),\n          sign = (uint >> 31) * 2 + 1,\n          exponent = uint >>> 23 & 255,\n          mantissa = uint & 8388607;\n      return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\n    }\n\n    exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\n    exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\n  })(); // double: typed array\n\n  if (typeof Float64Array !== \"undefined\") (function () {\n    var f64 = new Float64Array([-0]),\n        f8b = new Uint8Array(f64.buffer),\n        le = f8b[7] === 128;\n\n    function writeDouble_f64_cpy(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n      buf[pos + 4] = f8b[4];\n      buf[pos + 5] = f8b[5];\n      buf[pos + 6] = f8b[6];\n      buf[pos + 7] = f8b[7];\n    }\n\n    function writeDouble_f64_rev(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[7];\n      buf[pos + 1] = f8b[6];\n      buf[pos + 2] = f8b[5];\n      buf[pos + 3] = f8b[4];\n      buf[pos + 4] = f8b[3];\n      buf[pos + 5] = f8b[2];\n      buf[pos + 6] = f8b[1];\n      buf[pos + 7] = f8b[0];\n    }\n    /* istanbul ignore next */\n\n\n    exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\n    /* istanbul ignore next */\n\n    exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\n\n    function readDouble_f64_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      f8b[4] = buf[pos + 4];\n      f8b[5] = buf[pos + 5];\n      f8b[6] = buf[pos + 6];\n      f8b[7] = buf[pos + 7];\n      return f64[0];\n    }\n\n    function readDouble_f64_rev(buf, pos) {\n      f8b[7] = buf[pos];\n      f8b[6] = buf[pos + 1];\n      f8b[5] = buf[pos + 2];\n      f8b[4] = buf[pos + 3];\n      f8b[3] = buf[pos + 4];\n      f8b[2] = buf[pos + 5];\n      f8b[1] = buf[pos + 6];\n      f8b[0] = buf[pos + 7];\n      return f64[0];\n    }\n    /* istanbul ignore next */\n\n\n    exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\n    /* istanbul ignore next */\n\n    exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy; // double: ieee754\n  })();else (function () {\n    function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n\n      if (val === 0) {\n        writeUint(0, buf, pos + off0);\n        writeUint(1 / val > 0 ?\n        /* positive */\n        0 :\n        /* negative 0 */\n        2147483648, buf, pos + off1);\n      } else if (isNaN(val)) {\n        writeUint(0, buf, pos + off0);\n        writeUint(2146959360, buf, pos + off1);\n      } else if (val > 1.7976931348623157e+308) {\n        // +-Infinity\n        writeUint(0, buf, pos + off0);\n        writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\n      } else {\n        var mantissa;\n\n        if (val < 2.2250738585072014e-308) {\n          // denormal\n          mantissa = val / 5e-324;\n          writeUint(mantissa >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\n        } else {\n          var exponent = Math.floor(Math.log(val) / Math.LN2);\n          if (exponent === 1024) exponent = 1023;\n          mantissa = val * Math.pow(2, -exponent);\n          writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\n        }\n      }\n    }\n\n    exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\n    exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\n\n    function readDouble_ieee754(readUint, off0, off1, buf, pos) {\n      var lo = readUint(buf, pos + off0),\n          hi = readUint(buf, pos + off1);\n      var sign = (hi >> 31) * 2 + 1,\n          exponent = hi >>> 20 & 2047,\n          mantissa = 4294967296 * (hi & 1048575) + lo;\n      return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\n    }\n\n    exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\n    exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\n  })();\n  return exports;\n} // uint helpers\n\n\nfunction writeUintLE(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\n\nfunction writeUintBE(val, buf, pos) {\n  buf[pos] = val >>> 24;\n  buf[pos + 1] = val >>> 16 & 255;\n  buf[pos + 2] = val >>> 8 & 255;\n  buf[pos + 3] = val & 255;\n}\n\nfunction readUintLE(buf, pos) {\n  return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;\n}\n\nfunction readUintBE(buf, pos) {\n  return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@protobufjs/float/index.js"],"names":["module","exports","factory","Float32Array","f32","f8b","Uint8Array","buffer","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","writeFloatLE","writeFloatBE","readFloat_f32_cpy","readFloat_f32_rev","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","Math","round","exponent","floor","log","LN2","mantissa","pow","bind","writeUintLE","writeUintBE","readFloat_ieee754","readUint","uint","NaN","Infinity","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDouble_f64_cpy","readDouble_f64_rev","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}