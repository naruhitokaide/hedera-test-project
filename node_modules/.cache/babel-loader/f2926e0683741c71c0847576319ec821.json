{"ast":null,"code":"import FileId from \"./FileId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport * as proto from \"@hashgraph/proto\";\nimport KeyList from \"../KeyList.js\";\nimport LedgerId from \"../LedgerId.js\";\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\n\nexport default class FileInfo {\n  /**\n   * @private\n   * @param {object} props\n   * @param {FileId} props.fileId\n   * @param {Long} props.size\n   * @param {Timestamp} props.expirationTime\n   * @param {boolean} props.isDeleted\n   * @param {KeyList} props.keys\n   * @param {string} props.fileMemo\n   * @param {LedgerId|null} props.ledgerId\n   */\n  constructor(props) {\n    /**\n     * The ID of the file for which information is requested.\n     *\n     * @readonly\n     */\n    this.fileId = props.fileId;\n    /**\n     * Number of bytes in contents.\n     *\n     * @readonly\n     */\n\n    this.size = props.size;\n    /**\n     * The current time at which this account is set to expire.\n     *\n     * @readonly\n     */\n\n    this.expirationTime = props.expirationTime;\n    /**\n     * True if deleted but not yet expired.\n     *\n     * @readonly\n     */\n\n    this.isDeleted = props.isDeleted;\n    /**\n     * One of these keys must sign in order to delete the file.\n     * All of these keys must sign in order to update the file.\n     *\n     * @readonly\n     */\n\n    this.keys = props.keys;\n    this.fileMemo = props.fileMemo;\n    this.ledgerId = props.ledgerId;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {proto.IFileInfo} info\n   * @returns {FileInfo}\n   */\n\n\n  static _fromProtobuf(info) {\n    const size =\n    /** @type {Long | number} */\n    info.size;\n    return new FileInfo({\n      fileId: FileId._fromProtobuf(\n      /** @type {proto.IFileID} */\n      info.fileID),\n      size: size instanceof Long ? size : Long.fromValue(size),\n      expirationTime: Timestamp._fromProtobuf(\n      /** @type {proto.ITimestamp} */\n      info.expirationTime),\n      isDeleted:\n      /** @type {boolean} */\n      info.deleted,\n      keys: info.keys != null ? KeyList.__fromProtobufKeyList(info.keys) : new KeyList(),\n      fileMemo: info.memo != null ? info.memo : \"\",\n      ledgerId: info.ledgerId != null ? LedgerId.fromBytes(info.ledgerId) : null\n    });\n  }\n  /**\n   * @internal\n   * @returns {proto.IFileInfo}\n   */\n\n\n  _toProtobuf() {\n    return {\n      fileID: this.fileId._toProtobuf(),\n      size: this.size,\n      expirationTime: this.expirationTime._toProtobuf(),\n      deleted: this.isDeleted,\n      keys: this.keys._toProtobufKey().keyList,\n      memo: this.fileMemo,\n      ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null\n    };\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {FileInfo}\n   */\n\n\n  static fromBytes(bytes) {\n    return FileInfo._fromProtobuf(proto.FileGetInfoResponse.FileInfo.decode(bytes));\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return proto.FileGetInfoResponse.FileInfo.encode(this._toProtobuf()).finish();\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/file/FileInfo.js"],"names":["FileId","Timestamp","Long","proto","KeyList","LedgerId","FileInfo","constructor","props","fileId","size","expirationTime","isDeleted","keys","fileMemo","ledgerId","Object","freeze","_fromProtobuf","info","fileID","fromValue","deleted","__fromProtobufKeyList","memo","fromBytes","_toProtobuf","_toProtobufKey","keyList","toBytes","bytes","FileGetInfoResponse","decode","encode","finish"],"mappings":"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","sourcesContent":["import FileId from \"./FileId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport * as proto from \"@hashgraph/proto\";\nimport KeyList from \"../KeyList.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\nexport default class FileInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {FileId} props.fileId\n     * @param {Long} props.size\n     * @param {Timestamp} props.expirationTime\n     * @param {boolean} props.isDeleted\n     * @param {KeyList} props.keys\n     * @param {string} props.fileMemo\n     * @param {LedgerId|null} props.ledgerId\n     */\n    constructor(props) {\n        /**\n         * The ID of the file for which information is requested.\n         *\n         * @readonly\n         */\n        this.fileId = props.fileId;\n\n        /**\n         * Number of bytes in contents.\n         *\n         * @readonly\n         */\n        this.size = props.size;\n\n        /**\n         * The current time at which this account is set to expire.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * True if deleted but not yet expired.\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * One of these keys must sign in order to delete the file.\n         * All of these keys must sign in order to update the file.\n         *\n         * @readonly\n         */\n        this.keys = props.keys;\n\n        this.fileMemo = props.fileMemo;\n\n        this.ledgerId = props.ledgerId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IFileInfo} info\n     * @returns {FileInfo}\n     */\n    static _fromProtobuf(info) {\n        const size = /** @type {Long | number} */ (info.size);\n\n        return new FileInfo({\n            fileId: FileId._fromProtobuf(\n                /** @type {proto.IFileID} */ (info.fileID)\n            ),\n            size: size instanceof Long ? size : Long.fromValue(size),\n            expirationTime: Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */ (info.expirationTime)\n            ),\n            isDeleted: /** @type {boolean} */ (info.deleted),\n            keys:\n                info.keys != null\n                    ? KeyList.__fromProtobufKeyList(info.keys)\n                    : new KeyList(),\n            fileMemo: info.memo != null ? info.memo : \"\",\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IFileInfo}\n     */\n    _toProtobuf() {\n        return {\n            fileID: this.fileId._toProtobuf(),\n            size: this.size,\n            expirationTime: this.expirationTime._toProtobuf(),\n            deleted: this.isDeleted,\n            keys: this.keys._toProtobufKey().keyList,\n            memo: this.fileMemo,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {FileInfo}\n     */\n    static fromBytes(bytes) {\n        return FileInfo._fromProtobuf(\n            proto.FileGetInfoResponse.FileInfo.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.FileGetInfoResponse.FileInfo.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}