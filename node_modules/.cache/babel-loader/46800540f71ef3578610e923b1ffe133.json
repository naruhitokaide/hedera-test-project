{"ast":null,"code":"import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport ContractId from \"./ContractId.js\";\nimport ContractInfo from \"./ContractInfo.js\";\nimport Hbar from \"../Hbar.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IContractGetInfoQuery} proto.IContractGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").IContractGetInfoResponse} proto.IContractGetInfoResponse\n * @typedef {import(\"@hashgraph/proto\").IContractInfo} proto.IContractInfo\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<ContractInfo>}\n */\n\nexport default class ContractInfoQuery extends Query {\n  /**\n   * @param {object} [props]\n   * @param {ContractId | string} [props.contractId]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @type {?ContractId}\n     * @private\n     */\n\n    this._contractId = null;\n\n    if (props.contractId != null) {\n      this.setContractId(props.contractId);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.IQuery} query\n   * @returns {ContractInfoQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const info =\n    /** @type {proto.IContractGetInfoQuery} */\n    query.contractGetInfo;\n    return new ContractInfoQuery({\n      contractId: info.contractID != null ? ContractId._fromProtobuf(info.contractID) : undefined\n    });\n  }\n  /**\n   * @returns {?ContractId}\n   */\n\n\n  get contractId() {\n    return this._contractId;\n  }\n  /**\n   * Set the contract ID for which the info is being requested.\n   *\n   * @param {ContractId | string} contractId\n   * @returns {ContractInfoQuery}\n   */\n\n\n  setContractId(contractId) {\n    this._contractId = typeof contractId === \"string\" ? ContractId.fromString(contractId) : contractId.clone();\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._contractId != null) {\n      this._contractId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.IQuery} request\n   * @returns {Promise<proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.smartContract.getContractInfo(request);\n  }\n  /**\n   * @override\n   * @param {import(\"../client/Client.js\").default<Channel, *>} client\n   * @returns {Promise<Hbar>}\n   */\n\n\n  async getCost(client) {\n    let cost = await super.getCost(client);\n\n    if (cost.toTinybars().greaterThan(25)) {\n      return cost;\n    } else {\n      return Hbar.fromTinybars(25);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IResponse} response\n   * @returns {proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const contractGetInfo =\n    /** @type {proto.IContractGetInfoResponse} */\n    response.contractGetInfo;\n    return (\n      /** @type {proto.IResponseHeader} */\n      contractGetInfo.header\n    );\n  }\n  /**\n   * @protected\n   * @override\n   * @param {proto.IResponse} response\n   * @param {AccountId} nodeAccountId\n   * @param {proto.IQuery} request\n   * @returns {Promise<ContractInfo>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapResponse(response, nodeAccountId, request) {\n    const info =\n    /** @type {proto.IContractGetInfoResponse} */\n    response.contractGetInfo;\n    return Promise.resolve(ContractInfo._fromProtobuf(\n    /** @type {proto.IContractInfo} */\n    info.contractInfo));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IQueryHeader} header\n   * @returns {proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      contractGetInfo: {\n        header,\n        contractID: this._contractId != null ? this._contractId._toProtobuf() : null\n      }\n    };\n  }\n\n} // eslint-disable-next-line @typescript-eslint/unbound-method\n\nQUERY_REGISTRY.set(\"contractGetInfo\", ContractInfoQuery._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/contract/ContractInfoQuery.js"],"names":["Query","QUERY_REGISTRY","ContractId","ContractInfo","Hbar","ContractInfoQuery","constructor","props","_contractId","contractId","setContractId","_fromProtobuf","query","info","contractGetInfo","contractID","undefined","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","smartContract","getContractInfo","getCost","cost","toTinybars","greaterThan","fromTinybars","_mapResponseHeader","response","header","_mapResponse","nodeAccountId","Promise","resolve","contractInfo","_onMakeRequest","_toProtobuf","set"],"mappings":"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","sourcesContent":["import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport ContractId from \"./ContractId.js\";\nimport ContractInfo from \"./ContractInfo.js\";\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IContractGetInfoQuery} proto.IContractGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").IContractGetInfoResponse} proto.IContractGetInfoResponse\n * @typedef {import(\"@hashgraph/proto\").IContractInfo} proto.IContractInfo\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<ContractInfo>}\n */\nexport default class ContractInfoQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {ContractId | string} [props.contractId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?ContractId}\n         * @private\n         */\n        this._contractId = null;\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {ContractInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {proto.IContractGetInfoQuery} */ (\n            query.contractGetInfo\n        );\n\n        return new ContractInfoQuery({\n            contractId:\n                info.contractID != null\n                    ? ContractId._fromProtobuf(info.contractID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the info is being requested.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractInfoQuery}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            typeof contractId === \"string\"\n                ? ContractId.fromString(contractId)\n                : contractId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._contractId != null) {\n            this._contractId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.getContractInfo(request);\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        let cost = await super.getCost(client);\n\n        if (cost.toTinybars().greaterThan(25)) {\n            return cost;\n        } else {\n            return Hbar.fromTinybars(25);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const contractGetInfo = /** @type {proto.IContractGetInfoResponse} */ (\n            response.contractGetInfo\n        );\n        return /** @type {proto.IResponseHeader} */ (contractGetInfo.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {proto.IQuery} request\n     * @returns {Promise<ContractInfo>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const info = /** @type {proto.IContractGetInfoResponse} */ (\n            response.contractGetInfo\n        );\n\n        return Promise.resolve(\n            ContractInfo._fromProtobuf(\n                /** @type {proto.IContractInfo} */ (info.contractInfo)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            contractGetInfo: {\n                header,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"contractGetInfo\", ContractInfoQuery._fromProtobuf);\n"]},"metadata":{},"sourceType":"module"}