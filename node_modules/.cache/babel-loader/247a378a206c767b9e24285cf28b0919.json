{"ast":null,"code":"import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport Status from \"../Status.js\";\nimport TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport PrecheckStatusError from \"../PrecheckStatusError.js\";\nimport ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport { ExecutionState } from \"../Executable.js\";\nimport { ResponseCodeEnum } from \"@hashgraph/proto\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ITransactionReceipt} proto.ITransactionReceipt\n * @typedef {import(\"@hashgraph/proto\").ITransactionGetReceiptQuery} proto.ITransactionGetReceiptQuery\n * @typedef {import(\"@hashgraph/proto\").ITransactionGetReceiptResponse} proto.ITransactionGetReceiptResponse\n * @typedef {import(\"@hashgraph/proto\").ResponseCodeEnum} proto.ResponseCodeEnum\n */\n\n/**\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * @augments {Query<TransactionReceipt>}\n */\n\nexport default class TransactionReceiptQuery extends Query {\n  /**\n   * @param {object} [props]\n   * @param {TransactionId | string} [props.transactionId]\n   * @param {boolean} [props.includeDuplicates]\n   * @param {boolean} [props.includeChildren]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?TransactionId}\n     */\n\n    this._transactionId = null;\n    /**\n     * @private\n     * @type {?boolean}\n     */\n\n    this._includeChildren = null;\n    /**\n     * @private\n     * @type {?boolean}\n     */\n\n    this._includeDuplicates = null;\n\n    if (props.transactionId != null) {\n      this.setTransactionId(props.transactionId);\n    }\n\n    if (props.includeChildren != null) {\n      this.setIncludeChildren(props.includeChildren);\n    }\n\n    if (props.includeDuplicates != null) {\n      this.setIncludeDuplicates(props.includeDuplicates);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.IQuery} query\n   * @returns {TransactionReceiptQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const receipt =\n    /** @type {proto.ITransactionGetReceiptQuery} */\n    query.transactionGetReceipt;\n    return new TransactionReceiptQuery({\n      transactionId: receipt.transactionID ? TransactionId._fromProtobuf(receipt.transactionID) : undefined,\n      includeDuplicates: receipt.includeDuplicates != null ? receipt.includeDuplicates : undefined,\n      includeChildren: receipt.includeChildReceipts != null ? receipt.includeChildReceipts : undefined\n    });\n  }\n  /**\n   * @returns {?TransactionId}\n   */\n\n\n  get transactionId() {\n    return this._transactionId;\n  }\n  /**\n   * Set the transaction ID for which the receipt is being requested.\n   *\n   * @param {TransactionId | string} transactionId\n   * @returns {this}\n   */\n\n\n  setTransactionId(transactionId) {\n    this._transactionId = typeof transactionId === \"string\" ? TransactionId.fromString(transactionId) : transactionId.clone();\n    return this;\n  }\n  /**\n   * @param {boolean} includeDuplicates\n   * @returns {TransactionReceiptQuery}\n   */\n\n\n  setIncludeDuplicates(includeDuplicates) {\n    this._includeDuplicates = includeDuplicates;\n    return this;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  get includeDuplicates() {\n    return this._includeDuplicates != null ? this._includeDuplicates : false;\n  }\n  /**\n   * @param {boolean} includeChildren\n   * @returns {TransactionReceiptQuery}\n   */\n\n\n  setIncludeChildren(includeChildren) {\n    this._includeChildren = includeChildren;\n    return this;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  get includeChildren() {\n    return this._includeChildren != null ? this._includeChildren : false;\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {boolean}\n   */\n\n\n  _isPaymentRequired() {\n    return false;\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IQuery} request\n   * @param {proto.IResponse} response\n   * @returns {ExecutionState}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _shouldRetry(request, response) {\n    const {\n      nodeTransactionPrecheckCode\n    } = this._mapResponseHeader(response);\n\n    let status = Status._fromCode(nodeTransactionPrecheckCode != null ? nodeTransactionPrecheckCode : ResponseCodeEnum.OK);\n\n    switch (status) {\n      case Status.Busy:\n      case Status.Unknown:\n      case Status.ReceiptNotFound:\n        return ExecutionState.Retry;\n\n      case Status.Ok:\n        break;\n\n      default:\n        return ExecutionState.Error;\n    }\n\n    const transactionGetReceipt =\n    /** @type {proto.ITransactionGetReceiptResponse} */\n    response.transactionGetReceipt;\n    const receipt =\n    /** @type {proto.ITransactionReceipt} */\n    transactionGetReceipt.receipt;\n    const receiptStatusCode =\n    /** @type {proto.ResponseCodeEnum} */\n    receipt.status;\n    status = Status._fromCode(receiptStatusCode);\n\n    switch (status) {\n      case Status.Busy:\n      case Status.Unknown:\n      case Status.ReceiptNotFound:\n        return ExecutionState.Retry;\n\n      case Status.Success:\n        return ExecutionState.Finished;\n\n      default:\n        return ExecutionState.Error;\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IQuery} request\n   * @param {proto.IResponse} response\n   * @returns {Error}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapStatusError(request, response) {\n    const {\n      nodeTransactionPrecheckCode\n    } = this._mapResponseHeader(response);\n\n    let status = Status._fromCode(nodeTransactionPrecheckCode != null ? nodeTransactionPrecheckCode : ResponseCodeEnum.OK);\n\n    switch (status) {\n      case Status.Ok:\n        // Do nothing\n        break;\n\n      default:\n        return new PrecheckStatusError({\n          status,\n          transactionId: this._getTransactionId()\n        });\n    }\n\n    const transactionGetReceipt =\n    /** @type {proto.ITransactionGetReceiptResponse} */\n    response.transactionGetReceipt;\n    const receipt =\n    /** @type {proto.ITransactionReceipt} */\n    transactionGetReceipt.receipt;\n    const receiptStatusCode =\n    /** @type {proto.ResponseCodeEnum} */\n    receipt.status;\n    status = Status._fromCode(receiptStatusCode);\n    return new ReceiptStatusError({\n      status,\n      transactionId: this._getTransactionId(),\n      transactionReceipt: TransactionReceipt._fromProtobuf(transactionGetReceipt)\n    });\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._transactionId != null && this._transactionId.accountId != null) {\n      this._transactionId.accountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.IQuery} request\n   * @returns {Promise<proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.getTransactionReceipts(request);\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IResponse} response\n   * @returns {proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const transactionGetReceipt =\n    /** @type {proto.ITransactionGetReceiptResponse} */\n    response.transactionGetReceipt;\n    return (\n      /** @type {proto.IResponseHeader} */\n      transactionGetReceipt.header\n    );\n  }\n  /**\n   * @protected\n   * @override\n   * @param {proto.IResponse} response\n   * @param {AccountId} nodeAccountId\n   * @param {proto.IQuery} request\n   * @returns {Promise<TransactionReceipt>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapResponse(response, nodeAccountId, request) {\n    const transactionGetReceipt =\n    /** @type {proto.ITransactionGetReceiptResponse} */\n    response.transactionGetReceipt;\n    return Promise.resolve(TransactionReceipt._fromProtobuf(transactionGetReceipt));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IQueryHeader} header\n   * @returns {proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      transactionGetReceipt: {\n        header,\n        transactionID: this._transactionId != null ? this._transactionId._toProtobuf() : null,\n        includeDuplicates: this._includeDuplicates,\n        includeChildReceipts: this._includeChildren\n      }\n    };\n  }\n\n}\nQUERY_REGISTRY.set(\"transactionGetReceipt\", // eslint-disable-next-line @typescript-eslint/unbound-method\nTransactionReceiptQuery._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/transaction/TransactionReceiptQuery.js"],"names":["Query","QUERY_REGISTRY","Status","TransactionReceipt","TransactionId","PrecheckStatusError","ReceiptStatusError","ExecutionState","ResponseCodeEnum","TransactionReceiptQuery","constructor","props","_transactionId","_includeChildren","_includeDuplicates","transactionId","setTransactionId","includeChildren","setIncludeChildren","includeDuplicates","setIncludeDuplicates","_fromProtobuf","query","receipt","transactionGetReceipt","transactionID","undefined","includeChildReceipts","fromString","clone","_isPaymentRequired","_shouldRetry","request","response","nodeTransactionPrecheckCode","_mapResponseHeader","status","_fromCode","OK","Busy","Unknown","ReceiptNotFound","Retry","Ok","Error","receiptStatusCode","Success","Finished","_mapStatusError","_getTransactionId","transactionReceipt","_validateChecksums","client","accountId","validateChecksum","_execute","channel","crypto","getTransactionReceipts","header","_mapResponse","nodeAccountId","Promise","resolve","_onMakeRequest","_toProtobuf","set"],"mappings":"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","sourcesContent":["import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport Status from \"../Status.js\";\nimport TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport PrecheckStatusError from \"../PrecheckStatusError.js\";\nimport ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport { ExecutionState } from \"../Executable.js\";\nimport { ResponseCodeEnum } from \"@hashgraph/proto\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ITransactionReceipt} proto.ITransactionReceipt\n * @typedef {import(\"@hashgraph/proto\").ITransactionGetReceiptQuery} proto.ITransactionGetReceiptQuery\n * @typedef {import(\"@hashgraph/proto\").ITransactionGetReceiptResponse} proto.ITransactionGetReceiptResponse\n * @typedef {import(\"@hashgraph/proto\").ResponseCodeEnum} proto.ResponseCodeEnum\n */\n\n/**\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * @augments {Query<TransactionReceipt>}\n */\nexport default class TransactionReceiptQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {TransactionId | string} [props.transactionId]\n     * @param {boolean} [props.includeDuplicates]\n     * @param {boolean} [props.includeChildren]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TransactionId}\n         */\n        this._transactionId = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._includeChildren = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._includeDuplicates = null;\n\n        if (props.transactionId != null) {\n            this.setTransactionId(props.transactionId);\n        }\n\n        if (props.includeChildren != null) {\n            this.setIncludeChildren(props.includeChildren);\n        }\n\n        if (props.includeDuplicates != null) {\n            this.setIncludeDuplicates(props.includeDuplicates);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {TransactionReceiptQuery}\n     */\n    static _fromProtobuf(query) {\n        const receipt = /** @type {proto.ITransactionGetReceiptQuery} */ (\n            query.transactionGetReceipt\n        );\n\n        return new TransactionReceiptQuery({\n            transactionId: receipt.transactionID\n                ? TransactionId._fromProtobuf(receipt.transactionID)\n                : undefined,\n            includeDuplicates:\n                receipt.includeDuplicates != null\n                    ? receipt.includeDuplicates\n                    : undefined,\n            includeChildren:\n                receipt.includeChildReceipts != null\n                    ? receipt.includeChildReceipts\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?TransactionId}\n     */\n    get transactionId() {\n        return this._transactionId;\n    }\n\n    /**\n     * Set the transaction ID for which the receipt is being requested.\n     *\n     * @param {TransactionId | string} transactionId\n     * @returns {this}\n     */\n    setTransactionId(transactionId) {\n        this._transactionId =\n            typeof transactionId === \"string\"\n                ? TransactionId.fromString(transactionId)\n                : transactionId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {boolean} includeDuplicates\n     * @returns {TransactionReceiptQuery}\n     */\n    setIncludeDuplicates(includeDuplicates) {\n        this._includeDuplicates = includeDuplicates;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get includeDuplicates() {\n        return this._includeDuplicates != null\n            ? this._includeDuplicates\n            : false;\n    }\n\n    /**\n     * @param {boolean} includeChildren\n     * @returns {TransactionReceiptQuery}\n     */\n    setIncludeChildren(includeChildren) {\n        this._includeChildren = includeChildren;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get includeChildren() {\n        return this._includeChildren != null ? this._includeChildren : false;\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {boolean}\n     */\n    _isPaymentRequired() {\n        return false;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQuery} request\n     * @param {proto.IResponse} response\n     * @returns {ExecutionState}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _shouldRetry(request, response) {\n        const { nodeTransactionPrecheckCode } =\n            this._mapResponseHeader(response);\n\n        let status = Status._fromCode(\n            nodeTransactionPrecheckCode != null\n                ? nodeTransactionPrecheckCode\n                : ResponseCodeEnum.OK\n        );\n\n        switch (status) {\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n                return ExecutionState.Retry;\n            case Status.Ok:\n                break;\n            default:\n                return ExecutionState.Error;\n        }\n\n        const transactionGetReceipt =\n            /** @type {proto.ITransactionGetReceiptResponse} */ (\n                response.transactionGetReceipt\n            );\n        const receipt = /** @type {proto.ITransactionReceipt} */ (\n            transactionGetReceipt.receipt\n        );\n        const receiptStatusCode = /** @type {proto.ResponseCodeEnum} */ (\n            receipt.status\n        );\n\n        status = Status._fromCode(receiptStatusCode);\n\n        switch (status) {\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n                return ExecutionState.Retry;\n            case Status.Success:\n                return ExecutionState.Finished;\n            default:\n                return ExecutionState.Error;\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQuery} request\n     * @param {proto.IResponse} response\n     * @returns {Error}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapStatusError(request, response) {\n        const { nodeTransactionPrecheckCode } =\n            this._mapResponseHeader(response);\n\n        let status = Status._fromCode(\n            nodeTransactionPrecheckCode != null\n                ? nodeTransactionPrecheckCode\n                : ResponseCodeEnum.OK\n        );\n\n        switch (status) {\n            case Status.Ok:\n                // Do nothing\n                break;\n\n            default:\n                return new PrecheckStatusError({\n                    status,\n                    transactionId: this._getTransactionId(),\n                });\n        }\n\n        const transactionGetReceipt =\n            /** @type {proto.ITransactionGetReceiptResponse} */ (\n                response.transactionGetReceipt\n            );\n        const receipt = /** @type {proto.ITransactionReceipt} */ (\n            transactionGetReceipt.receipt\n        );\n        const receiptStatusCode = /** @type {proto.ResponseCodeEnum} */ (\n            receipt.status\n        );\n\n        status = Status._fromCode(receiptStatusCode);\n\n        return new ReceiptStatusError({\n            status,\n            transactionId: this._getTransactionId(),\n            transactionReceipt: TransactionReceipt._fromProtobuf(\n                transactionGetReceipt\n            ),\n        });\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (\n            this._transactionId != null &&\n            this._transactionId.accountId != null\n        ) {\n            this._transactionId.accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getTransactionReceipts(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const transactionGetReceipt =\n            /** @type {proto.ITransactionGetReceiptResponse} */ (\n                response.transactionGetReceipt\n            );\n        return /** @type {proto.IResponseHeader} */ (\n            transactionGetReceipt.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {proto.IQuery} request\n     * @returns {Promise<TransactionReceipt>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const transactionGetReceipt =\n            /** @type {proto.ITransactionGetReceiptResponse} */ (\n                response.transactionGetReceipt\n            );\n\n        return Promise.resolve(\n            TransactionReceipt._fromProtobuf(transactionGetReceipt)\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            transactionGetReceipt: {\n                header,\n                transactionID:\n                    this._transactionId != null\n                        ? this._transactionId._toProtobuf()\n                        : null,\n                includeDuplicates: this._includeDuplicates,\n                includeChildReceipts: this._includeChildren,\n            },\n        };\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"transactionGetReceipt\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TransactionReceiptQuery._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}