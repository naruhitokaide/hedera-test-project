{"ast":null,"code":"import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport TokenId from \"./TokenId.js\";\nimport TokenInfo from \"./TokenInfo.js\";\nimport Hbar from \"../Hbar.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ITokenInfo} proto.ITokenInfo\n * @typedef {import(\"@hashgraph/proto\").ITokenGetInfoQuery} proto.ITokenGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").ITokenGetInfoResponse} proto.ITokenGetInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<TokenInfo>}\n */\n\nexport default class TokenInfoQuery extends Query {\n  /**\n   * @param {object} properties\n   * @param {TokenId | string} [properties.tokenId]\n   */\n  constructor() {\n    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?TokenId}\n     */\n\n    this._tokenId = null;\n\n    if (properties.tokenId != null) {\n      this.setTokenId(properties.tokenId);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.IQuery} query\n   * @returns {TokenInfoQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const info =\n    /** @type {proto.ITokenGetInfoQuery} */\n    query.tokenGetInfo;\n    return new TokenInfoQuery({\n      tokenId: info.token != null ? TokenId._fromProtobuf(info.token) : undefined\n    });\n  }\n  /**\n   * @returns {?TokenId}\n   */\n\n\n  get tokenId() {\n    return this._tokenId;\n  }\n  /**\n   * Set the token ID for which the info is being requested.\n   *\n   * @param {TokenId | string} tokenId\n   * @returns {TokenInfoQuery}\n   */\n\n\n  setTokenId(tokenId) {\n    this._tokenId = typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId.clone();\n    return this;\n  }\n  /**\n   * @override\n   * @param {import(\"../client/Client.js\").default<Channel, *>} client\n   * @returns {Promise<Hbar>}\n   */\n\n\n  async getCost(client) {\n    let cost = await super.getCost(client);\n\n    if (cost.toTinybars().greaterThan(25)) {\n      return cost;\n    } else {\n      return Hbar.fromTinybars(25);\n    }\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._tokenId != null) {\n      this._tokenId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.IQuery} request\n   * @returns {Promise<proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.token.getTokenInfo(request);\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IResponse} response\n   * @returns {proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const tokenGetInfo =\n    /** @type {proto.ITokenGetInfoResponse} */\n    response.tokenGetInfo;\n    return (\n      /** @type {proto.IResponseHeader} */\n      tokenGetInfo.header\n    );\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IResponse} response\n   * @param {AccountId} nodeAccountId\n   * @param {proto.IQuery} request\n   * @returns {Promise<TokenInfo>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapResponse(response, nodeAccountId, request) {\n    const info =\n    /** @type {proto.ITokenGetInfoResponse} */\n    response.tokenGetInfo;\n    return Promise.resolve(TokenInfo._fromProtobuf(\n    /** @type {proto.ITokenInfo} */\n    info.tokenInfo));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IQueryHeader} header\n   * @returns {proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      tokenGetInfo: {\n        header,\n        token: this._tokenId != null ? this._tokenId._toProtobuf() : null\n      }\n    };\n  }\n\n} // eslint-disable-next-line @typescript-eslint/unbound-method\n\nQUERY_REGISTRY.set(\"tokenGetInfo\", TokenInfoQuery._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/token/TokenInfoQuery.js"],"names":["Query","QUERY_REGISTRY","TokenId","TokenInfo","Hbar","TokenInfoQuery","constructor","properties","_tokenId","tokenId","setTokenId","_fromProtobuf","query","info","tokenGetInfo","token","undefined","fromString","clone","getCost","client","cost","toTinybars","greaterThan","fromTinybars","_validateChecksums","validateChecksum","_execute","channel","request","getTokenInfo","_mapResponseHeader","response","header","_mapResponse","nodeAccountId","Promise","resolve","tokenInfo","_onMakeRequest","_toProtobuf","set"],"mappings":"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","sourcesContent":["import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport TokenId from \"./TokenId.js\";\nimport TokenInfo from \"./TokenInfo.js\";\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ITokenInfo} proto.ITokenInfo\n * @typedef {import(\"@hashgraph/proto\").ITokenGetInfoQuery} proto.ITokenGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").ITokenGetInfoResponse} proto.ITokenGetInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<TokenInfo>}\n */\nexport default class TokenInfoQuery extends Query {\n    /**\n     * @param {object} properties\n     * @param {TokenId | string} [properties.tokenId]\n     */\n    constructor(properties = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n        if (properties.tokenId != null) {\n            this.setTokenId(properties.tokenId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {TokenInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {proto.ITokenGetInfoQuery} */ (\n            query.tokenGetInfo\n        );\n\n        return new TokenInfoQuery({\n            tokenId:\n                info.token != null\n                    ? TokenId._fromProtobuf(info.token)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * Set the token ID for which the info is being requested.\n     *\n     * @param {TokenId | string} tokenId\n     * @returns {TokenInfoQuery}\n     */\n    setTokenId(tokenId) {\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : tokenId.clone();\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        let cost = await super.getCost(client);\n\n        if (cost.toTinybars().greaterThan(25)) {\n            return cost;\n        } else {\n            return Hbar.fromTinybars(25);\n        }\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._tokenId != null) {\n            this._tokenId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.getTokenInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const tokenGetInfo = /** @type {proto.ITokenGetInfoResponse} */ (\n            response.tokenGetInfo\n        );\n        return /** @type {proto.IResponseHeader} */ (tokenGetInfo.header);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {proto.IQuery} request\n     * @returns {Promise<TokenInfo>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const info = /** @type {proto.ITokenGetInfoResponse} */ (\n            response.tokenGetInfo\n        );\n\n        return Promise.resolve(\n            TokenInfo._fromProtobuf(\n                /** @type {proto.ITokenInfo} */ (info.tokenInfo)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            tokenGetInfo: {\n                header,\n                token:\n                    this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"tokenGetInfo\", TokenInfoQuery._fromProtobuf);\n"]},"metadata":{},"sourceType":"module"}