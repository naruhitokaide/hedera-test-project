{"ast":null,"code":"import AccountId from \"../account/AccountId.js\";\nimport Transaction, { TRANSACTION_REGISTRY, SCHEDULE_CREATE_TRANSACTION } from \"../transaction/Transaction.js\";\nimport Key from \"../Key.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IScheduleCreateTransactionBody} proto.IScheduleCreateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").ISignatureMap} proto.ISignatureMap\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../Timestamp.js\").default} Timestamp\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n * @typedef {import(\"../PrivateKey.js\").default} PrivateKey\n */\n\n/**\n * Create a new Hederaâ„¢ crypto-currency account.\n */\n\nexport default class ScheduleCreateTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {Key} [props.adminKey]\n   * @param {AccountId} [props.payerAccountID]\n   * @param {string} [props.scheduleMemo]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?Key}\n     */\n\n    this._adminKey = null;\n    /**\n     * @private\n     * @type {?Transaction}\n     */\n\n    this._scheduledTransaction = null;\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n    this._payerAccountId = null;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this._scheduleMemo = null;\n    /**\n     * @private\n     * @type {Set<string>}\n     */\n\n    this._scheduledSignerPublicKeys = new Set();\n\n    if (props.adminKey != null) {\n      this.setAdminKey(props.adminKey);\n    }\n\n    if (props.payerAccountID != null) {\n      this.setPayerAccountId(props.payerAccountID);\n    }\n\n    if (props.scheduleMemo != null) {\n      this.setScheduleMemo(props.scheduleMemo);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.ITransaction[]} transactions\n   * @param {proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {proto.ITransactionBody[]} bodies\n   * @returns {ScheduleCreateTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const create =\n    /** @type {proto.IScheduleCreateTransactionBody} */\n    body.scheduleCreate;\n    return Transaction._fromProtobufTransactions(new ScheduleCreateTransaction({\n      adminKey: create.adminKey != null ? Key._fromProtobufKey(create.adminKey) : undefined,\n      payerAccountID: create.payerAccountID != null ? AccountId._fromProtobuf(\n      /** @type {proto.IAccountID} */\n      create.payerAccountID) : undefined,\n      scheduleMemo: create.memo != null ? create.memo : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @internal\n   * @param {Transaction} tx\n   * @returns {this}\n   */\n\n\n  _setScheduledTransaction(tx) {\n    this._scheduledTransaction = tx;\n    return this;\n  }\n  /**\n   * @returns {?Key}\n   */\n\n\n  get adminKey() {\n    return this._adminKey;\n  }\n  /**\n   * Set the key for this account.\n   *\n   * This is the key that must sign each transfer out of the account.\n   *\n   * If `receiverSignatureRequired` is true, then the key must also sign\n   * any transfer into the account.\n   *\n   * @param {Key} key\n   * @returns {this}\n   */\n\n\n  setAdminKey(key) {\n    this._requireNotFrozen();\n\n    this._adminKey = key;\n    return this;\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get payerAccountId() {\n    return this._payerAccountId;\n  }\n  /**\n   * @param {AccountId} account\n   * @returns {this}\n   */\n\n\n  setPayerAccountId(account) {\n    this._requireNotFrozen();\n\n    this._payerAccountId = account;\n    return this;\n  }\n  /**\n   * @param {string} memo\n   * @returns {this}\n   */\n\n\n  setScheduleMemo(memo) {\n    this._requireNotFrozen();\n\n    this._scheduleMemo = memo;\n    return this;\n  }\n  /**\n   * @returns {?string}\n   */\n\n\n  get getScheduleMemo() {\n    this._requireNotFrozen();\n\n    return this._scheduleMemo;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @returns {this}\n   */\n\n\n  setScheduledTransaction(transaction) {\n    this._requireNotFrozen();\n\n    transaction._requireNotFrozen();\n\n    this._scheduledTransaction = transaction.schedule()._scheduledTransaction;\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._payerAccountId != null) {\n      this._payerAccountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.ITransaction} request\n   * @returns {Promise<proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.schedule.createSchedule(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"scheduleCreate\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {proto.IScheduleCreateTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      adminKey: this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n      payerAccountID: this._payerAccountId != null ? this._payerAccountId._toProtobuf() : null,\n      scheduledTransactionBody: this._scheduledTransaction != null ? this._scheduledTransaction._getScheduledTransactionBody() : null,\n      memo: this._scheduleMemo\n    };\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"scheduleCreate\", // eslint-disable-next-line @typescript-eslint/unbound-method\nScheduleCreateTransaction._fromProtobuf);\nSCHEDULE_CREATE_TRANSACTION.push(() => new ScheduleCreateTransaction());","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/schedule/ScheduleCreateTransaction.js"],"names":["AccountId","Transaction","TRANSACTION_REGISTRY","SCHEDULE_CREATE_TRANSACTION","Key","ScheduleCreateTransaction","constructor","props","_adminKey","_scheduledTransaction","_payerAccountId","_scheduleMemo","_scheduledSignerPublicKeys","Set","adminKey","setAdminKey","payerAccountID","setPayerAccountId","scheduleMemo","setScheduleMemo","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","create","scheduleCreate","_fromProtobufTransactions","_fromProtobufKey","undefined","memo","_setScheduledTransaction","tx","key","_requireNotFrozen","payerAccountId","account","getScheduleMemo","setScheduledTransaction","transaction","schedule","_validateChecksums","client","validateChecksum","_execute","channel","request","createSchedule","_getTransactionDataCase","_makeTransactionData","_toProtobufKey","_toProtobuf","scheduledTransactionBody","_getScheduledTransactionBody","set","push"],"mappings":"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","sourcesContent":["import AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n    SCHEDULE_CREATE_TRANSACTION,\n} from \"../transaction/Transaction.js\";\nimport Key from \"../Key.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IScheduleCreateTransactionBody} proto.IScheduleCreateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").ISignatureMap} proto.ISignatureMap\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../Timestamp.js\").default} Timestamp\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n * @typedef {import(\"../PrivateKey.js\").default} PrivateKey\n */\n\n/**\n * Create a new Hederaâ„¢ crypto-currency account.\n */\nexport default class ScheduleCreateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Key} [props.adminKey]\n     * @param {AccountId} [props.payerAccountID]\n     * @param {string} [props.scheduleMemo]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        /**\n         * @private\n         * @type {?Transaction}\n         */\n        this._scheduledTransaction = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._payerAccountId = null;\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._scheduleMemo = null;\n\n        /**\n         * @private\n         * @type {Set<string>}\n         */\n        this._scheduledSignerPublicKeys = new Set();\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        if (props.payerAccountID != null) {\n            this.setPayerAccountId(props.payerAccountID);\n        }\n\n        if (props.scheduleMemo != null) {\n            this.setScheduleMemo(props.scheduleMemo);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {ScheduleCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const create = /** @type {proto.IScheduleCreateTransactionBody} */ (\n            body.scheduleCreate\n        );\n\n        return Transaction._fromProtobufTransactions(\n            new ScheduleCreateTransaction({\n                adminKey:\n                    create.adminKey != null\n                        ? Key._fromProtobufKey(create.adminKey)\n                        : undefined,\n                payerAccountID:\n                    create.payerAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {proto.IAccountID} */ (\n                                  create.payerAccountID\n                              )\n                          )\n                        : undefined,\n                scheduleMemo: create.memo != null ? create.memo : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @internal\n     * @param {Transaction} tx\n     * @returns {this}\n     */\n    _setScheduledTransaction(tx) {\n        this._scheduledTransaction = tx;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * Set the key for this account.\n     *\n     * This is the key that must sign each transfer out of the account.\n     *\n     * If `receiverSignatureRequired` is true, then the key must also sign\n     * any transfer into the account.\n     *\n     * @param {Key} key\n     * @returns {this}\n     */\n    setAdminKey(key) {\n        this._requireNotFrozen();\n        this._adminKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get payerAccountId() {\n        return this._payerAccountId;\n    }\n\n    /**\n     * @param {AccountId} account\n     * @returns {this}\n     */\n    setPayerAccountId(account) {\n        this._requireNotFrozen();\n        this._payerAccountId = account;\n\n        return this;\n    }\n\n    /**\n     * @param {string} memo\n     * @returns {this}\n     */\n    setScheduleMemo(memo) {\n        this._requireNotFrozen();\n        this._scheduleMemo = memo;\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get getScheduleMemo() {\n        this._requireNotFrozen();\n        return this._scheduleMemo;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @returns {this}\n     */\n    setScheduledTransaction(transaction) {\n        this._requireNotFrozen();\n        transaction._requireNotFrozen();\n\n        this._scheduledTransaction =\n            transaction.schedule()._scheduledTransaction;\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._payerAccountId != null) {\n            this._payerAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.schedule.createSchedule(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"scheduleCreate\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IScheduleCreateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            adminKey:\n                this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n            payerAccountID:\n                this._payerAccountId != null\n                    ? this._payerAccountId._toProtobuf()\n                    : null,\n            scheduledTransactionBody:\n                this._scheduledTransaction != null\n                    ? this._scheduledTransaction._getScheduledTransactionBody()\n                    : null,\n            memo: this._scheduleMemo,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"scheduleCreate\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ScheduleCreateTransaction._fromProtobuf\n);\n\nSCHEDULE_CREATE_TRANSACTION.push(() => new ScheduleCreateTransaction());\n"]},"metadata":{},"sourceType":"module"}