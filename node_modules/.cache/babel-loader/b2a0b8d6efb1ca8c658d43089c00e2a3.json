{"ast":null,"code":"import BigNumber from \"bignumber.js\";\nimport { valueToLong } from \"./long.js\";\nimport HbarUnit from \"./HbarUnit.js\";\nimport Long from \"long\";\n/**\n * @typedef {import(\"./long.js\").LongObject} LongObject\n */\n\nexport default class Hbar {\n  /**\n   * @param {number | string | Long | LongObject | BigNumber} amount\n   * @param {HbarUnit=} unit\n   */\n  constructor(amount) {\n    let unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : HbarUnit.Hbar;\n\n    if (unit === HbarUnit.Tinybar) {\n      this._valueInTinybar = valueToLong(amount);\n    } else {\n      /** @type {BigNumber} */\n      let bigAmount;\n\n      if (Long.isLong(amount)) {\n        bigAmount = new BigNumber(amount.toString(10));\n      } else if (BigNumber.isBigNumber(amount) || typeof amount === \"string\" || typeof amount === \"number\") {\n        bigAmount = new BigNumber(amount);\n      } else {\n        bigAmount = new BigNumber(0);\n      }\n      /**\n       * @type {BigNumber}\n       */\n\n\n      this._valueInTinybar = bigAmount.multipliedBy(unit._tinybar);\n    }\n\n    if (!this._valueInTinybar.isInteger()) {\n      throw new Error(\"Hbar in tinybars contains decimals\");\n    }\n  }\n  /**\n   * @param {number | Long | BigNumber} amount\n   * @param {HbarUnit} unit\n   * @returns {Hbar}\n   */\n\n\n  static from(amount, unit) {\n    return new Hbar(amount, unit);\n  }\n  /**\n   * @param {number | Long | string | BigNumber} amount\n   * @returns {Hbar}\n   */\n\n\n  static fromTinybars(amount) {\n    if (typeof amount === \"string\") {\n      return this.fromString(amount, HbarUnit.Tinybar);\n    }\n\n    return new Hbar(amount, HbarUnit.Tinybar);\n  }\n  /**\n   * @param {string} str\n   * @param {HbarUnit=} unit\n   * @returns {Hbar}\n   */\n\n\n  static fromString(str) {\n    let unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : HbarUnit.Hbar;\n    const pattern = /^((?:\\+|-)?\\d+(?:\\.\\d+)?)(?: (tℏ|μℏ|mℏ|ℏ|kℏ|Mℏ|Gℏ))?$/;\n\n    if (pattern.test(str)) {\n      let [amount, symbol] = str.split(\" \");\n\n      if (symbol != null) {\n        unit = HbarUnit.fromString(symbol);\n      }\n\n      return new Hbar(new BigNumber(amount), unit);\n    } else {\n      throw new Error(\"invalid argument provided\");\n    }\n  }\n  /**\n   * @param {HbarUnit} unit\n   * @returns {BigNumber}\n   */\n\n\n  to(unit) {\n    return this._valueInTinybar.dividedBy(unit._tinybar);\n  }\n  /**\n   * @returns {BigNumber}\n   */\n\n\n  toBigNumber() {\n    return this.to(HbarUnit.Hbar);\n  }\n  /**\n   * @returns {Long}\n   */\n\n\n  toTinybars() {\n    return Long.fromValue(this._valueInTinybar.toFixed());\n  }\n  /**\n   * @returns {Hbar}\n   */\n\n\n  negated() {\n    return Hbar.fromTinybars(this._valueInTinybar.negated());\n  }\n  /**\n   * @param {HbarUnit=} unit\n   * @returns {string}\n   */\n\n\n  toString(unit) {\n    if (unit != null) {\n      return `${this._valueInTinybar.dividedBy(unit._tinybar).toString()} ${unit._symbol}`;\n    }\n\n    if (this._valueInTinybar.isLessThan(10000) && this._valueInTinybar.isGreaterThan(-10000)) {\n      return `${this._valueInTinybar.toFixed()} ${HbarUnit.Tinybar._symbol}`;\n    }\n\n    return `${this.to(HbarUnit.Hbar).toString()} ${HbarUnit.Hbar._symbol}`;\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/Hbar.js"],"names":["BigNumber","valueToLong","HbarUnit","Long","Hbar","constructor","amount","unit","Tinybar","_valueInTinybar","bigAmount","isLong","toString","isBigNumber","multipliedBy","_tinybar","isInteger","Error","from","fromTinybars","fromString","str","pattern","test","symbol","split","to","dividedBy","toBigNumber","toTinybars","fromValue","toFixed","negated","_symbol","isLessThan","isGreaterThan"],"mappings":"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","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport { valueToLong } from \"./long.js\";\nimport HbarUnit from \"./HbarUnit.js\";\n\nimport Long from \"long\";\n\n/**\n * @typedef {import(\"./long.js\").LongObject} LongObject\n */\n\nexport default class Hbar {\n    /**\n     * @param {number | string | Long | LongObject | BigNumber} amount\n     * @param {HbarUnit=} unit\n     */\n    constructor(amount, unit = HbarUnit.Hbar) {\n        if (unit === HbarUnit.Tinybar) {\n            this._valueInTinybar = valueToLong(amount);\n        } else {\n            /** @type {BigNumber} */\n            let bigAmount;\n\n            if (Long.isLong(amount)) {\n                bigAmount = new BigNumber(amount.toString(10));\n            } else if (\n                BigNumber.isBigNumber(amount) ||\n                typeof amount === \"string\" ||\n                typeof amount === \"number\"\n            ) {\n                bigAmount = new BigNumber(amount);\n            } else {\n                bigAmount = new BigNumber(0);\n            }\n\n            /**\n             * @type {BigNumber}\n             */\n            this._valueInTinybar = bigAmount.multipliedBy(unit._tinybar);\n        }\n        if (!this._valueInTinybar.isInteger()) {\n            throw new Error(\"Hbar in tinybars contains decimals\");\n        }\n    }\n\n    /**\n     * @param {number | Long | BigNumber} amount\n     * @param {HbarUnit} unit\n     * @returns {Hbar}\n     */\n    static from(amount, unit) {\n        return new Hbar(amount, unit);\n    }\n\n    /**\n     * @param {number | Long | string | BigNumber} amount\n     * @returns {Hbar}\n     */\n    static fromTinybars(amount) {\n        if (typeof amount === \"string\") {\n            return this.fromString(amount, HbarUnit.Tinybar);\n        }\n        return new Hbar(amount, HbarUnit.Tinybar);\n    }\n\n    /**\n     * @param {string} str\n     * @param {HbarUnit=} unit\n     * @returns {Hbar}\n     */\n    static fromString(str, unit = HbarUnit.Hbar) {\n        const pattern = /^((?:\\+|-)?\\d+(?:\\.\\d+)?)(?: (tℏ|μℏ|mℏ|ℏ|kℏ|Mℏ|Gℏ))?$/;\n        if (pattern.test(str)) {\n            let [amount, symbol] = str.split(\" \");\n            if (symbol != null) {\n                unit = HbarUnit.fromString(symbol);\n            }\n            return new Hbar(new BigNumber(amount), unit);\n        } else {\n            throw new Error(\"invalid argument provided\");\n        }\n    }\n\n    /**\n     * @param {HbarUnit} unit\n     * @returns {BigNumber}\n     */\n    to(unit) {\n        return this._valueInTinybar.dividedBy(unit._tinybar);\n    }\n\n    /**\n     * @returns {BigNumber}\n     */\n    toBigNumber() {\n        return this.to(HbarUnit.Hbar);\n    }\n\n    /**\n     * @returns {Long}\n     */\n    toTinybars() {\n        return Long.fromValue(this._valueInTinybar.toFixed());\n    }\n\n    /**\n     * @returns {Hbar}\n     */\n    negated() {\n        return Hbar.fromTinybars(this._valueInTinybar.negated());\n    }\n\n    /**\n     * @param {HbarUnit=} unit\n     * @returns {string}\n     */\n    toString(unit) {\n        if (unit != null) {\n            return `${this._valueInTinybar\n                .dividedBy(unit._tinybar)\n                .toString()} ${unit._symbol}`;\n        }\n\n        if (\n            this._valueInTinybar.isLessThan(10000) &&\n            this._valueInTinybar.isGreaterThan(-10000)\n        ) {\n            return `${this._valueInTinybar.toFixed()} ${\n                HbarUnit.Tinybar._symbol\n            }`;\n        }\n\n        return `${this.to(HbarUnit.Hbar).toString()} ${HbarUnit.Hbar._symbol}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}