{"ast":null,"code":"\"use strict\";\n\nmodule.exports = pool;\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\n\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\n\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\n\nfunction pool(alloc, slice, size) {\n  var SIZE = size || 8192;\n  var MAX = SIZE >>> 1;\n  var slab = null;\n  var offset = SIZE;\n  return function pool_alloc(size) {\n    if (size < 1 || size > MAX) return alloc(size);\n\n    if (offset + size > SIZE) {\n      slab = alloc(SIZE);\n      offset = 0;\n    }\n\n    var buf = slice.call(slab, offset, offset += size);\n    if (offset & 7) // align to 32 bit\n      offset = (offset | 7) + 1;\n    return buf;\n  };\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@protobufjs/pool/index.js"],"names":["module","exports","pool","alloc","slice","size","SIZE","MAX","slab","offset","pool_alloc","buf","call"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,IAAT,CAAcC,KAAd,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;AAC9B,MAAIC,IAAI,GAAKD,IAAI,IAAI,IAArB;AACA,MAAIE,GAAG,GAAMD,IAAI,KAAK,CAAtB;AACA,MAAIE,IAAI,GAAK,IAAb;AACA,MAAIC,MAAM,GAAGH,IAAb;AACA,SAAO,SAASI,UAAT,CAAoBL,IAApB,EAA0B;AAC7B,QAAIA,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAGE,GAAvB,EACI,OAAOJ,KAAK,CAACE,IAAD,CAAZ;;AACJ,QAAII,MAAM,GAAGJ,IAAT,GAAgBC,IAApB,EAA0B;AACtBE,MAAAA,IAAI,GAAGL,KAAK,CAACG,IAAD,CAAZ;AACAG,MAAAA,MAAM,GAAG,CAAT;AACH;;AACD,QAAIE,GAAG,GAAGP,KAAK,CAACQ,IAAN,CAAWJ,IAAX,EAAiBC,MAAjB,EAAyBA,MAAM,IAAIJ,IAAnC,CAAV;AACA,QAAII,MAAM,GAAG,CAAb,EAAgB;AACZA,MAAAA,MAAM,GAAG,CAACA,MAAM,GAAG,CAAV,IAAe,CAAxB;AACJ,WAAOE,GAAP;AACH,GAXD;AAYH","sourcesContent":["\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"script"}