{"ast":null,"code":"/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").FreezeType} proto.FreezeType\n */\nexport default class FreezeType {\n  /**\n   * @hideconstructor\n   * @internal\n   * @param {number} code\n   */\n  constructor(code) {\n    /** @readonly */\n    this._code = code;\n    Object.freeze(this);\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    switch (this) {\n      case FreezeType.UnknownFreezeType:\n        return \"UNKNOWN_FREEZE_TYPE\";\n\n      case FreezeType.FreezeOnly:\n        return \"FREEZE_ONLY\";\n\n      case FreezeType.PrepareUpgrade:\n        return \"PREPARE_UPGRADE\";\n\n      case FreezeType.FreezeUpgrade:\n        return \"FREEZE_UPGRADE\";\n\n      case FreezeType.FreezeAbort:\n        return \"FREEZE_ABORT\";\n\n      case FreezeType.TelemetryUpgrade:\n        return \"TELEMETRY_UPGRADE\";\n\n      default:\n        return `UNKNOWN (${this._code})`;\n    }\n  }\n  /**\n   * @internal\n   * @param {number} code\n   * @returns {FreezeType}\n   */\n\n\n  static _fromCode(code) {\n    switch (code) {\n      case 0:\n        return FreezeType.UnknownFreezeType;\n\n      case 1:\n        return FreezeType.FreezeOnly;\n\n      case 2:\n        return FreezeType.PrepareUpgrade;\n\n      case 3:\n        return FreezeType.FreezeUpgrade;\n\n      case 4:\n        return FreezeType.FreezeAbort;\n\n      case 5:\n        return FreezeType.TelemetryUpgrade;\n\n      default:\n        throw new Error(`(BUG) Status.fromCode() does not handle code: ${code}`);\n    }\n  }\n  /**\n   * @returns {proto.FreezeType}\n   */\n\n\n  valueOf() {\n    return this._code;\n  }\n\n}\n/**\n * An (invalid) default value for this enum, to ensure the client explicitly sets\n * the intended type of freeze transaction.\n */\n\nFreezeType.UnknownFreezeType = new FreezeType(0);\n/**\n * Freezes the network at the specified time. The start_time field must be provided and\n * must reference a future time. Any values specified for the update_file and file_hash\n * fields will be ignored. This transaction does not perform any network changes or\n * upgrades and requires manual intervention to restart the network.\n */\n\nFreezeType.FreezeOnly = new FreezeType(1);\n/**\n * A non-freezing operation that initiates network wide preparation in advance of a\n * scheduled freeze upgrade. The update_file and file_hash fields must be provided and\n * valid. The start_time field may be omitted and any value present will be ignored.\n */\n\nFreezeType.PrepareUpgrade = new FreezeType(2);\n/**\n * Freezes the network at the specified time and performs the previously prepared\n * automatic upgrade across the entire network.\n */\n\nFreezeType.FreezeUpgrade = new FreezeType(3);\n/**\n * Aborts a pending network freeze operation.\n */\n\nFreezeType.FreezeAbort = new FreezeType(4);\n/**\n * Performs an immediate upgrade on auxilary services and containers providing\n * telemetry/metrics. Does not impact network operations.\n */\n\nFreezeType.TelemetryUpgrade = new FreezeType(5);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/FreezeType.js"],"names":["FreezeType","constructor","code","_code","Object","freeze","toString","UnknownFreezeType","FreezeOnly","PrepareUpgrade","FreezeUpgrade","FreezeAbort","TelemetryUpgrade","_fromCode","Error","valueOf"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,eAAe,MAAMA,UAAN,CAAiB;AAC5B;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd;AACA,SAAKC,KAAL,GAAaD,IAAb;AAEAE,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,YAAQ,IAAR;AACI,WAAKN,UAAU,CAACO,iBAAhB;AACI,eAAO,qBAAP;;AACJ,WAAKP,UAAU,CAACQ,UAAhB;AACI,eAAO,aAAP;;AACJ,WAAKR,UAAU,CAACS,cAAhB;AACI,eAAO,iBAAP;;AACJ,WAAKT,UAAU,CAACU,aAAhB;AACI,eAAO,gBAAP;;AACJ,WAAKV,UAAU,CAACW,WAAhB;AACI,eAAO,cAAP;;AACJ,WAAKX,UAAU,CAACY,gBAAhB;AACI,eAAO,mBAAP;;AACJ;AACI,eAAQ,YAAW,KAAKT,KAAM,GAA9B;AAdR;AAgBH;AAED;AACJ;AACA;AACA;AACA;;;AACoB,SAATU,SAAS,CAACX,IAAD,EAAO;AACnB,YAAQA,IAAR;AACI,WAAK,CAAL;AACI,eAAOF,UAAU,CAACO,iBAAlB;;AACJ,WAAK,CAAL;AACI,eAAOP,UAAU,CAACQ,UAAlB;;AACJ,WAAK,CAAL;AACI,eAAOR,UAAU,CAACS,cAAlB;;AACJ,WAAK,CAAL;AACI,eAAOT,UAAU,CAACU,aAAlB;;AACJ,WAAK,CAAL;AACI,eAAOV,UAAU,CAACW,WAAlB;;AACJ,WAAK,CAAL;AACI,eAAOX,UAAU,CAACY,gBAAlB;;AACJ;AACI,cAAM,IAAIE,KAAJ,CACD,iDAAgDZ,IAAK,EADpD,CAAN;AAdR;AAkBH;AAED;AACJ;AACA;;;AACIa,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKZ,KAAZ;AACH;;AAlE2B;AAqEhC;AACA;AACA;AACA;;AACAH,UAAU,CAACO,iBAAX,GAA+B,IAAIP,UAAJ,CAAe,CAAf,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,UAAU,CAACQ,UAAX,GAAwB,IAAIR,UAAJ,CAAe,CAAf,CAAxB;AAEA;AACA;AACA;AACA;AACA;;AACAA,UAAU,CAACS,cAAX,GAA4B,IAAIT,UAAJ,CAAe,CAAf,CAA5B;AAEA;AACA;AACA;AACA;;AACAA,UAAU,CAACU,aAAX,GAA2B,IAAIV,UAAJ,CAAe,CAAf,CAA3B;AAEA;AACA;AACA;;AACAA,UAAU,CAACW,WAAX,GAAyB,IAAIX,UAAJ,CAAe,CAAf,CAAzB;AAEA;AACA;AACA;AACA;;AACAA,UAAU,CAACY,gBAAX,GAA8B,IAAIZ,UAAJ,CAAe,CAAf,CAA9B","sourcesContent":["/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").FreezeType} proto.FreezeType\n */\n\nexport default class FreezeType {\n    /**\n     * @hideconstructor\n     * @internal\n     * @param {number} code\n     */\n    constructor(code) {\n        /** @readonly */\n        this._code = code;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        switch (this) {\n            case FreezeType.UnknownFreezeType:\n                return \"UNKNOWN_FREEZE_TYPE\";\n            case FreezeType.FreezeOnly:\n                return \"FREEZE_ONLY\";\n            case FreezeType.PrepareUpgrade:\n                return \"PREPARE_UPGRADE\";\n            case FreezeType.FreezeUpgrade:\n                return \"FREEZE_UPGRADE\";\n            case FreezeType.FreezeAbort:\n                return \"FREEZE_ABORT\";\n            case FreezeType.TelemetryUpgrade:\n                return \"TELEMETRY_UPGRADE\";\n            default:\n                return `UNKNOWN (${this._code})`;\n        }\n    }\n\n    /**\n     * @internal\n     * @param {number} code\n     * @returns {FreezeType}\n     */\n    static _fromCode(code) {\n        switch (code) {\n            case 0:\n                return FreezeType.UnknownFreezeType;\n            case 1:\n                return FreezeType.FreezeOnly;\n            case 2:\n                return FreezeType.PrepareUpgrade;\n            case 3:\n                return FreezeType.FreezeUpgrade;\n            case 4:\n                return FreezeType.FreezeAbort;\n            case 5:\n                return FreezeType.TelemetryUpgrade;\n            default:\n                throw new Error(\n                    `(BUG) Status.fromCode() does not handle code: ${code}`\n                );\n        }\n    }\n\n    /**\n     * @returns {proto.FreezeType}\n     */\n    valueOf() {\n        return this._code;\n    }\n}\n\n/**\n * An (invalid) default value for this enum, to ensure the client explicitly sets\n * the intended type of freeze transaction.\n */\nFreezeType.UnknownFreezeType = new FreezeType(0);\n\n/**\n * Freezes the network at the specified time. The start_time field must be provided and\n * must reference a future time. Any values specified for the update_file and file_hash\n * fields will be ignored. This transaction does not perform any network changes or\n * upgrades and requires manual intervention to restart the network.\n */\nFreezeType.FreezeOnly = new FreezeType(1);\n\n/**\n * A non-freezing operation that initiates network wide preparation in advance of a\n * scheduled freeze upgrade. The update_file and file_hash fields must be provided and\n * valid. The start_time field may be omitted and any value present will be ignored.\n */\nFreezeType.PrepareUpgrade = new FreezeType(2);\n\n/**\n * Freezes the network at the specified time and performs the previously prepared\n * automatic upgrade across the entire network.\n */\nFreezeType.FreezeUpgrade = new FreezeType(3);\n\n/**\n * Aborts a pending network freeze operation.\n */\nFreezeType.FreezeAbort = new FreezeType(4);\n\n/**\n * Performs an immediate upgrade on auxilary services and containers providing\n * telemetry/metrics. Does not impact network operations.\n */\nFreezeType.TelemetryUpgrade = new FreezeType(5);\n"]},"metadata":{},"sourceType":"module"}