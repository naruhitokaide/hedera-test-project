{"ast":null,"code":"import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport ContractId from \"./ContractId.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IContractGetBytecodeQuery} proto.IContractGetBytecodeQuery\n * @typedef {import(\"@hashgraph/proto\").IContractGetBytecodeResponse} proto.IContractGetBytecodeResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<Uint8Array>}\n */\n\nexport default class ContractByteCodeQuery extends Query {\n  /**\n   * @param {object} props\n   * @param {ContractId | string} [props.contractId]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @type {?ContractId}\n     * @private\n     */\n\n    this._contractId = null;\n\n    if (props.contractId != null) {\n      this.setContractId(props.contractId);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.IQuery} query\n   * @returns {ContractByteCodeQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const bytecode =\n    /** @type {proto.IContractGetBytecodeQuery} */\n    query.contractGetBytecode;\n    return new ContractByteCodeQuery({\n      contractId: bytecode.contractID != null ? ContractId._fromProtobuf(bytecode.contractID) : undefined\n    });\n  }\n  /**\n   * @returns {?ContractId}\n   */\n\n\n  get contractId() {\n    return this._contractId;\n  }\n  /**\n   * Set the contract ID for which the info is being requested.\n   *\n   * @param {ContractId | string} contractId\n   * @returns {ContractByteCodeQuery}\n   */\n\n\n  setContractId(contractId) {\n    this._contractId = typeof contractId === \"string\" ? ContractId.fromString(contractId) : contractId.clone();\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._contractId != null) {\n      this._contractId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.IQuery} request\n   * @returns {Promise<proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.smartContract.contractGetBytecode(request);\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IResponse} response\n   * @returns {proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const contractGetBytecodeResponse =\n    /** @type {proto.IContractGetBytecodeResponse} */\n    response.contractGetBytecodeResponse;\n    return (\n      /** @type {proto.IResponseHeader} */\n      contractGetBytecodeResponse.header\n    );\n  }\n  /**\n   * @protected\n   * @override\n   * @param {proto.IResponse} response\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  _mapResponse(response) {\n    const contractGetBytecodeResponse =\n    /** @type {proto.IContractGetBytecodeResponse} */\n    response.contractGetBytecodeResponse;\n    return Promise.resolve(contractGetBytecodeResponse.bytecode != null ? contractGetBytecodeResponse.bytecode : new Uint8Array());\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IQueryHeader} header\n   * @returns {proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      contractGetBytecode: {\n        header,\n        contractID: this._contractId != null ? this._contractId._toProtobuf() : null\n      }\n    };\n  }\n\n} // eslint-disable-next-line @typescript-eslint/unbound-method\n\nQUERY_REGISTRY.set(\"contractGetBytecode\", ContractByteCodeQuery._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/contract/ContractByteCodeQuery.js"],"names":["Query","QUERY_REGISTRY","ContractId","ContractByteCodeQuery","constructor","props","_contractId","contractId","setContractId","_fromProtobuf","query","bytecode","contractGetBytecode","contractID","undefined","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","smartContract","_mapResponseHeader","response","contractGetBytecodeResponse","header","_mapResponse","Promise","resolve","Uint8Array","_onMakeRequest","_toProtobuf","set"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,cAAhB,QAAsC,mBAAtC;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,qBAAN,SAAoCH,KAApC,CAA0C;AACrD;AACJ;AACA;AACA;AACII,EAAAA,WAAW,GAAa;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AACpB;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,WAAL,GAAmB,IAAnB;;AACA,QAAID,KAAK,CAACE,UAAN,IAAoB,IAAxB,EAA8B;AAC1B,WAAKC,aAAL,CAAmBH,KAAK,CAACE,UAAzB;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbE,aAAa,CAACC,KAAD,EAAQ;AACxB,UAAMC,QAAQ;AAAG;AACbD,IAAAA,KAAK,CAACE,mBADV;AAIA,WAAO,IAAIT,qBAAJ,CAA0B;AAC7BI,MAAAA,UAAU,EACNI,QAAQ,CAACE,UAAT,IAAuB,IAAvB,GACMX,UAAU,CAACO,aAAX,CAAyBE,QAAQ,CAACE,UAAlC,CADN,GAEMC;AAJmB,KAA1B,CAAP;AAMH;AAED;AACJ;AACA;;;AACkB,MAAVP,UAAU,GAAG;AACb,WAAO,KAAKD,WAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,aAAa,CAACD,UAAD,EAAa;AACtB,SAAKD,WAAL,GACI,OAAOC,UAAP,KAAsB,QAAtB,GACML,UAAU,CAACa,UAAX,CAAsBR,UAAtB,CADN,GAEMA,UAAU,CAACS,KAAX,EAHV;AAKA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,kBAAkB,CAACC,MAAD,EAAS;AACvB,QAAI,KAAKZ,WAAL,IAAoB,IAAxB,EAA8B;AAC1B,WAAKA,WAAL,CAAiBa,gBAAjB,CAAkCD,MAAlC;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,QAAQ,CAACC,OAAD,EAAUC,OAAV,EAAmB;AACvB,WAAOD,OAAO,CAACE,aAAR,CAAsBX,mBAAtB,CAA0CU,OAA1C,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AACzB,UAAMC,2BAA2B;AAC7B;AACID,IAAAA,QAAQ,CAACC,2BAFjB;AAIA;AAAO;AACHA,MAAAA,2BAA2B,CAACC;AADhC;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,YAAY,CAACH,QAAD,EAAW;AACnB,UAAMC,2BAA2B;AAC7B;AACID,IAAAA,QAAQ,CAACC,2BAFjB;AAKA,WAAOG,OAAO,CAACC,OAAR,CACHJ,2BAA2B,CAACf,QAA5B,IAAwC,IAAxC,GACMe,2BAA2B,CAACf,QADlC,GAEM,IAAIoB,UAAJ,EAHH,CAAP;AAKH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,cAAc,CAACL,MAAD,EAAS;AACnB,WAAO;AACHf,MAAAA,mBAAmB,EAAE;AACjBe,QAAAA,MADiB;AAEjBd,QAAAA,UAAU,EACN,KAAKP,WAAL,IAAoB,IAApB,GACM,KAAKA,WAAL,CAAiB2B,WAAjB,EADN,GAEM;AALO;AADlB,KAAP;AASH;;AAjIoD,C,CAoIzD;;AACAhC,cAAc,CAACiC,GAAf,CAAmB,qBAAnB,EAA0C/B,qBAAqB,CAACM,aAAhE","sourcesContent":["import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport ContractId from \"./ContractId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").IContractGetBytecodeQuery} proto.IContractGetBytecodeQuery\n * @typedef {import(\"@hashgraph/proto\").IContractGetBytecodeResponse} proto.IContractGetBytecodeResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<Uint8Array>}\n */\nexport default class ContractByteCodeQuery extends Query {\n    /**\n     * @param {object} props\n     * @param {ContractId | string} [props.contractId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?ContractId}\n         * @private\n         */\n        this._contractId = null;\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {ContractByteCodeQuery}\n     */\n    static _fromProtobuf(query) {\n        const bytecode = /** @type {proto.IContractGetBytecodeQuery} */ (\n            query.contractGetBytecode\n        );\n\n        return new ContractByteCodeQuery({\n            contractId:\n                bytecode.contractID != null\n                    ? ContractId._fromProtobuf(bytecode.contractID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the info is being requested.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractByteCodeQuery}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            typeof contractId === \"string\"\n                ? ContractId.fromString(contractId)\n                : contractId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._contractId != null) {\n            this._contractId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.contractGetBytecode(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const contractGetBytecodeResponse =\n            /** @type {proto.IContractGetBytecodeResponse} */ (\n                response.contractGetBytecodeResponse\n            );\n        return /** @type {proto.IResponseHeader} */ (\n            contractGetBytecodeResponse.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<Uint8Array>}\n     */\n    _mapResponse(response) {\n        const contractGetBytecodeResponse =\n            /** @type {proto.IContractGetBytecodeResponse} */ (\n                response.contractGetBytecodeResponse\n            );\n\n        return Promise.resolve(\n            contractGetBytecodeResponse.bytecode != null\n                ? contractGetBytecodeResponse.bytecode\n                : new Uint8Array()\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            contractGetBytecode: {\n                header,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"contractGetBytecode\", ContractByteCodeQuery._fromProtobuf);\n"]},"metadata":{},"sourceType":"module"}