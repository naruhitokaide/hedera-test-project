{"ast":null,"code":"// Originally sourced from:\n// https://github.com/MaiaVictor/eth-lib/blob/da0971f5b09964d9c8449975fa87933f0c9fef35/src/hash.js\n//  - added type declarations\n//  - switched to es6 module syntax\n//\n// Disable linting for entire file because it's nearly all pure JS\n// eslint-disable\nconst HEX_CHARS = \"0123456789abcdef\".split(\"\");\nconst KECCAK_PADDING = [1, 256, 65536, 16777216];\nconst SHIFT = [0, 8, 16, 24];\nconst RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n/**\n * @typedef {object} KeccakT\n * @property {number[]} blocks\n * @property {number} blockCount\n * @property {number} outputBlocks\n * @property {number[]} s\n * @property {number} start\n * @property {number} block\n * @property {boolean} reset\n * @property {number=} lastByteIndex\n */\n\n/** @type {(bits: number) => KeccakT} */\n\nconst Keccak = bits => ({\n  blocks: [],\n  reset: true,\n  block: 0,\n  start: 0,\n  blockCount: 1600 - (bits << 1) >> 5,\n  outputBlocks: bits >> 5,\n  // @ts-ignore\n  s: (s => [].concat(s, s, s, s, s))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n});\n/** @type {(state: KeccakT, message: string | number[]) => string} */\n\n\nconst update = (state,\n/** @type {string | number[]} */\nmessage) => {\n  var length = message.length,\n      blocks = state.blocks,\n      byteCount = state.blockCount << 2,\n      blockCount = state.blockCount,\n      outputBlocks = state.outputBlocks,\n      s = state.s,\n      index = 0,\n      i,\n      code; // update\n\n  while (index < length) {\n    if (state.reset) {\n      state.reset = false;\n      blocks[0] = state.block;\n\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n\n    if (typeof message !== \"string\") {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n      }\n    } else {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        code = message.charCodeAt(index);\n\n        if (code < 0x80) {\n          blocks[i >> 2] |= code << SHIFT[i++ & 3];\n        } else if (code < 0x800) {\n          blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n          blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        }\n      }\n    }\n\n    state.lastByteIndex = i;\n\n    if (i >= byteCount) {\n      state.start = i - byteCount;\n      state.block = blocks[blockCount];\n\n      for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n      }\n\n      f(s);\n      state.reset = true;\n    } else {\n      state.start = i;\n    }\n  } // finalize\n\n\n  i = state.lastByteIndex; // @ts-ignore\n\n  blocks[i >> 2] |= KECCAK_PADDING[i & 3];\n\n  if (state.lastByteIndex === byteCount) {\n    blocks[0] = blocks[blockCount];\n\n    for (i = 1; i < blockCount + 1; ++i) {\n      blocks[i] = 0;\n    }\n  }\n\n  blocks[blockCount - 1] |= 0x80000000;\n\n  for (i = 0; i < blockCount; ++i) {\n    s[i] ^= blocks[i];\n  }\n\n  f(s); // toString\n\n  var hex = \"\";\n  var block;\n  var j = 0;\n  i = 0;\n\n  while (j < outputBlocks) {\n    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n      block = s[i];\n      hex += HEX_CHARS[block >> 4 & 0x0f] + HEX_CHARS[block & 0x0f] + HEX_CHARS[block >> 12 & 0x0f] + HEX_CHARS[block >> 8 & 0x0f] + HEX_CHARS[block >> 20 & 0x0f] + HEX_CHARS[block >> 16 & 0x0f] + HEX_CHARS[block >> 28 & 0x0f] + HEX_CHARS[block >> 24 & 0x0f];\n    }\n\n    if (j % blockCount === 0) {\n      f(s);\n      i = 0;\n    }\n  } // @ts-ignore\n\n\n  return \"0x\" + hex;\n};\n/** @type {(s: number[]) => void} */\n\n\nconst f = s => {\n  var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n  for (n = 0; n < 48; n += 2) {\n    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n    h = c8 ^ (c2 << 1 | c3 >>> 31);\n    l = c9 ^ (c3 << 1 | c2 >>> 31);\n    s[0] ^= h;\n    s[1] ^= l;\n    s[10] ^= h;\n    s[11] ^= l;\n    s[20] ^= h;\n    s[21] ^= l;\n    s[30] ^= h;\n    s[31] ^= l;\n    s[40] ^= h;\n    s[41] ^= l;\n    h = c0 ^ (c4 << 1 | c5 >>> 31);\n    l = c1 ^ (c5 << 1 | c4 >>> 31);\n    s[2] ^= h;\n    s[3] ^= l;\n    s[12] ^= h;\n    s[13] ^= l;\n    s[22] ^= h;\n    s[23] ^= l;\n    s[32] ^= h;\n    s[33] ^= l;\n    s[42] ^= h;\n    s[43] ^= l;\n    h = c2 ^ (c6 << 1 | c7 >>> 31);\n    l = c3 ^ (c7 << 1 | c6 >>> 31);\n    s[4] ^= h;\n    s[5] ^= l;\n    s[14] ^= h;\n    s[15] ^= l;\n    s[24] ^= h;\n    s[25] ^= l;\n    s[34] ^= h;\n    s[35] ^= l;\n    s[44] ^= h;\n    s[45] ^= l;\n    h = c4 ^ (c8 << 1 | c9 >>> 31);\n    l = c5 ^ (c9 << 1 | c8 >>> 31);\n    s[6] ^= h;\n    s[7] ^= l;\n    s[16] ^= h;\n    s[17] ^= l;\n    s[26] ^= h;\n    s[27] ^= l;\n    s[36] ^= h;\n    s[37] ^= l;\n    s[46] ^= h;\n    s[47] ^= l;\n    h = c6 ^ (c0 << 1 | c1 >>> 31);\n    l = c7 ^ (c1 << 1 | c0 >>> 31);\n    s[8] ^= h;\n    s[9] ^= l;\n    s[18] ^= h;\n    s[19] ^= l;\n    s[28] ^= h;\n    s[29] ^= l;\n    s[38] ^= h;\n    s[39] ^= l;\n    s[48] ^= h;\n    s[49] ^= l;\n    b0 = s[0];\n    b1 = s[1];\n    b32 = s[11] << 4 | s[10] >>> 28;\n    b33 = s[10] << 4 | s[11] >>> 28;\n    b14 = s[20] << 3 | s[21] >>> 29;\n    b15 = s[21] << 3 | s[20] >>> 29;\n    b46 = s[31] << 9 | s[30] >>> 23;\n    b47 = s[30] << 9 | s[31] >>> 23;\n    b28 = s[40] << 18 | s[41] >>> 14;\n    b29 = s[41] << 18 | s[40] >>> 14;\n    b20 = s[2] << 1 | s[3] >>> 31;\n    b21 = s[3] << 1 | s[2] >>> 31;\n    b2 = s[13] << 12 | s[12] >>> 20;\n    b3 = s[12] << 12 | s[13] >>> 20;\n    b34 = s[22] << 10 | s[23] >>> 22;\n    b35 = s[23] << 10 | s[22] >>> 22;\n    b16 = s[33] << 13 | s[32] >>> 19;\n    b17 = s[32] << 13 | s[33] >>> 19;\n    b48 = s[42] << 2 | s[43] >>> 30;\n    b49 = s[43] << 2 | s[42] >>> 30;\n    b40 = s[5] << 30 | s[4] >>> 2;\n    b41 = s[4] << 30 | s[5] >>> 2;\n    b22 = s[14] << 6 | s[15] >>> 26;\n    b23 = s[15] << 6 | s[14] >>> 26;\n    b4 = s[25] << 11 | s[24] >>> 21;\n    b5 = s[24] << 11 | s[25] >>> 21;\n    b36 = s[34] << 15 | s[35] >>> 17;\n    b37 = s[35] << 15 | s[34] >>> 17;\n    b18 = s[45] << 29 | s[44] >>> 3;\n    b19 = s[44] << 29 | s[45] >>> 3;\n    b10 = s[6] << 28 | s[7] >>> 4;\n    b11 = s[7] << 28 | s[6] >>> 4;\n    b42 = s[17] << 23 | s[16] >>> 9;\n    b43 = s[16] << 23 | s[17] >>> 9;\n    b24 = s[26] << 25 | s[27] >>> 7;\n    b25 = s[27] << 25 | s[26] >>> 7;\n    b6 = s[36] << 21 | s[37] >>> 11;\n    b7 = s[37] << 21 | s[36] >>> 11;\n    b38 = s[47] << 24 | s[46] >>> 8;\n    b39 = s[46] << 24 | s[47] >>> 8;\n    b30 = s[8] << 27 | s[9] >>> 5;\n    b31 = s[9] << 27 | s[8] >>> 5;\n    b12 = s[18] << 20 | s[19] >>> 12;\n    b13 = s[19] << 20 | s[18] >>> 12;\n    b44 = s[29] << 7 | s[28] >>> 25;\n    b45 = s[28] << 7 | s[29] >>> 25;\n    b26 = s[38] << 8 | s[39] >>> 24;\n    b27 = s[39] << 8 | s[38] >>> 24;\n    b8 = s[48] << 14 | s[49] >>> 18;\n    b9 = s[49] << 14 | s[48] >>> 18;\n    s[0] = b0 ^ ~b2 & b4;\n    s[1] = b1 ^ ~b3 & b5;\n    s[10] = b10 ^ ~b12 & b14;\n    s[11] = b11 ^ ~b13 & b15;\n    s[20] = b20 ^ ~b22 & b24;\n    s[21] = b21 ^ ~b23 & b25;\n    s[30] = b30 ^ ~b32 & b34;\n    s[31] = b31 ^ ~b33 & b35;\n    s[40] = b40 ^ ~b42 & b44;\n    s[41] = b41 ^ ~b43 & b45;\n    s[2] = b2 ^ ~b4 & b6;\n    s[3] = b3 ^ ~b5 & b7;\n    s[12] = b12 ^ ~b14 & b16;\n    s[13] = b13 ^ ~b15 & b17;\n    s[22] = b22 ^ ~b24 & b26;\n    s[23] = b23 ^ ~b25 & b27;\n    s[32] = b32 ^ ~b34 & b36;\n    s[33] = b33 ^ ~b35 & b37;\n    s[42] = b42 ^ ~b44 & b46;\n    s[43] = b43 ^ ~b45 & b47;\n    s[4] = b4 ^ ~b6 & b8;\n    s[5] = b5 ^ ~b7 & b9;\n    s[14] = b14 ^ ~b16 & b18;\n    s[15] = b15 ^ ~b17 & b19;\n    s[24] = b24 ^ ~b26 & b28;\n    s[25] = b25 ^ ~b27 & b29;\n    s[34] = b34 ^ ~b36 & b38;\n    s[35] = b35 ^ ~b37 & b39;\n    s[44] = b44 ^ ~b46 & b48;\n    s[45] = b45 ^ ~b47 & b49;\n    s[6] = b6 ^ ~b8 & b0;\n    s[7] = b7 ^ ~b9 & b1;\n    s[16] = b16 ^ ~b18 & b10;\n    s[17] = b17 ^ ~b19 & b11;\n    s[26] = b26 ^ ~b28 & b20;\n    s[27] = b27 ^ ~b29 & b21;\n    s[36] = b36 ^ ~b38 & b30;\n    s[37] = b37 ^ ~b39 & b31;\n    s[46] = b46 ^ ~b48 & b40;\n    s[47] = b47 ^ ~b49 & b41;\n    s[8] = b8 ^ ~b0 & b2;\n    s[9] = b9 ^ ~b1 & b3;\n    s[18] = b18 ^ ~b10 & b12;\n    s[19] = b19 ^ ~b11 & b13;\n    s[28] = b28 ^ ~b20 & b22;\n    s[29] = b29 ^ ~b21 & b23;\n    s[38] = b38 ^ ~b30 & b32;\n    s[39] = b39 ^ ~b31 & b33;\n    s[48] = b48 ^ ~b40 & b42;\n    s[49] = b49 ^ ~b41 & b43;\n    s[0] ^= RC[n];\n    s[1] ^= RC[n + 1];\n  }\n};\n\nconst keccak = (\n/** @type {number} */\nbits) => (\n/** @type {string} */\nstr) => {\n  var msg;\n\n  if (str.slice(0, 2) === \"0x\") {\n    msg = [];\n\n    for (var i = 2, l = str.length; i < l; i += 2) msg.push(parseInt(str.slice(i, i + 2), 16));\n  } else {\n    msg = str;\n  } // @ts-ignore\n\n\n  return update(Keccak(bits, bits), msg);\n};\n/**\n * @type {(message: string) => string}\n */\n\n\nexport const keccak256 = keccak(256);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/cryptography/keccak.js"],"names":["HEX_CHARS","split","KECCAK_PADDING","SHIFT","RC","Keccak","bits","blocks","reset","block","start","blockCount","outputBlocks","s","concat","update","state","message","length","byteCount","index","i","code","charCodeAt","lastByteIndex","f","hex","j","h","l","n","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","b16","b17","b18","b19","b20","b21","b22","b23","b24","b25","b26","b27","b28","b29","b30","b31","b32","b33","b34","b35","b36","b37","b38","b39","b40","b41","b42","b43","b44","b45","b46","b47","b48","b49","keccak","str","msg","slice","push","parseInt","keccak256"],"mappings":"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","sourcesContent":["// Originally sourced from:\n// https://github.com/MaiaVictor/eth-lib/blob/da0971f5b09964d9c8449975fa87933f0c9fef35/src/hash.js\n//  - added type declarations\n//  - switched to es6 module syntax\n//\n// Disable linting for entire file because it's nearly all pure JS\n// eslint-disable\n\nconst HEX_CHARS = \"0123456789abcdef\".split(\"\");\nconst KECCAK_PADDING = [1, 256, 65536, 16777216];\nconst SHIFT = [0, 8, 16, 24];\nconst RC = [\n    1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0,\n    2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0,\n    2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905,\n    2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0,\n    2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648,\n    2147483649, 0, 2147516424, 2147483648,\n];\n\n/**\n * @typedef {object} KeccakT\n * @property {number[]} blocks\n * @property {number} blockCount\n * @property {number} outputBlocks\n * @property {number[]} s\n * @property {number} start\n * @property {number} block\n * @property {boolean} reset\n * @property {number=} lastByteIndex\n */\n\n/** @type {(bits: number) => KeccakT} */\nconst Keccak = (bits) => ({\n    blocks: [],\n    reset: true,\n    block: 0,\n    start: 0,\n    blockCount: (1600 - (bits << 1)) >> 5,\n    outputBlocks: bits >> 5,\n    // @ts-ignore\n    s: ((s) => [].concat(s, s, s, s, s))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n});\n\n/** @type {(state: KeccakT, message: string | number[]) => string} */\nconst update = (state, /** @type {string | number[]} */ message) => {\n    var length = message.length,\n        blocks = state.blocks,\n        byteCount = state.blockCount << 2,\n        blockCount = state.blockCount,\n        outputBlocks = state.outputBlocks,\n        s = state.s,\n        index = 0,\n        i,\n        code;\n\n    // update\n    while (index < length) {\n        if (state.reset) {\n            state.reset = false;\n            blocks[0] = state.block;\n            for (i = 1; i < blockCount + 1; ++i) {\n                blocks[i] = 0;\n            }\n        }\n        if (typeof message !== \"string\") {\n            for (i = state.start; index < length && i < byteCount; ++index) {\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        } else {\n            for (i = state.start; index < length && i < byteCount; ++index) {\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                } else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |=\n                        (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                } else {\n                    code =\n                        0x10000 +\n                        (((code & 0x3ff) << 10) |\n                            (message.charCodeAt(++index) & 0x3ff));\n                    blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |=\n                        (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |=\n                        (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        state.lastByteIndex = i;\n        if (i >= byteCount) {\n            state.start = i - byteCount;\n            state.block = blocks[blockCount];\n            for (i = 0; i < blockCount; ++i) {\n                s[i] ^= blocks[i];\n            }\n            f(s);\n            state.reset = true;\n        } else {\n            state.start = i;\n        }\n    }\n\n    // finalize\n    i = state.lastByteIndex;\n    // @ts-ignore\n    blocks[i >> 2] |= KECCAK_PADDING[i & 3];\n    if (state.lastByteIndex === byteCount) {\n        blocks[0] = blocks[blockCount];\n        for (i = 1; i < blockCount + 1; ++i) {\n            blocks[i] = 0;\n        }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n    }\n    f(s);\n\n    // toString\n    var hex = \"\";\n    var block;\n    var j = 0;\n    i = 0;\n    while (j < outputBlocks) {\n        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n            block = s[i];\n            hex +=\n                HEX_CHARS[(block >> 4) & 0x0f] +\n                HEX_CHARS[block & 0x0f] +\n                HEX_CHARS[(block >> 12) & 0x0f] +\n                HEX_CHARS[(block >> 8) & 0x0f] +\n                HEX_CHARS[(block >> 20) & 0x0f] +\n                HEX_CHARS[(block >> 16) & 0x0f] +\n                HEX_CHARS[(block >> 28) & 0x0f] +\n                HEX_CHARS[(block >> 24) & 0x0f];\n        }\n        if (j % blockCount === 0) {\n            f(s);\n            i = 0;\n        }\n    }\n    // @ts-ignore\n    return \"0x\" + hex;\n};\n\n/** @type {(s: number[]) => void} */\nconst f = (s) => {\n    var h,\n        l,\n        n,\n        c0,\n        c1,\n        c2,\n        c3,\n        c4,\n        c5,\n        c6,\n        c7,\n        c8,\n        c9,\n        b0,\n        b1,\n        b2,\n        b3,\n        b4,\n        b5,\n        b6,\n        b7,\n        b8,\n        b9,\n        b10,\n        b11,\n        b12,\n        b13,\n        b14,\n        b15,\n        b16,\n        b17,\n        b18,\n        b19,\n        b20,\n        b21,\n        b22,\n        b23,\n        b24,\n        b25,\n        b26,\n        b27,\n        b28,\n        b29,\n        b30,\n        b31,\n        b32,\n        b33,\n        b34,\n        b35,\n        b36,\n        b37,\n        b38,\n        b39,\n        b40,\n        b41,\n        b42,\n        b43,\n        b44,\n        b45,\n        b46,\n        b47,\n        b48,\n        b49;\n\n    for (n = 0; n < 48; n += 2) {\n        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n        h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n        l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n        s[0] ^= h;\n        s[1] ^= l;\n        s[10] ^= h;\n        s[11] ^= l;\n        s[20] ^= h;\n        s[21] ^= l;\n        s[30] ^= h;\n        s[31] ^= l;\n        s[40] ^= h;\n        s[41] ^= l;\n        h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n        l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n        s[2] ^= h;\n        s[3] ^= l;\n        s[12] ^= h;\n        s[13] ^= l;\n        s[22] ^= h;\n        s[23] ^= l;\n        s[32] ^= h;\n        s[33] ^= l;\n        s[42] ^= h;\n        s[43] ^= l;\n        h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n        l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n        s[4] ^= h;\n        s[5] ^= l;\n        s[14] ^= h;\n        s[15] ^= l;\n        s[24] ^= h;\n        s[25] ^= l;\n        s[34] ^= h;\n        s[35] ^= l;\n        s[44] ^= h;\n        s[45] ^= l;\n        h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n        l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n        s[6] ^= h;\n        s[7] ^= l;\n        s[16] ^= h;\n        s[17] ^= l;\n        s[26] ^= h;\n        s[27] ^= l;\n        s[36] ^= h;\n        s[37] ^= l;\n        s[46] ^= h;\n        s[47] ^= l;\n        h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n        l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n        s[8] ^= h;\n        s[9] ^= l;\n        s[18] ^= h;\n        s[19] ^= l;\n        s[28] ^= h;\n        s[29] ^= l;\n        s[38] ^= h;\n        s[39] ^= l;\n        s[48] ^= h;\n        s[49] ^= l;\n\n        b0 = s[0];\n        b1 = s[1];\n        b32 = (s[11] << 4) | (s[10] >>> 28);\n        b33 = (s[10] << 4) | (s[11] >>> 28);\n        b14 = (s[20] << 3) | (s[21] >>> 29);\n        b15 = (s[21] << 3) | (s[20] >>> 29);\n        b46 = (s[31] << 9) | (s[30] >>> 23);\n        b47 = (s[30] << 9) | (s[31] >>> 23);\n        b28 = (s[40] << 18) | (s[41] >>> 14);\n        b29 = (s[41] << 18) | (s[40] >>> 14);\n        b20 = (s[2] << 1) | (s[3] >>> 31);\n        b21 = (s[3] << 1) | (s[2] >>> 31);\n        b2 = (s[13] << 12) | (s[12] >>> 20);\n        b3 = (s[12] << 12) | (s[13] >>> 20);\n        b34 = (s[22] << 10) | (s[23] >>> 22);\n        b35 = (s[23] << 10) | (s[22] >>> 22);\n        b16 = (s[33] << 13) | (s[32] >>> 19);\n        b17 = (s[32] << 13) | (s[33] >>> 19);\n        b48 = (s[42] << 2) | (s[43] >>> 30);\n        b49 = (s[43] << 2) | (s[42] >>> 30);\n        b40 = (s[5] << 30) | (s[4] >>> 2);\n        b41 = (s[4] << 30) | (s[5] >>> 2);\n        b22 = (s[14] << 6) | (s[15] >>> 26);\n        b23 = (s[15] << 6) | (s[14] >>> 26);\n        b4 = (s[25] << 11) | (s[24] >>> 21);\n        b5 = (s[24] << 11) | (s[25] >>> 21);\n        b36 = (s[34] << 15) | (s[35] >>> 17);\n        b37 = (s[35] << 15) | (s[34] >>> 17);\n        b18 = (s[45] << 29) | (s[44] >>> 3);\n        b19 = (s[44] << 29) | (s[45] >>> 3);\n        b10 = (s[6] << 28) | (s[7] >>> 4);\n        b11 = (s[7] << 28) | (s[6] >>> 4);\n        b42 = (s[17] << 23) | (s[16] >>> 9);\n        b43 = (s[16] << 23) | (s[17] >>> 9);\n        b24 = (s[26] << 25) | (s[27] >>> 7);\n        b25 = (s[27] << 25) | (s[26] >>> 7);\n        b6 = (s[36] << 21) | (s[37] >>> 11);\n        b7 = (s[37] << 21) | (s[36] >>> 11);\n        b38 = (s[47] << 24) | (s[46] >>> 8);\n        b39 = (s[46] << 24) | (s[47] >>> 8);\n        b30 = (s[8] << 27) | (s[9] >>> 5);\n        b31 = (s[9] << 27) | (s[8] >>> 5);\n        b12 = (s[18] << 20) | (s[19] >>> 12);\n        b13 = (s[19] << 20) | (s[18] >>> 12);\n        b44 = (s[29] << 7) | (s[28] >>> 25);\n        b45 = (s[28] << 7) | (s[29] >>> 25);\n        b26 = (s[38] << 8) | (s[39] >>> 24);\n        b27 = (s[39] << 8) | (s[38] >>> 24);\n        b8 = (s[48] << 14) | (s[49] >>> 18);\n        b9 = (s[49] << 14) | (s[48] >>> 18);\n\n        s[0] = b0 ^ (~b2 & b4);\n        s[1] = b1 ^ (~b3 & b5);\n        s[10] = b10 ^ (~b12 & b14);\n        s[11] = b11 ^ (~b13 & b15);\n        s[20] = b20 ^ (~b22 & b24);\n        s[21] = b21 ^ (~b23 & b25);\n        s[30] = b30 ^ (~b32 & b34);\n        s[31] = b31 ^ (~b33 & b35);\n        s[40] = b40 ^ (~b42 & b44);\n        s[41] = b41 ^ (~b43 & b45);\n        s[2] = b2 ^ (~b4 & b6);\n        s[3] = b3 ^ (~b5 & b7);\n        s[12] = b12 ^ (~b14 & b16);\n        s[13] = b13 ^ (~b15 & b17);\n        s[22] = b22 ^ (~b24 & b26);\n        s[23] = b23 ^ (~b25 & b27);\n        s[32] = b32 ^ (~b34 & b36);\n        s[33] = b33 ^ (~b35 & b37);\n        s[42] = b42 ^ (~b44 & b46);\n        s[43] = b43 ^ (~b45 & b47);\n        s[4] = b4 ^ (~b6 & b8);\n        s[5] = b5 ^ (~b7 & b9);\n        s[14] = b14 ^ (~b16 & b18);\n        s[15] = b15 ^ (~b17 & b19);\n        s[24] = b24 ^ (~b26 & b28);\n        s[25] = b25 ^ (~b27 & b29);\n        s[34] = b34 ^ (~b36 & b38);\n        s[35] = b35 ^ (~b37 & b39);\n        s[44] = b44 ^ (~b46 & b48);\n        s[45] = b45 ^ (~b47 & b49);\n        s[6] = b6 ^ (~b8 & b0);\n        s[7] = b7 ^ (~b9 & b1);\n        s[16] = b16 ^ (~b18 & b10);\n        s[17] = b17 ^ (~b19 & b11);\n        s[26] = b26 ^ (~b28 & b20);\n        s[27] = b27 ^ (~b29 & b21);\n        s[36] = b36 ^ (~b38 & b30);\n        s[37] = b37 ^ (~b39 & b31);\n        s[46] = b46 ^ (~b48 & b40);\n        s[47] = b47 ^ (~b49 & b41);\n        s[8] = b8 ^ (~b0 & b2);\n        s[9] = b9 ^ (~b1 & b3);\n        s[18] = b18 ^ (~b10 & b12);\n        s[19] = b19 ^ (~b11 & b13);\n        s[28] = b28 ^ (~b20 & b22);\n        s[29] = b29 ^ (~b21 & b23);\n        s[38] = b38 ^ (~b30 & b32);\n        s[39] = b39 ^ (~b31 & b33);\n        s[48] = b48 ^ (~b40 & b42);\n        s[49] = b49 ^ (~b41 & b43);\n\n        s[0] ^= RC[n];\n        s[1] ^= RC[n + 1];\n    }\n};\n\nconst keccak = (/** @type {number} */ bits) => (/** @type {string} */ str) => {\n    var msg;\n    if (str.slice(0, 2) === \"0x\") {\n        msg = [];\n        for (var i = 2, l = str.length; i < l; i += 2)\n            msg.push(parseInt(str.slice(i, i + 2), 16));\n    } else {\n        msg = str;\n    }\n    // @ts-ignore\n    return update(Keccak(bits, bits), msg);\n};\n\n/**\n * @type {(message: string) => string}\n */\nexport const keccak256 = keccak(256);\n"]},"metadata":{},"sourceType":"module"}