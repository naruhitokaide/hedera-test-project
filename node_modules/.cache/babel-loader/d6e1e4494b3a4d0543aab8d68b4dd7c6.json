{"ast":null,"code":"import ContractFunctionSelector, { ArgumentType } from \"./ContractFunctionSelector.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport BigNumber from \"bignumber.js\";\nimport * as util from \"../util.js\";\nexport default class ContractFunctionParameters {\n  constructor() {\n    /**\n     * @type {ContractFunctionSelector}\n     */\n    this._selector = new ContractFunctionSelector();\n    /**\n     * @type {import(\"./ContractFunctionSelector.js\").Argument[]}\n     */\n\n    this._arguments = [];\n  }\n  /**\n   * @param {string} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addString(value) {\n    this._selector.addString();\n\n    return this._addParam(value, true);\n  }\n  /**\n   * @param {string[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addStringArray(value) {\n    this._selector.addStringArray();\n\n    return this._addParam(value, true);\n  }\n  /**\n   * @param {Uint8Array} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addBytes(value) {\n    this._selector.addBytes();\n\n    return this._addParam(value, true);\n  }\n  /**\n   * @param {Uint8Array} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addBytes32(value) {\n    if (value.length !== 32) {\n      throw new Error(`addBytes32 expected array to be of length 32, but received ${value.length}`);\n    }\n\n    this._selector.addBytes32();\n\n    return this._addParam(value, false);\n  }\n  /**\n   * @param {Uint8Array[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addBytesArray(value) {\n    this._selector.addBytesArray();\n\n    return this._addParam(value, true);\n  }\n  /**\n   * @param {Uint8Array[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addBytes32Array(value) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [_, entry] of value.entries()) {\n      if (entry.length !== 32) {\n        throw new Error(`addBytes32 expected array to be of length 32, but received ${entry.length}`);\n      }\n    }\n\n    this._selector.addBytes32Array();\n\n    return this._addParam(value, true);\n  }\n  /**\n   * @param {boolean} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addBool(value) {\n    this._selector.addBool();\n\n    return this._addParam(value, false);\n  }\n  /**\n   * @param {number} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addInt8(value) {\n    this._selector.addInt8();\n\n    return this._addParam(util.convertToBigNumber(value), false);\n  }\n  /**\n   * @param {number} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addInt32(value) {\n    this._selector.addInt32();\n\n    return this._addParam(util.convertToBigNumber(value), false);\n  }\n  /**\n   * @param {BigNumber} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addInt64(value) {\n    this._selector.addInt64();\n\n    return this._addParam(util.convertToBigNumber(value), false);\n  }\n  /**\n   * @param {BigNumber} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addInt256(value) {\n    this._selector.addInt256();\n\n    return this._addParam(util.convertToBigNumber(value), false);\n  }\n  /**\n   * @param {number[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addInt8Array(value) {\n    this._selector.addInt8Array();\n\n    return this._addParam(util.convertToBigNumberArray(value), true);\n  }\n  /**\n   * @param {number[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addInt32Array(value) {\n    this._selector.addInt32Array();\n\n    return this._addParam(util.convertToBigNumberArray(value), true);\n  }\n  /**\n   * @param {BigNumber[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addInt64Array(value) {\n    this._selector.addInt64Array();\n\n    return this._addParam(util.convertToBigNumberArray(value), true);\n  }\n  /**\n   * @param {BigNumber[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addInt256Array(value) {\n    this._selector.addInt256Array();\n\n    console.log(\"asdf\");\n    return this._addParam(util.convertToBigNumberArray(value), true);\n  }\n  /**\n   * @param {number} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addUint8(value) {\n    this._selector.addUint8();\n\n    return this._addParam(util.convertToBigNumber(value), false);\n  }\n  /**\n   * @param {number} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addUint32(value) {\n    this._selector.addUint32();\n\n    return this._addParam(util.convertToBigNumber(value), false);\n  }\n  /**\n   * @param {BigNumber} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addUint64(value) {\n    this._selector.addUint64();\n\n    return this._addParam(util.convertToBigNumber(value), false);\n  }\n  /**\n   * @param {BigNumber | number} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addUint256(value) {\n    this._selector.addUint256();\n\n    return this._addParam(util.convertToBigNumber(value), false);\n  }\n  /**\n   * @param {number[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addUint8Array(value) {\n    this._selector.addUint8Array();\n\n    return this._addParam(util.convertToBigNumberArray(value), true);\n  }\n  /**\n   * @param {number[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addUint32Array(value) {\n    this._selector.addUint32Array();\n\n    return this._addParam(util.convertToBigNumberArray(value), true);\n  }\n  /**\n   * @param {BigNumber[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addUint64Array(value) {\n    this._selector.addUint64Array();\n\n    return this._addParam(util.convertToBigNumberArray(value), true);\n  }\n  /**\n   * @param {BigNumber[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addUint256Array(value) {\n    this._selector.addUint256Array();\n\n    return this._addParam(util.convertToBigNumberArray(value), true);\n  }\n  /**\n   * @param {string} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addAddress(value) {\n    // Allow `0x` prefix\n    if (value.length !== 40 && value.length !== 42) {\n      throw new Error(\"`address` type requires parameter to be 40 or 42 characters\");\n    }\n\n    const par = value.length === 40 ? hex.decode(value) : hex.decode(value.substring(2));\n\n    this._selector.addAddress();\n\n    return this._addParam(par, false);\n  }\n  /**\n   * @param {string[]} value\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addAddressArray(value) {\n    /**\n     * @type {Uint8Array[]}\n     */\n    const par = []; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    for (const [_, entry] of value.entries()) {\n      if (entry.length !== 40 && entry.length !== 42) {\n        throw new Error(\"`address` type requires parameter to be 40 or 42 characters\");\n      }\n\n      const buf = entry.length === 40 ? hex.decode(entry) : hex.decode(entry.substring(2));\n      par.push(buf);\n    }\n\n    this._selector.addAddressArray();\n\n    return this._addParam(par, true);\n  }\n  /**\n   * @param {string} address\n   * @param {ContractFunctionSelector} selector\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  addFunction(address, selector) {\n    const addressParam = hex.decode(address);\n\n    const functionSelector = selector._build();\n\n    if (addressParam.length !== 20) {\n      throw new Error(\"`function` type requires parameter `address` to be exactly 20 bytes\");\n    }\n\n    this._selector.addFunction();\n\n    const proto = new Uint8Array(24);\n    proto.set(addressParam, 0);\n    proto.set(functionSelector, 20);\n    return this._addParam(proto, false);\n  }\n  /**\n   * @internal\n   * @param {string | boolean | number | Uint8Array | BigNumber | string[] | boolean[] | number[] | Uint8Array[] | BigNumber[]} param\n   * @param {boolean} dynamic\n   * @returns {ContractFunctionParameters}\n   */\n\n\n  _addParam(param, dynamic) {\n    const index = this._selector._paramTypes.length - 1;\n    const value = argumentToBytes(param, this._selector._paramTypes[index]);\n\n    this._arguments.push({\n      dynamic,\n      value\n    });\n\n    return this;\n  }\n  /**\n   * @internal\n   * @param {string=} name\n   * @returns {Uint8Array}\n   */\n\n\n  _build(name) {\n    const includeId = name != null;\n    const nameOffset = includeId ? 4 : 0;\n    const length = this._arguments.length === 0 ? nameOffset : this._arguments.length * 32 + this._arguments.map(arg => arg.dynamic ? arg.value.length : 0).reduce((sum, value) => sum + value) + nameOffset;\n    const func = new Uint8Array(length);\n\n    if (includeId) {\n      func.set(this._selector._build(name), 0);\n    }\n\n    let offset = 32 * this._arguments.length;\n\n    for (const [i, {\n      dynamic,\n      value\n    }] of this._arguments.entries()) {\n      if (dynamic) {\n        const view = util.safeView(func, nameOffset + i * 32 + 28);\n        view.setUint32(0, offset);\n        func.set(value, view.getUint32(0) + nameOffset);\n        offset += value.length;\n      } else {\n        func.set(value, nameOffset + i * 32);\n      }\n    }\n\n    return func;\n  }\n\n}\n/**\n * @param {string | boolean | number | Uint8Array | BigNumber | string[] | boolean[] | number[] | Uint8Array[] | BigNumber[]} param\n * @param {import(\"./ContractFunctionSelector.js\").SolidityType} ty\n * @returns {Uint8Array}\n */\n\nfunction argumentToBytes(param, ty) {\n  let value = new Uint8Array(32);\n  let valueView = util.safeView(value);\n  /** @type {Uint8Array} */\n\n  let par;\n\n  if (ty.array) {\n    if (!Array.isArray(param)) {\n      throw new TypeError(\"SolidityType indicates type is array, but parameter is not an array\");\n    }\n    /**\n     * @type {Uint8Array[]}\n     */\n\n\n    const values = []; // Generic over any type of array\n    // Destructuring required so the first variable must be assigned\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    for (const [_, p] of param.entries()) {\n      const arg = argumentToBytes(p, {\n        ty: ty.ty,\n        array: false\n      });\n      values.push(arg);\n    }\n\n    const totalLengthOfValues = values.map(a => a.length).reduce((total, current) => total + current);\n\n    switch (ty.ty) {\n      case ArgumentType.uint8:\n      case ArgumentType.int8:\n      case ArgumentType.uint16:\n      case ArgumentType.int16:\n      case ArgumentType.uint32:\n      case ArgumentType.int32:\n      case ArgumentType.uint64:\n      case ArgumentType.int64:\n      case ArgumentType.uint256:\n      case ArgumentType.int256:\n      case ArgumentType.bool:\n      case ArgumentType.bytes32:\n      case ArgumentType.address:\n      case ArgumentType.func:\n        value = new Uint8Array(totalLengthOfValues + 32);\n        break;\n\n      case ArgumentType.bytes:\n      case ArgumentType.string:\n        value = new Uint8Array(values.length * 32 + totalLengthOfValues + 32);\n        break;\n\n      default:\n        throw new TypeError(`Expected param type to be ArgumentType, but received ${ty.ty}`);\n    }\n\n    valueView = util.safeView(value, 28);\n    valueView.setUint32(0, values.length);\n    let offset = 32 * values.length;\n\n    for (const [i, e] of values.entries()) {\n      switch (ty.ty) {\n        case ArgumentType.uint8:\n        case ArgumentType.int8:\n        case ArgumentType.uint16:\n        case ArgumentType.int16:\n        case ArgumentType.uint32:\n        case ArgumentType.int32:\n        case ArgumentType.uint64:\n        case ArgumentType.int64:\n        case ArgumentType.uint256:\n        case ArgumentType.int256:\n        case ArgumentType.bool:\n        case ArgumentType.bytes32:\n        case ArgumentType.address:\n        case ArgumentType.func:\n          value.set(e, i * 32 + 32);\n          break;\n\n        case ArgumentType.bytes:\n        case ArgumentType.string:\n          // eslint-disable-next-line no-case-declarations\n          const view = util.safeView(value, (i + 1) * 32 + 28);\n          view.setUint32(0, offset);\n          value.set(e, view.getUint32(0) + 32);\n          offset += e.length;\n          break;\n\n        default:\n          throw new TypeError(`Expected param type to be ArgumentType, but received ${ty.ty}`);\n      }\n    }\n\n    return value;\n  }\n\n  switch (ty.ty) {\n    case ArgumentType.uint8:\n      numberToBytes(\n      /** @type {number | BigNumber } */\n      param, 31, valueView.setUint8.bind(valueView));\n      return value;\n\n    case ArgumentType.int8:\n      numberToBytes(\n      /** @type {number | BigNumber } */\n      param, 31, valueView.setInt8.bind(valueView));\n      return value;\n\n    case ArgumentType.uint16:\n      numberToBytes(\n      /** @type {number | BigNumber } */\n      param, 30, valueView.setUint16.bind(valueView));\n      return value;\n\n    case ArgumentType.int16:\n      numberToBytes(\n      /** @type {number | BigNumber } */\n      param, 30, valueView.setInt16.bind(valueView));\n      return value;\n\n    case ArgumentType.uint32:\n      numberToBytes(\n      /** @type {number | BigNumber } */\n      param, 28, valueView.setUint32.bind(valueView));\n      return value;\n\n    case ArgumentType.int32:\n      numberToBytes(\n      /** @type {number | BigNumber } */\n      param, 28, valueView.setInt32.bind(valueView));\n      return value;\n    // int64, uint64, and int256 both expect the parameter to be an Uint8Array instead of number\n\n    case ArgumentType.uint64:\n    case ArgumentType.int64:\n      if (BigNumber.isBigNumber(param)) {\n        // eslint-disable-next-line no-case-declarations\n        let par = param.toString(16);\n\n        if (par.length > 16) {\n          throw new TypeError(\"uint64/int64 requires BigNumber to be less than or equal to 8 bytes\");\n        } else if (!param.isInteger()) {\n          throw new TypeError(\"uint64/int64 requires BigNumber to be an integer\");\n        }\n\n        if (par.length % 2 === 1) {\n          par = `0${par}`;\n        } // eslint-disable-next-line no-case-declarations\n\n\n        const buf = hex.decode(par);\n        value.set(buf, 32 - buf.length);\n      }\n\n      return value;\n\n    case ArgumentType.int256:\n    case ArgumentType.uint256:\n      if (BigNumber.isBigNumber(param)) {\n        let par = param.toString(16);\n\n        if (par.length % 2 === 1) {\n          par = `0${par}`;\n        }\n\n        const buf = hex.decode(par);\n        value.set(buf, 32 - buf.length);\n      }\n\n      return value;\n\n    case ArgumentType.address:\n      value.set(\n      /** @type {Uint8Array} */\n      param, 32 - 20);\n      return value;\n\n    case ArgumentType.bool:\n      value[31] =\n      /** @type {boolean} */\n      param ? 1 : 0;\n      return value;\n\n    case ArgumentType.func:\n      value.set(\n      /** @type {Uint8Array} */\n      param, 32 - 24);\n      return value;\n\n    case ArgumentType.bytes32:\n      value.set(\n      /** @type {Uint8Array} */\n      param, 0);\n      return value;\n    // Bytes should have not the length already encoded\n    // JS String type is encoded as UTF-16 whilst Solidity `string` type is UTF-8 encoded.\n    // So if will assume is already correctly updated to being a Uint8Array of UTF-8 string\n\n    case ArgumentType.bytes:\n    case ArgumentType.string:\n      // If value is of type string, encode it in UTF-8 format and conver it to Uint8Array\n      // Required because JS Strings are UTF-16\n      // eslint-disable-next-line no-case-declarations\n      par = param instanceof Uint8Array ? param : utf8.encode(\n      /** @type {string} */\n      param); // Resize value to a 32 byte boundary if needed\n\n      if (Math.floor(par.length / 32) >= 0 && Math.floor(par.length % 32) !== 0) {\n        value = new Uint8Array((Math.floor(par.length / 32) + 1) * 32 + 32);\n      } else {\n        value = new Uint8Array(64);\n      }\n\n      value.set(par, 32);\n      valueView = util.safeView(value, 28);\n      valueView.setUint32(0, par.length);\n      return value;\n\n    default:\n      throw new Error(`Unsupported argument type: ${ty.toString()}`);\n  }\n}\n/**\n * @param {number | BigNumber} param\n * @param {number} byteoffset\n * @param {(byteOffset: number, value: number) => void} func\n * @returns {void}\n */\n\n\nfunction numberToBytes(param, byteoffset, func) {\n  const value = BigNumber.isBigNumber(param) ? param.toNumber() : param;\n  func(byteoffset, value);\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/contract/ContractFunctionParameters.js"],"names":["ContractFunctionSelector","ArgumentType","utf8","hex","BigNumber","util","ContractFunctionParameters","constructor","_selector","_arguments","addString","value","_addParam","addStringArray","addBytes","addBytes32","length","Error","addBytesArray","addBytes32Array","_","entry","entries","addBool","addInt8","convertToBigNumber","addInt32","addInt64","addInt256","addInt8Array","convertToBigNumberArray","addInt32Array","addInt64Array","addInt256Array","console","log","addUint8","addUint32","addUint64","addUint256","addUint8Array","addUint32Array","addUint64Array","addUint256Array","addAddress","par","decode","substring","addAddressArray","buf","push","addFunction","address","selector","addressParam","functionSelector","_build","proto","Uint8Array","set","param","dynamic","index","_paramTypes","argumentToBytes","name","includeId","nameOffset","map","arg","reduce","sum","func","offset","i","view","safeView","setUint32","getUint32","ty","valueView","array","Array","isArray","TypeError","values","p","totalLengthOfValues","a","total","current","uint8","int8","uint16","int16","uint32","int32","uint64","int64","uint256","int256","bool","bytes32","bytes","string","e","numberToBytes","setUint8","bind","setInt8","setUint16","setInt16","setInt32","isBigNumber","toString","isInteger","encode","Math","floor","byteoffset","toNumber"],"mappings":"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","sourcesContent":["import ContractFunctionSelector, {\n    ArgumentType,\n} from \"./ContractFunctionSelector.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport BigNumber from \"bignumber.js\";\nimport * as util from \"../util.js\";\n\nexport default class ContractFunctionParameters {\n    constructor() {\n        /**\n         * @type {ContractFunctionSelector}\n         */\n        this._selector = new ContractFunctionSelector();\n\n        /**\n         * @type {import(\"./ContractFunctionSelector.js\").Argument[]}\n         */\n        this._arguments = [];\n    }\n\n    /**\n     * @param {string} value\n     * @returns {ContractFunctionParameters}\n     */\n    addString(value) {\n        this._selector.addString();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {string[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addStringArray(value) {\n        this._selector.addStringArray();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {Uint8Array} value\n     * @returns {ContractFunctionParameters}\n     */\n    addBytes(value) {\n        this._selector.addBytes();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {Uint8Array} value\n     * @returns {ContractFunctionParameters}\n     */\n    addBytes32(value) {\n        if (value.length !== 32) {\n            throw new Error(\n                `addBytes32 expected array to be of length 32, but received ${value.length}`\n            );\n        }\n\n        this._selector.addBytes32();\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {Uint8Array[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addBytesArray(value) {\n        this._selector.addBytesArray();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {Uint8Array[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addBytes32Array(value) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const [_, entry] of value.entries()) {\n            if (entry.length !== 32) {\n                throw new Error(\n                    `addBytes32 expected array to be of length 32, but received ${entry.length}`\n                );\n            }\n        }\n\n        this._selector.addBytes32Array();\n\n        return this._addParam(value, true);\n    }\n\n    /**\n     * @param {boolean} value\n     * @returns {ContractFunctionParameters}\n     */\n    addBool(value) {\n        this._selector.addBool();\n\n        return this._addParam(value, false);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt8(value) {\n        this._selector.addInt8();\n\n        return this._addParam(util.convertToBigNumber(value), false);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt32(value) {\n        this._selector.addInt32();\n\n        return this._addParam(util.convertToBigNumber(value), false);\n    }\n\n    /**\n     * @param {BigNumber} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt64(value) {\n        this._selector.addInt64();\n\n        return this._addParam(util.convertToBigNumber(value), false);\n    }\n\n    /**\n     * @param {BigNumber} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt256(value) {\n        this._selector.addInt256();\n\n        return this._addParam(util.convertToBigNumber(value), false);\n    }\n\n    /**\n     * @param {number[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt8Array(value) {\n        this._selector.addInt8Array();\n\n        return this._addParam(util.convertToBigNumberArray(value), true);\n    }\n\n    /**\n     * @param {number[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt32Array(value) {\n        this._selector.addInt32Array();\n\n        return this._addParam(util.convertToBigNumberArray(value), true);\n    }\n\n    /**\n     * @param {BigNumber[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt64Array(value) {\n        this._selector.addInt64Array();\n\n        return this._addParam(util.convertToBigNumberArray(value), true);\n    }\n\n    /**\n     * @param {BigNumber[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addInt256Array(value) {\n        this._selector.addInt256Array();\n        console.log(\"asdf\");\n        return this._addParam(util.convertToBigNumberArray(value), true);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint8(value) {\n        this._selector.addUint8();\n\n        return this._addParam(util.convertToBigNumber(value), false);\n    }\n\n    /**\n     * @param {number} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint32(value) {\n        this._selector.addUint32();\n\n        return this._addParam(util.convertToBigNumber(value), false);\n    }\n\n    /**\n     * @param {BigNumber} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint64(value) {\n        this._selector.addUint64();\n\n        return this._addParam(util.convertToBigNumber(value), false);\n    }\n\n    /**\n     * @param {BigNumber | number} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint256(value) {\n        this._selector.addUint256();\n\n        return this._addParam(util.convertToBigNumber(value), false);\n    }\n\n    /**\n     * @param {number[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint8Array(value) {\n        this._selector.addUint8Array();\n\n        return this._addParam(util.convertToBigNumberArray(value), true);\n    }\n\n    /**\n     * @param {number[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint32Array(value) {\n        this._selector.addUint32Array();\n\n        return this._addParam(util.convertToBigNumberArray(value), true);\n    }\n\n    /**\n     * @param {BigNumber[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint64Array(value) {\n        this._selector.addUint64Array();\n\n        return this._addParam(util.convertToBigNumberArray(value), true);\n    }\n\n    /**\n     * @param {BigNumber[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addUint256Array(value) {\n        this._selector.addUint256Array();\n\n        return this._addParam(util.convertToBigNumberArray(value), true);\n    }\n\n    /**\n     * @param {string} value\n     * @returns {ContractFunctionParameters}\n     */\n    addAddress(value) {\n        // Allow `0x` prefix\n        if (value.length !== 40 && value.length !== 42) {\n            throw new Error(\n                \"`address` type requires parameter to be 40 or 42 characters\"\n            );\n        }\n\n        const par =\n            value.length === 40\n                ? hex.decode(value)\n                : hex.decode(value.substring(2));\n\n        this._selector.addAddress();\n\n        return this._addParam(par, false);\n    }\n\n    /**\n     * @param {string[]} value\n     * @returns {ContractFunctionParameters}\n     */\n    addAddressArray(value) {\n        /**\n         * @type {Uint8Array[]}\n         */\n        const par = [];\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const [_, entry] of value.entries()) {\n            if (entry.length !== 40 && entry.length !== 42) {\n                throw new Error(\n                    \"`address` type requires parameter to be 40 or 42 characters\"\n                );\n            }\n\n            const buf =\n                entry.length === 40\n                    ? hex.decode(entry)\n                    : hex.decode(entry.substring(2));\n\n            par.push(buf);\n        }\n\n        this._selector.addAddressArray();\n\n        return this._addParam(par, true);\n    }\n\n    /**\n     * @param {string} address\n     * @param {ContractFunctionSelector} selector\n     * @returns {ContractFunctionParameters}\n     */\n    addFunction(address, selector) {\n        const addressParam = hex.decode(address);\n        const functionSelector = selector._build();\n\n        if (addressParam.length !== 20) {\n            throw new Error(\n                \"`function` type requires parameter `address` to be exactly 20 bytes\"\n            );\n        }\n\n        this._selector.addFunction();\n\n        const proto = new Uint8Array(24);\n        proto.set(addressParam, 0);\n        proto.set(functionSelector, 20);\n\n        return this._addParam(proto, false);\n    }\n\n    /**\n     * @internal\n     * @param {string | boolean | number | Uint8Array | BigNumber | string[] | boolean[] | number[] | Uint8Array[] | BigNumber[]} param\n     * @param {boolean} dynamic\n     * @returns {ContractFunctionParameters}\n     */\n    _addParam(param, dynamic) {\n        const index = this._selector._paramTypes.length - 1;\n        const value = argumentToBytes(param, this._selector._paramTypes[index]);\n\n        this._arguments.push({ dynamic, value });\n\n        return this;\n    }\n\n    /**\n     * @internal\n     * @param {string=} name\n     * @returns {Uint8Array}\n     */\n    _build(name) {\n        const includeId = name != null;\n        const nameOffset = includeId ? 4 : 0;\n\n        const length =\n            this._arguments.length === 0\n                ? nameOffset\n                : this._arguments.length * 32 +\n                  this._arguments\n                      .map((arg) => (arg.dynamic ? arg.value.length : 0))\n                      .reduce((sum, value) => sum + value) +\n                  nameOffset;\n\n        const func = new Uint8Array(length);\n\n        if (includeId) {\n            func.set(this._selector._build(name), 0);\n        }\n\n        let offset = 32 * this._arguments.length;\n\n        for (const [i, { dynamic, value }] of this._arguments.entries()) {\n            if (dynamic) {\n                const view = util.safeView(func, nameOffset + i * 32 + 28);\n                view.setUint32(0, offset);\n                func.set(value, view.getUint32(0) + nameOffset);\n                offset += value.length;\n            } else {\n                func.set(value, nameOffset + i * 32);\n            }\n        }\n\n        return func;\n    }\n}\n\n/**\n * @param {string | boolean | number | Uint8Array | BigNumber | string[] | boolean[] | number[] | Uint8Array[] | BigNumber[]} param\n * @param {import(\"./ContractFunctionSelector.js\").SolidityType} ty\n * @returns {Uint8Array}\n */\nfunction argumentToBytes(param, ty) {\n    let value = new Uint8Array(32);\n    let valueView = util.safeView(value);\n    /** @type {Uint8Array} */\n    let par;\n\n    if (ty.array) {\n        if (!Array.isArray(param)) {\n            throw new TypeError(\n                \"SolidityType indicates type is array, but parameter is not an array\"\n            );\n        }\n\n        /**\n         * @type {Uint8Array[]}\n         */\n        const values = [];\n\n        // Generic over any type of array\n        // Destructuring required so the first variable must be assigned\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const [_, p] of param.entries()) {\n            const arg = argumentToBytes(p, { ty: ty.ty, array: false });\n            values.push(arg);\n        }\n\n        const totalLengthOfValues = values\n            .map((a) => a.length)\n            .reduce((total, current) => total + current);\n\n        switch (ty.ty) {\n            case ArgumentType.uint8:\n            case ArgumentType.int8:\n            case ArgumentType.uint16:\n            case ArgumentType.int16:\n            case ArgumentType.uint32:\n            case ArgumentType.int32:\n            case ArgumentType.uint64:\n            case ArgumentType.int64:\n            case ArgumentType.uint256:\n            case ArgumentType.int256:\n            case ArgumentType.bool:\n            case ArgumentType.bytes32:\n            case ArgumentType.address:\n            case ArgumentType.func:\n                value = new Uint8Array(totalLengthOfValues + 32);\n                break;\n            case ArgumentType.bytes:\n            case ArgumentType.string:\n                value = new Uint8Array(\n                    values.length * 32 + totalLengthOfValues + 32\n                );\n                break;\n            default:\n                throw new TypeError(\n                    `Expected param type to be ArgumentType, but received ${ty.ty}`\n                );\n        }\n\n        valueView = util.safeView(value, 28);\n        valueView.setUint32(0, values.length);\n\n        let offset = 32 * values.length;\n\n        for (const [i, e] of values.entries()) {\n            switch (ty.ty) {\n                case ArgumentType.uint8:\n                case ArgumentType.int8:\n                case ArgumentType.uint16:\n                case ArgumentType.int16:\n                case ArgumentType.uint32:\n                case ArgumentType.int32:\n                case ArgumentType.uint64:\n                case ArgumentType.int64:\n                case ArgumentType.uint256:\n                case ArgumentType.int256:\n                case ArgumentType.bool:\n                case ArgumentType.bytes32:\n                case ArgumentType.address:\n                case ArgumentType.func:\n                    value.set(e, i * 32 + 32);\n                    break;\n                case ArgumentType.bytes:\n                case ArgumentType.string:\n                    // eslint-disable-next-line no-case-declarations\n                    const view = util.safeView(value, (i + 1) * 32 + 28);\n                    view.setUint32(0, offset);\n                    value.set(e, view.getUint32(0) + 32);\n                    offset += e.length;\n                    break;\n                default:\n                    throw new TypeError(\n                        `Expected param type to be ArgumentType, but received ${ty.ty}`\n                    );\n            }\n        }\n\n        return value;\n    }\n\n    switch (ty.ty) {\n        case ArgumentType.uint8:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                31,\n                valueView.setUint8.bind(valueView)\n            );\n            return value;\n        case ArgumentType.int8:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                31,\n                valueView.setInt8.bind(valueView)\n            );\n            return value;\n        case ArgumentType.uint16:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                30,\n                valueView.setUint16.bind(valueView)\n            );\n            return value;\n        case ArgumentType.int16:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                30,\n                valueView.setInt16.bind(valueView)\n            );\n            return value;\n        case ArgumentType.uint32:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                28,\n                valueView.setUint32.bind(valueView)\n            );\n            return value;\n        case ArgumentType.int32:\n            numberToBytes(\n                /** @type {number | BigNumber } */ (param),\n                28,\n                valueView.setInt32.bind(valueView)\n            );\n            return value;\n        // int64, uint64, and int256 both expect the parameter to be an Uint8Array instead of number\n        case ArgumentType.uint64:\n        case ArgumentType.int64:\n            if (BigNumber.isBigNumber(param)) {\n                // eslint-disable-next-line no-case-declarations\n                let par = param.toString(16);\n                if (par.length > 16) {\n                    throw new TypeError(\n                        \"uint64/int64 requires BigNumber to be less than or equal to 8 bytes\"\n                    );\n                } else if (!param.isInteger()) {\n                    throw new TypeError(\n                        \"uint64/int64 requires BigNumber to be an integer\"\n                    );\n                }\n\n                if (par.length % 2 === 1) {\n                    par = `0${par}`;\n                }\n\n                // eslint-disable-next-line no-case-declarations\n                const buf = hex.decode(par);\n                value.set(buf, 32 - buf.length);\n            }\n            return value;\n        case ArgumentType.int256:\n        case ArgumentType.uint256:\n            if (BigNumber.isBigNumber(param)) {\n                let par = param.toString(16);\n                if (par.length % 2 === 1) {\n                    par = `0${par}`;\n                }\n\n                const buf = hex.decode(par);\n                value.set(buf, 32 - buf.length);\n            }\n            return value;\n        case ArgumentType.address:\n            value.set(/** @type {Uint8Array} */ (param), 32 - 20);\n            return value;\n        case ArgumentType.bool:\n            value[31] = /** @type {boolean} */ (param) ? 1 : 0;\n            return value;\n        case ArgumentType.func:\n            value.set(/** @type {Uint8Array} */ (param), 32 - 24);\n            return value;\n        case ArgumentType.bytes32:\n            value.set(/** @type {Uint8Array} */ (param), 0);\n            return value;\n        // Bytes should have not the length already encoded\n        // JS String type is encoded as UTF-16 whilst Solidity `string` type is UTF-8 encoded.\n        // So if will assume is already correctly updated to being a Uint8Array of UTF-8 string\n        case ArgumentType.bytes:\n        case ArgumentType.string:\n            // If value is of type string, encode it in UTF-8 format and conver it to Uint8Array\n            // Required because JS Strings are UTF-16\n            // eslint-disable-next-line no-case-declarations\n            par =\n                param instanceof Uint8Array\n                    ? param\n                    : utf8.encode(/** @type {string} */ (param));\n\n            // Resize value to a 32 byte boundary if needed\n            if (\n                Math.floor(par.length / 32) >= 0 &&\n                Math.floor(par.length % 32) !== 0\n            ) {\n                value = new Uint8Array(\n                    (Math.floor(par.length / 32) + 1) * 32 + 32\n                );\n            } else {\n                value = new Uint8Array(64);\n            }\n\n            value.set(par, 32);\n\n            valueView = util.safeView(value, 28);\n            valueView.setUint32(0, par.length);\n            return value;\n        default:\n            throw new Error(`Unsupported argument type: ${ty.toString()}`);\n    }\n}\n\n/**\n * @param {number | BigNumber} param\n * @param {number} byteoffset\n * @param {(byteOffset: number, value: number) => void} func\n * @returns {void}\n */\nfunction numberToBytes(param, byteoffset, func) {\n    const value = BigNumber.isBigNumber(param) ? param.toNumber() : param;\n\n    func(byteoffset, value);\n}\n"]},"metadata":{},"sourceType":"module"}