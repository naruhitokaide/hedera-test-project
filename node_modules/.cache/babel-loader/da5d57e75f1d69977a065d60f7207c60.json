{"ast":null,"code":"var _jsxFileName = \"C:\\\\Work\\\\coding-sandbox\\\\react-again\\\\dapp-days\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction, TokenMintTransaction, FileCreateTransaction, ContractCreateTransaction, ContractFunctionParameters, ContractExecuteTransaction, TokenInfoQuery, AccountBalanceQuery, Hbar, ContractInfoQuery } from \"@hashgraph/sdk\";\nimport operator from \"./config.js\";\nimport MyButton from \"./components/MyButton.jsx\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst operatorId = AccountId.fromString(operator.id);\nconst operatorKey = PrivateKey.fromString(operator.pvkey);\nconst client = Client.forTestnet().setOperator(operatorId, operatorKey);\n\nfunction App() {\n  _s();\n\n  const [tokenId, setTokenId] = useState();\n  const [createTextState, setCreateTextSt] = useState(\"ðŸ‘† Waiting to create token...\");\n  const [mintTextState, setMintTextSt] = useState();\n  const [tokenSupply, setTokenSupply] = useState();\n\n  async function tokenCreate() {\n    if (tokenId === undefined) {\n      console.log(\"- Creating token\");\n      const tokenCreateTx = new TokenCreateTransaction().setTokenName(\"dAppDayToken\").setTokenSymbol(\"DDT\").setTreasuryAccountId(operatorId).setInitialSupply(100).setDecimals(0).setSupplyKey(operatorKey).freezeWith(client);\n      const tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n      const tokenCreateSubmit = await tokenCreateSign.execute(client);\n      const tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n      const id = tokenCreateRec.receipt.tokenId;\n      const supply = tokenCreateTx._initialSupply.low;\n      setTokenId(id);\n      setTokenSupply(supply);\n      setCreateTextSt(tokenCreateText(id));\n      setMintTextSt(tokenMintText(id, supply));\n      console.log(`Created token with ID: ${id}`);\n      console.log(`Supply: ${supply}`);\n    } else {\n      setCreateTextSt(tokenCreateText());\n      console.log(`${tokenCreateText()}`);\n    }\n  }\n\n  function tokenCreateText(id) {\n    let tcText;\n    let option1 = `Created token with ID: ${id}`;\n    let option2 = `You already have token with ID: ${tokenId}!`;\n    tokenId === undefined ? tcText = option1 : tcText = option2;\n    return tcText;\n  }\n\n  async function tokenMint() {\n    try {\n      console.log(\"- Minting new tokens!\");\n      const tokenMintTx = new TokenMintTransaction().setTokenId(tokenId).setAmount(100).freezeWith(client);\n      const tokenMintSign = await tokenMintTx.sign(operatorKey);\n      const tokenMintSubmit = await tokenMintSign.execute(client);\n      const tokenMintRec = await tokenMintSubmit.getRecord(client);\n      const supply = tokenMintRec.receipt.totalSupply;\n      setTokenSupply(supply);\n      setMintTextSt(tokenMintText(tokenId, supply));\n      console.log(`Minted new tokens. Now there are ${supply}`);\n    } catch {\n      setMintTextSt(tokenMintText());\n      console.log(`Create a token first!`);\n    }\n  }\n\n  function tokenMintText(id, supply) {\n    let tmText;\n    let option1 = `Supply of token ${id} is ${supply}!`;\n    let option2 = `Create a token first!`;\n    id !== undefined ? tmText = option1 : tmText = option2;\n    return tmText;\n  }\n\n  async function somethingContract() {\n    // STEP 1 ===================================\n    console.log(`STEP 1 ===================================`); // const bytecode = \"../contracts/AssoTransHTS_sol_AssoTransHTS.bin\";\n\n    const bytecode = \"608060405234801561001057600080fd5b50604051610652380380610652833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b61053b806101176000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063280ad0d114610030575b600080fd5b61004a60048036038101906100459190610323565b61004c565b005b60006100783060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166100af565b905060006100a860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163330866101c7565b9050505050565b600080600061016773ffffffffffffffffffffffffffffffffffffffff166349146bde60e01b86866040516024016100e8929190610391565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101529190610434565b6000604051808303816000865af19150503d806000811461018f576040519150601f19603f3d011682016040523d82523d6000602084013e610194565b606091505b5091509150816101a55760156101ba565b808060200190518101906101b99190610484565b5b60030b9250505092915050565b600080600061016773ffffffffffffffffffffffffffffffffffffffff1663eca3691760e01b8888888860405160240161020494939291906104c0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161026e9190610434565b6000604051808303816000865af19150503d80600081146102ab576040519150601f19603f3d011682016040523d82523d6000602084013e6102b0565b606091505b5091509150816102c15760156102d6565b808060200190518101906102d59190610484565b5b60030b92505050949350505050565b600080fd5b60008160070b9050919050565b610300816102ea565b811461030b57600080fd5b50565b60008135905061031d816102f7565b92915050565b600060208284031215610339576103386102e5565b5b60006103478482850161030e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061037b82610350565b9050919050565b61038b81610370565b82525050565b60006040820190506103a66000830185610382565b6103b36020830184610382565b9392505050565b600081519050919050565b600081905092915050565b60005b838110156103ee5780820151818401526020810190506103d3565b838111156103fd576000848401525b50505050565b600061040e826103ba565b61041881856103c5565b93506104288185602086016103d0565b80840191505092915050565b60006104408284610403565b915081905092915050565b60008160030b9050919050565b6104618161044b565b811461046c57600080fd5b50565b60008151905061047e81610458565b92915050565b60006020828403121561049a576104996102e5565b5b60006104a88482850161046f565b91505092915050565b6104ba816102ea565b82525050565b60006080820190506104d56000830187610382565b6104e26020830186610382565b6104ef6040830185610382565b6104fc60608301846104b1565b9594505050505056fea26469706673582212201812ee5e58a13aa81e4e6ef1c0abdb119d4cd54431dd21873a0dfedbdb553a7464736f6c634300080b0033\";\n    console.log(`- Done \\n ${bytecode} `); // STEP 2 ===================================\n\n    console.log(`STEP 2 ===================================`); //Create a file on Hedera and store the hex-encoded bytecode\n\n    const fileCreateTx = new FileCreateTransaction().setKeys([operatorKey]).setContents(bytecode).freezeWith(client);\n    const fileCreateSign = await fileCreateTx.sign(operatorKey);\n    const fileSubmit = await fileCreateSign.execute(client);\n    const fileCreateRx = await fileSubmit.getReceipt(client);\n    const bytecodeFileId = fileCreateRx.fileId;\n    console.log(`- The smart contract bytecode file ID is: ${bytecodeFileId}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(MyButton, {\n      fcn: tokenCreate,\n      text: \"Create New Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: createTextState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n      fcn: tokenMint,\n      text: \"Mint New Tokens\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: mintTextState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n      fcn: somethingContract,\n      text: \"Deploy Contract!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"B9U1/HcnDo4ruyqN0qrGjPOSOzY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/src/App.jsx"],"names":["React","useState","useRef","Client","AccountId","PrivateKey","TokenCreateTransaction","TokenMintTransaction","FileCreateTransaction","ContractCreateTransaction","ContractFunctionParameters","ContractExecuteTransaction","TokenInfoQuery","AccountBalanceQuery","Hbar","ContractInfoQuery","operator","MyButton","operatorId","fromString","id","operatorKey","pvkey","client","forTestnet","setOperator","App","tokenId","setTokenId","createTextState","setCreateTextSt","mintTextState","setMintTextSt","tokenSupply","setTokenSupply","tokenCreate","undefined","console","log","tokenCreateTx","setTokenName","setTokenSymbol","setTreasuryAccountId","setInitialSupply","setDecimals","setSupplyKey","freezeWith","tokenCreateSign","sign","tokenCreateSubmit","execute","tokenCreateRec","getRecord","receipt","supply","_initialSupply","low","tokenCreateText","tokenMintText","tcText","option1","option2","tokenMint","tokenMintTx","setAmount","tokenMintSign","tokenMintSubmit","tokenMintRec","totalSupply","tmText","somethingContract","bytecode","fileCreateTx","setKeys","setContents","fileCreateSign","fileSubmit","fileCreateRx","getReceipt","bytecodeFileId","fileId"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport {\n\tClient,\n\tAccountId,\n\tPrivateKey,\n\tTokenCreateTransaction,\n\tTokenMintTransaction,\n\tFileCreateTransaction,\n\tContractCreateTransaction,\n\tContractFunctionParameters,\n\tContractExecuteTransaction,\n\tTokenInfoQuery,\n\tAccountBalanceQuery,\n\tHbar,\n\tContractInfoQuery,\n} from \"@hashgraph/sdk\";\nimport operator from \"./config.js\";\nimport MyButton from \"./components/MyButton.jsx\";\nimport \"./styles/App.css\";\n\nconst operatorId = AccountId.fromString(operator.id);\nconst operatorKey = PrivateKey.fromString(operator.pvkey);\nconst client = Client.forTestnet().setOperator(operatorId, operatorKey);\n\nfunction App() {\n\tconst [tokenId, setTokenId] = useState();\n\tconst [createTextState, setCreateTextSt] = useState(\"ðŸ‘† Waiting to create token...\");\n\tconst [mintTextState, setMintTextSt] = useState();\n\tconst [tokenSupply, setTokenSupply] = useState();\n\n\tasync function tokenCreate() {\n\t\tif (tokenId === undefined) {\n\t\t\tconsole.log(\"- Creating token\");\n\n\t\t\tconst tokenCreateTx = new TokenCreateTransaction()\n\t\t\t\t.setTokenName(\"dAppDayToken\")\n\t\t\t\t.setTokenSymbol(\"DDT\")\n\t\t\t\t.setTreasuryAccountId(operatorId)\n\t\t\t\t.setInitialSupply(100)\n\t\t\t\t.setDecimals(0)\n\t\t\t\t.setSupplyKey(operatorKey)\n\t\t\t\t.freezeWith(client);\n\t\t\tconst tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n\t\t\tconst tokenCreateSubmit = await tokenCreateSign.execute(client);\n\t\t\tconst tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n\t\t\tconst id = tokenCreateRec.receipt.tokenId;\n\t\t\tconst supply = tokenCreateTx._initialSupply.low;\n\n\t\t\tsetTokenId(id);\n\t\t\tsetTokenSupply(supply);\n\t\t\tsetCreateTextSt(tokenCreateText(id));\n\t\t\tsetMintTextSt(tokenMintText(id, supply));\n\n\t\t\tconsole.log(`Created token with ID: ${id}`);\n\t\t\tconsole.log(`Supply: ${supply}`);\n\t\t} else {\n\t\t\tsetCreateTextSt(tokenCreateText());\n\t\t\tconsole.log(`${tokenCreateText()}`);\n\t\t}\n\t}\n\n\tfunction tokenCreateText(id) {\n\t\tlet tcText;\n\t\tlet option1 = `Created token with ID: ${id}`;\n\t\tlet option2 = `You already have token with ID: ${tokenId}!`;\n\n\t\ttokenId === undefined ? (tcText = option1) : (tcText = option2);\n\t\treturn tcText;\n\t}\n\n\tasync function tokenMint() {\n\t\ttry {\n\t\t\tconsole.log(\"- Minting new tokens!\");\n\n\t\t\tconst tokenMintTx = new TokenMintTransaction().setTokenId(tokenId).setAmount(100).freezeWith(client);\n\t\t\tconst tokenMintSign = await tokenMintTx.sign(operatorKey);\n\t\t\tconst tokenMintSubmit = await tokenMintSign.execute(client);\n\t\t\tconst tokenMintRec = await tokenMintSubmit.getRecord(client);\n\t\t\tconst supply = tokenMintRec.receipt.totalSupply;\n\n\t\t\tsetTokenSupply(supply);\n\t\t\tsetMintTextSt(tokenMintText(tokenId, supply));\n\n\t\t\tconsole.log(`Minted new tokens. Now there are ${supply}`);\n\t\t} catch {\n\t\t\tsetMintTextSt(tokenMintText());\n\t\t\tconsole.log(`Create a token first!`);\n\t\t}\n\t}\n\n\tfunction tokenMintText(id, supply) {\n\t\tlet tmText;\n\t\tlet option1 = `Supply of token ${id} is ${supply}!`;\n\t\tlet option2 = `Create a token first!`;\n\n\t\tid !== undefined ? (tmText = option1) : (tmText = option2);\n\t\treturn tmText;\n\t}\n\n\tasync function somethingContract() {\n\t\t// STEP 1 ===================================\n\t\tconsole.log(`STEP 1 ===================================`);\n\t\t// const bytecode = \"../contracts/AssoTransHTS_sol_AssoTransHTS.bin\";\n\t\tconst bytecode =\n\t\t\t\"608060405234801561001057600080fd5b50604051610652380380610652833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b61053b806101176000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063280ad0d114610030575b600080fd5b61004a60048036038101906100459190610323565b61004c565b005b60006100783060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166100af565b905060006100a860008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163330866101c7565b9050505050565b600080600061016773ffffffffffffffffffffffffffffffffffffffff166349146bde60e01b86866040516024016100e8929190610391565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101529190610434565b6000604051808303816000865af19150503d806000811461018f576040519150601f19603f3d011682016040523d82523d6000602084013e610194565b606091505b5091509150816101a55760156101ba565b808060200190518101906101b99190610484565b5b60030b9250505092915050565b600080600061016773ffffffffffffffffffffffffffffffffffffffff1663eca3691760e01b8888888860405160240161020494939291906104c0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161026e9190610434565b6000604051808303816000865af19150503d80600081146102ab576040519150601f19603f3d011682016040523d82523d6000602084013e6102b0565b606091505b5091509150816102c15760156102d6565b808060200190518101906102d59190610484565b5b60030b92505050949350505050565b600080fd5b60008160070b9050919050565b610300816102ea565b811461030b57600080fd5b50565b60008135905061031d816102f7565b92915050565b600060208284031215610339576103386102e5565b5b60006103478482850161030e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061037b82610350565b9050919050565b61038b81610370565b82525050565b60006040820190506103a66000830185610382565b6103b36020830184610382565b9392505050565b600081519050919050565b600081905092915050565b60005b838110156103ee5780820151818401526020810190506103d3565b838111156103fd576000848401525b50505050565b600061040e826103ba565b61041881856103c5565b93506104288185602086016103d0565b80840191505092915050565b60006104408284610403565b915081905092915050565b60008160030b9050919050565b6104618161044b565b811461046c57600080fd5b50565b60008151905061047e81610458565b92915050565b60006020828403121561049a576104996102e5565b5b60006104a88482850161046f565b91505092915050565b6104ba816102ea565b82525050565b60006080820190506104d56000830187610382565b6104e26020830186610382565b6104ef6040830185610382565b6104fc60608301846104b1565b9594505050505056fea26469706673582212201812ee5e58a13aa81e4e6ef1c0abdb119d4cd54431dd21873a0dfedbdb553a7464736f6c634300080b0033\";\n\t\tconsole.log(`- Done \\n ${bytecode} `);\n\t\t// STEP 2 ===================================\n\t\tconsole.log(`STEP 2 ===================================`);\n\t\t//Create a file on Hedera and store the hex-encoded bytecode\n\t\tconst fileCreateTx = new FileCreateTransaction().setKeys([operatorKey]).setContents(bytecode).freezeWith(client);\n\t\tconst fileCreateSign = await fileCreateTx.sign(operatorKey);\n\t\tconst fileSubmit = await fileCreateSign.execute(client);\n\t\tconst fileCreateRx = await fileSubmit.getReceipt(client);\n\t\tconst bytecodeFileId = fileCreateRx.fileId;\n\t\tconsole.log(`- The smart contract bytecode file ID is: ${bytecodeFileId}`);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<MyButton fcn={tokenCreate} text={\"Create New Token\"} />\n\t\t\t<p>{createTextState}</p>\n\t\t\t{/*  */}\n\t\t\t<MyButton fcn={tokenMint} text={\"Mint New Tokens\"} />\n\t\t\t<p>{mintTextState}</p>\n\t\t\t<MyButton fcn={somethingContract} text={\"Deploy Contract!\"} />\n\t\t\t{/* <p>{mintTextState}</p> */}\n\t\t</div>\n\t);\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}