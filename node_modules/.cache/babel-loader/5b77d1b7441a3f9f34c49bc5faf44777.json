{"ast":null,"code":"import * as utf8 from \"../encoding/utf8.js\";\n/**\n * @enum {string}\n */\n\nexport const HashAlgorithm = {\n  Sha256: \"SHA-256\",\n  Sha384: \"SHA-384\",\n  Sha512: \"SHA-512\"\n};\n/**\n * @param {HashAlgorithm} algorithm\n * @param {Uint8Array | string} secretKey\n * @param {Uint8Array | string} data\n * @returns {Promise<Uint8Array>}\n */\n\nexport async function hash(algorithm, secretKey, data) {\n  const key = typeof secretKey === \"string\" ? utf8.encode(secretKey) : secretKey;\n  const value = typeof data === \"string\" ? utf8.encode(data) : data;\n\n  try {\n    const key_ = await window.crypto.subtle.importKey(\"raw\", key, {\n      name: \"HMAC\",\n      hash: algorithm\n    }, false, [\"sign\"]);\n    return new Uint8Array(await window.crypto.subtle.sign(\"HMAC\", key_, value));\n  } catch {\n    throw new Error(\"Fallback if SubtleCrypto fails is not implemented\");\n  }\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/cryptography/src/primitive/hmac.browser.js"],"names":["utf8","HashAlgorithm","Sha256","Sha384","Sha512","hash","algorithm","secretKey","data","key","encode","value","key_","window","crypto","subtle","importKey","name","Uint8Array","sign","Error"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,qBAAtB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAG;AACzBC,EAAAA,MAAM,EAAE,SADiB;AAEzBC,EAAAA,MAAM,EAAE,SAFiB;AAGzBC,EAAAA,MAAM,EAAE;AAHiB,CAAtB;AAMP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,IAAf,CAAoBC,SAApB,EAA+BC,SAA/B,EAA0CC,IAA1C,EAAgD;AACnD,QAAMC,GAAG,GACL,OAAOF,SAAP,KAAqB,QAArB,GAAgCP,IAAI,CAACU,MAAL,CAAYH,SAAZ,CAAhC,GAAyDA,SAD7D;AAEA,QAAMI,KAAK,GAAG,OAAOH,IAAP,KAAgB,QAAhB,GAA2BR,IAAI,CAACU,MAAL,CAAYF,IAAZ,CAA3B,GAA+CA,IAA7D;;AAEA,MAAI;AACA,UAAMI,IAAI,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBC,SAArB,CACf,KADe,EAEfP,GAFe,EAGf;AACIQ,MAAAA,IAAI,EAAE,MADV;AAEIZ,MAAAA,IAAI,EAAEC;AAFV,KAHe,EAOf,KAPe,EAQf,CAAC,MAAD,CARe,CAAnB;AAWA,WAAO,IAAIY,UAAJ,CACH,MAAML,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBI,IAArB,CAA0B,MAA1B,EAAkCP,IAAlC,EAAwCD,KAAxC,CADH,CAAP;AAGH,GAfD,CAeE,MAAM;AACJ,UAAM,IAAIS,KAAJ,CAAU,mDAAV,CAAN;AACH;AACJ","sourcesContent":["import * as utf8 from \"../encoding/utf8.js\";\n\n/**\n * @enum {string}\n */\nexport const HashAlgorithm = {\n    Sha256: \"SHA-256\",\n    Sha384: \"SHA-384\",\n    Sha512: \"SHA-512\",\n};\n\n/**\n * @param {HashAlgorithm} algorithm\n * @param {Uint8Array | string} secretKey\n * @param {Uint8Array | string} data\n * @returns {Promise<Uint8Array>}\n */\nexport async function hash(algorithm, secretKey, data) {\n    const key =\n        typeof secretKey === \"string\" ? utf8.encode(secretKey) : secretKey;\n    const value = typeof data === \"string\" ? utf8.encode(data) : data;\n\n    try {\n        const key_ = await window.crypto.subtle.importKey(\n            \"raw\",\n            key,\n            {\n                name: \"HMAC\",\n                hash: algorithm,\n            },\n            false,\n            [\"sign\"]\n        );\n\n        return new Uint8Array(\n            await window.crypto.subtle.sign(\"HMAC\", key_, value)\n        );\n    } catch {\n        throw new Error(\"Fallback if SubtleCrypto fails is not implemented\");\n    }\n}\n"]},"metadata":{},"sourceType":"module"}