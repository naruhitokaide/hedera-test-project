{"ast":null,"code":"import TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Hbar from \"../Hbar.js\";\nimport Transfer from \"../Transfer.js\";\nimport ContractFunctionResult from \"../contract/ContractFunctionResult.js\";\nimport TokenTransferMap from \"../account/TokenTransferMap.js\";\nimport TokenNftTransferMap from \"../account/TokenNftTransferMap.js\";\nimport * as proto from \"@hashgraph/proto\";\nimport ScheduleId from \"../schedule/ScheduleId.js\";\nimport AssessedCustomFee from \"../token/AssessedCustomFee.js\";\nimport TokenAssocation from \"../token/TokenAssociation.js\";\nimport Key from \"../Key.js\";\nimport PublicKey from \"../PublicKey.js\";\n/**\n * @typedef {import(\"../token/TokenId.js\").default} TokenId\n */\n\n/**\n * Response when the client sends the node TransactionGetRecordResponse.\n */\n\nexport default class TransactionRecord {\n  /**\n   * @private\n   * @param {object} props\n   * @param {ContractFunctionResult} [props.contractFunctionResult]\n   * @param {TransactionReceipt} props.receipt\n   * @param {Uint8Array} props.transactionHash\n   * @param {Timestamp} props.consensusTimestamp\n   * @param {TransactionId} props.transactionId\n   * @param {string} props.transactionMemo\n   * @param {Hbar} props.transactionFee\n   * @param {Transfer[]} props.transfers\n   * @param {TokenTransferMap} props.tokenTransfers\n   * @param {?ScheduleId} props.scheduleRef\n   * @param {AssessedCustomFee[]} props.assessedCustomFees\n   * @param {TokenNftTransferMap} props.nftTransfers\n   * @param {TokenAssocation[]} props.automaticTokenAssociations\n   * @param {Timestamp | null} props.parentConsensusTimestamp\n   * @param {PublicKey | null} props.aliasKey\n   * @param {TransactionRecord[]} props.duplicates\n   * @param {TransactionRecord[]} props.children\n   */\n  constructor(props) {\n    /**\n     * The status (reach consensus, or failed, or is unknown) and the ID of\n     * any new account/file/instance created.\n     *\n     * @readonly\n     */\n    this.receipt = props.receipt;\n    /**\n     * The hash of the Transaction that executed (not the hash of any Transaction that failed\n     * for having a duplicate TransactionID).\n     *\n     * @readonly\n     */\n\n    this.transactionHash = props.transactionHash;\n    /**\n     * The consensus timestamp (or null if didn't reach consensus yet).\n     *\n     * @readonly\n     */\n\n    this.consensusTimestamp = props.consensusTimestamp;\n    /**\n     * The ID of the transaction this record represents.\n     *\n     * @readonly\n     */\n\n    this.transactionId = props.transactionId;\n    /**\n     * The memo that was submitted as part of the transaction (max 100 bytes).\n     *\n     * @readonly\n     */\n\n    this.transactionMemo = props.transactionMemo;\n    /**\n     * The actual transaction fee charged,\n     * not the original transactionFee value from TransactionBody.\n     *\n     * @readonly\n     */\n\n    this.transactionFee = props.transactionFee;\n    /**\n     * All hbar transfers as a result of this transaction, such as fees, or transfers performed\n     * by the transaction, or by a smart contract it calls, or by the creation of threshold\n     * records that it triggers.\n     *\n     * @readonly\n     */\n\n    this.transfers = props.transfers;\n    /**\n     * Record of the value returned by the smart contract function or constructor.\n     *\n     * @readonly\n     */\n\n    this.contractFunctionResult = props.contractFunctionResult != null ? props.contractFunctionResult : null;\n    /**\n     * All the token transfers from this account\n     *\n     * @readonly\n     */\n\n    this.tokenTransfers = props.tokenTransfers;\n    /**\n     * Reference to the scheduled transaction ID that this transaction record represent\n     *\n     * @readonly\n     */\n\n    this.scheduleRef = props.scheduleRef;\n    /**\n     * All custom fees that were assessed during a CryptoTransfer, and must be paid if the\n     * transaction status resolved to SUCCESS\n     *\n     * @readonly\n     */\n\n    this.assessedCustomFees = props.assessedCustomFees;\n    /** @readonly */\n\n    this.nftTransfers = props.nftTransfers;\n    /**\n     * All token associations implicitly created while handling this transaction\n     *\n     * @readonly\n     */\n\n    this.automaticTokenAssociations = props.automaticTokenAssociations;\n    /**\n     * The parent consensus timestamp\n     *\n     * @readonly\n     */\n\n    this.parentConsensusTimestamp = props.parentConsensusTimestamp;\n    this.aliasKey = props.aliasKey;\n    /**\n     * @readonly\n     */\n\n    this.duplicates = props.duplicates;\n    /**\n     * @readonly\n     */\n\n    this.children = props.children;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @returns {proto.ITransactionGetRecordResponse}\n   */\n\n\n  _toProtobuf() {\n    const tokenTransfers = this.tokenTransfers._toProtobuf();\n\n    const nftTransfers = this.nftTransfers._toProtobuf();\n\n    const tokenTransferLists = [];\n\n    for (const tokenTransfer of tokenTransfers) {\n      for (const nftTransfer of nftTransfers) {\n        if (tokenTransfer.token != null && nftTransfer.token != null && tokenTransfer.token.shardNum === nftTransfer.token.shardNum && tokenTransfer.token.realmNum === nftTransfer.token.realmNum && tokenTransfer.token.tokenNum === nftTransfer.token.tokenNum) {\n          tokenTransferLists.push({\n            token: tokenTransfer.token,\n            transfers: tokenTransfer.transfers,\n            nftTransfers: tokenTransfer.nftTransfers\n          });\n        } else {\n          tokenTransferLists.push(tokenTransfer);\n          tokenTransferLists.push(nftTransfer);\n        }\n      }\n    }\n\n    const duplicates = this.duplicates.map(record =>\n    /** @type {proto.ITransactionRecord} */\n    record._toProtobuf().transactionRecord);\n    const children = this.children.map(record =>\n    /** @type {proto.ITransactionRecord} */\n    record._toProtobuf().transactionRecord);\n    return {\n      duplicateTransactionRecords: duplicates,\n      childTransactionRecords: children,\n      transactionRecord: {\n        receipt: this.receipt._toProtobuf().receipt,\n        transactionHash: this.transactionHash != null ? this.transactionHash : null,\n        consensusTimestamp: this.consensusTimestamp != null ? this.consensusTimestamp._toProtobuf() : null,\n        transactionID: this.transactionId != null ? this.transactionId._toProtobuf() : null,\n        memo: this.transactionMemo != null ? this.transactionMemo : null,\n        transactionFee: this.transactionFee != null ? this.transactionFee.toTinybars() : null,\n        contractCallResult: this.contractFunctionResult != null ? this.contractFunctionResult : null,\n        contractCreateResult: this.contractFunctionResult != null ? this.contractFunctionResult : null,\n        transferList: this.transfers != null ? {\n          accountAmounts: this.transfers.map(transfer => transfer._toProtobuf())\n        } : null,\n        tokenTransferLists,\n        scheduleRef: this.scheduleRef != null ? this.scheduleRef._toProtobuf() : null,\n        assessedCustomFees: this.assessedCustomFees.map(fee => fee._toProtobuf()),\n        automaticTokenAssociations: this.automaticTokenAssociations.map(association => association._toProtobuf()),\n        parentConsensusTimestamp: this.parentConsensusTimestamp != null ? this.parentConsensusTimestamp._toProtobuf() : null,\n        alias: this.aliasKey != null ? proto.Key.encode(this.aliasKey._toProtobufKey()).finish() : null\n      }\n    };\n  }\n  /**\n   * @internal\n   * @param {proto.ITransactionGetRecordResponse} response\n   * @returns {TransactionRecord}\n   */\n\n\n  static _fromProtobuf(response) {\n    const record =\n    /** @type {proto.ITransactionRecord} */\n    response.transactionRecord;\n    let aliasKey = record.alias != null && record.alias.length > 0 ? Key._fromProtobufKey(proto.Key.decode(record.alias)) : null;\n\n    if (!(aliasKey instanceof PublicKey)) {\n      aliasKey = null;\n    }\n\n    const children = response.childTransactionRecords != null ? response.childTransactionRecords.map(child => TransactionRecord._fromProtobuf({\n      transactionRecord: child\n    })) : [];\n    const duplicates = response.duplicateTransactionRecords != null ? response.duplicateTransactionRecords.map(duplicate => TransactionRecord._fromProtobuf({\n      transactionRecord: duplicate\n    })) : [];\n    const contractFunctionResult = record.contractCallResult != null ? ContractFunctionResult._fromProtobuf(record.contractCallResult) : record.contractCreateResult != null ? ContractFunctionResult._fromProtobuf(record.contractCreateResult) : undefined;\n    return new TransactionRecord({\n      receipt: TransactionReceipt._fromProtobuf({\n        receipt:\n        /** @type {proto.ITransactionReceipt} */\n        record.receipt\n      }),\n      transactionHash: record.transactionHash != null ? record.transactionHash : new Uint8Array(),\n      consensusTimestamp: Timestamp._fromProtobuf(\n      /** @type {proto.ITimestamp} */\n      record.consensusTimestamp),\n      transactionId: TransactionId._fromProtobuf(\n      /** @type {proto.ITransactionID} */\n      record.transactionID),\n      transactionMemo: record.memo != null ? record.memo : \"\",\n      transactionFee: Hbar.fromTinybars(record.transactionFee != null ? record.transactionFee : 0),\n      transfers: (record.transferList != null ? record.transferList.accountAmounts != null ? record.transferList.accountAmounts : [] : []).map(aa => Transfer._fromProtobuf(aa)),\n      contractFunctionResult,\n      tokenTransfers: TokenTransferMap._fromProtobuf(record.tokenTransferLists != null ? record.tokenTransferLists : []),\n      scheduleRef: record.scheduleRef != null ? ScheduleId._fromProtobuf(record.scheduleRef) : null,\n      assessedCustomFees: record.assessedCustomFees != null ? record.assessedCustomFees.map(fee => AssessedCustomFee._fromProtobuf(fee)) : [],\n      nftTransfers: TokenNftTransferMap._fromProtobuf(record.tokenTransferLists != null ? record.tokenTransferLists : []),\n      automaticTokenAssociations: record.automaticTokenAssociations != null ? record.automaticTokenAssociations.map(association => TokenAssocation._fromProtobuf(association)) : [],\n      parentConsensusTimestamp: record.parentConsensusTimestamp != null ? Timestamp._fromProtobuf(record.parentConsensusTimestamp) : null,\n      aliasKey,\n      duplicates,\n      children\n    });\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {TransactionRecord}\n   */\n\n\n  static fromBytes(bytes) {\n    return TransactionRecord._fromProtobuf(proto.TransactionGetRecordResponse.decode(bytes));\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    return proto.TransactionGetRecordResponse.encode(this._toProtobuf()).finish();\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/transaction/TransactionRecord.js"],"names":["TransactionReceipt","TransactionId","Timestamp","Hbar","Transfer","ContractFunctionResult","TokenTransferMap","TokenNftTransferMap","proto","ScheduleId","AssessedCustomFee","TokenAssocation","Key","PublicKey","TransactionRecord","constructor","props","receipt","transactionHash","consensusTimestamp","transactionId","transactionMemo","transactionFee","transfers","contractFunctionResult","tokenTransfers","scheduleRef","assessedCustomFees","nftTransfers","automaticTokenAssociations","parentConsensusTimestamp","aliasKey","duplicates","children","Object","freeze","_toProtobuf","tokenTransferLists","tokenTransfer","nftTransfer","token","shardNum","realmNum","tokenNum","push","map","record","transactionRecord","duplicateTransactionRecords","childTransactionRecords","transactionID","memo","toTinybars","contractCallResult","contractCreateResult","transferList","accountAmounts","transfer","fee","association","alias","encode","_toProtobufKey","finish","_fromProtobuf","response","length","_fromProtobufKey","decode","child","duplicate","undefined","Uint8Array","fromTinybars","aa","fromBytes","bytes","TransactionGetRecordResponse","toBytes"],"mappings":"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","sourcesContent":["import TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Hbar from \"../Hbar.js\";\nimport Transfer from \"../Transfer.js\";\nimport ContractFunctionResult from \"../contract/ContractFunctionResult.js\";\nimport TokenTransferMap from \"../account/TokenTransferMap.js\";\nimport TokenNftTransferMap from \"../account/TokenNftTransferMap.js\";\nimport * as proto from \"@hashgraph/proto\";\nimport ScheduleId from \"../schedule/ScheduleId.js\";\nimport AssessedCustomFee from \"../token/AssessedCustomFee.js\";\nimport TokenAssocation from \"../token/TokenAssociation.js\";\nimport Key from \"../Key.js\";\nimport PublicKey from \"../PublicKey.js\";\n\n/**\n * @typedef {import(\"../token/TokenId.js\").default} TokenId\n */\n\n/**\n * Response when the client sends the node TransactionGetRecordResponse.\n */\nexport default class TransactionRecord {\n    /**\n     * @private\n     * @param {object} props\n     * @param {ContractFunctionResult} [props.contractFunctionResult]\n     * @param {TransactionReceipt} props.receipt\n     * @param {Uint8Array} props.transactionHash\n     * @param {Timestamp} props.consensusTimestamp\n     * @param {TransactionId} props.transactionId\n     * @param {string} props.transactionMemo\n     * @param {Hbar} props.transactionFee\n     * @param {Transfer[]} props.transfers\n     * @param {TokenTransferMap} props.tokenTransfers\n     * @param {?ScheduleId} props.scheduleRef\n     * @param {AssessedCustomFee[]} props.assessedCustomFees\n     * @param {TokenNftTransferMap} props.nftTransfers\n     * @param {TokenAssocation[]} props.automaticTokenAssociations\n     * @param {Timestamp | null} props.parentConsensusTimestamp\n     * @param {PublicKey | null} props.aliasKey\n     * @param {TransactionRecord[]} props.duplicates\n     * @param {TransactionRecord[]} props.children\n     */\n    constructor(props) {\n        /**\n         * The status (reach consensus, or failed, or is unknown) and the ID of\n         * any new account/file/instance created.\n         *\n         * @readonly\n         */\n        this.receipt = props.receipt;\n\n        /**\n         * The hash of the Transaction that executed (not the hash of any Transaction that failed\n         * for having a duplicate TransactionID).\n         *\n         * @readonly\n         */\n        this.transactionHash = props.transactionHash;\n\n        /**\n         * The consensus timestamp (or null if didn't reach consensus yet).\n         *\n         * @readonly\n         */\n        this.consensusTimestamp = props.consensusTimestamp;\n\n        /**\n         * The ID of the transaction this record represents.\n         *\n         * @readonly\n         */\n        this.transactionId = props.transactionId;\n\n        /**\n         * The memo that was submitted as part of the transaction (max 100 bytes).\n         *\n         * @readonly\n         */\n        this.transactionMemo = props.transactionMemo;\n\n        /**\n         * The actual transaction fee charged,\n         * not the original transactionFee value from TransactionBody.\n         *\n         * @readonly\n         */\n        this.transactionFee = props.transactionFee;\n\n        /**\n         * All hbar transfers as a result of this transaction, such as fees, or transfers performed\n         * by the transaction, or by a smart contract it calls, or by the creation of threshold\n         * records that it triggers.\n         *\n         * @readonly\n         */\n        this.transfers = props.transfers;\n\n        /**\n         * Record of the value returned by the smart contract function or constructor.\n         *\n         * @readonly\n         */\n        this.contractFunctionResult =\n            props.contractFunctionResult != null\n                ? props.contractFunctionResult\n                : null;\n\n        /**\n         * All the token transfers from this account\n         *\n         * @readonly\n         */\n        this.tokenTransfers = props.tokenTransfers;\n\n        /**\n         * Reference to the scheduled transaction ID that this transaction record represent\n         *\n         * @readonly\n         */\n        this.scheduleRef = props.scheduleRef;\n\n        /**\n         * All custom fees that were assessed during a CryptoTransfer, and must be paid if the\n         * transaction status resolved to SUCCESS\n         *\n         * @readonly\n         */\n        this.assessedCustomFees = props.assessedCustomFees;\n\n        /** @readonly */\n        this.nftTransfers = props.nftTransfers;\n\n        /**\n         * All token associations implicitly created while handling this transaction\n         *\n         * @readonly\n         */\n        this.automaticTokenAssociations = props.automaticTokenAssociations;\n\n        /**\n         * The parent consensus timestamp\n         *\n         * @readonly\n         */\n        this.parentConsensusTimestamp = props.parentConsensusTimestamp;\n\n        this.aliasKey = props.aliasKey;\n\n        /**\n         * @readonly\n         */\n        this.duplicates = props.duplicates;\n\n        /**\n         * @readonly\n         */\n        this.children = props.children;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @returns {proto.ITransactionGetRecordResponse}\n     */\n    _toProtobuf() {\n        const tokenTransfers = this.tokenTransfers._toProtobuf();\n        const nftTransfers = this.nftTransfers._toProtobuf();\n\n        const tokenTransferLists = [];\n\n        for (const tokenTransfer of tokenTransfers) {\n            for (const nftTransfer of nftTransfers) {\n                if (\n                    tokenTransfer.token != null &&\n                    nftTransfer.token != null &&\n                    tokenTransfer.token.shardNum ===\n                        nftTransfer.token.shardNum &&\n                    tokenTransfer.token.realmNum ===\n                        nftTransfer.token.realmNum &&\n                    tokenTransfer.token.tokenNum === nftTransfer.token.tokenNum\n                ) {\n                    tokenTransferLists.push({\n                        token: tokenTransfer.token,\n                        transfers: tokenTransfer.transfers,\n                        nftTransfers: tokenTransfer.nftTransfers,\n                    });\n                } else {\n                    tokenTransferLists.push(tokenTransfer);\n                    tokenTransferLists.push(nftTransfer);\n                }\n            }\n        }\n\n        const duplicates = this.duplicates.map(\n            (record) =>\n                /** @type {proto.ITransactionRecord} */ (\n                    record._toProtobuf().transactionRecord\n                )\n        );\n        const children = this.children.map(\n            (record) =>\n                /** @type {proto.ITransactionRecord} */ (\n                    record._toProtobuf().transactionRecord\n                )\n        );\n\n        return {\n            duplicateTransactionRecords: duplicates,\n            childTransactionRecords: children,\n            transactionRecord: {\n                receipt: this.receipt._toProtobuf().receipt,\n\n                transactionHash:\n                    this.transactionHash != null ? this.transactionHash : null,\n                consensusTimestamp:\n                    this.consensusTimestamp != null\n                        ? this.consensusTimestamp._toProtobuf()\n                        : null,\n                transactionID:\n                    this.transactionId != null\n                        ? this.transactionId._toProtobuf()\n                        : null,\n                memo:\n                    this.transactionMemo != null ? this.transactionMemo : null,\n\n                transactionFee:\n                    this.transactionFee != null\n                        ? this.transactionFee.toTinybars()\n                        : null,\n\n                contractCallResult:\n                    this.contractFunctionResult != null\n                        ? this.contractFunctionResult\n                        : null,\n\n                contractCreateResult:\n                    this.contractFunctionResult != null\n                        ? this.contractFunctionResult\n                        : null,\n\n                transferList:\n                    this.transfers != null\n                        ? {\n                              accountAmounts: this.transfers.map((transfer) =>\n                                  transfer._toProtobuf()\n                              ),\n                          }\n                        : null,\n                tokenTransferLists,\n                scheduleRef:\n                    this.scheduleRef != null\n                        ? this.scheduleRef._toProtobuf()\n                        : null,\n                assessedCustomFees: this.assessedCustomFees.map((fee) =>\n                    fee._toProtobuf()\n                ),\n                automaticTokenAssociations: this.automaticTokenAssociations.map(\n                    (association) => association._toProtobuf()\n                ),\n                parentConsensusTimestamp:\n                    this.parentConsensusTimestamp != null\n                        ? this.parentConsensusTimestamp._toProtobuf()\n                        : null,\n                alias:\n                    this.aliasKey != null\n                        ? proto.Key.encode(\n                              this.aliasKey._toProtobufKey()\n                          ).finish()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransactionGetRecordResponse} response\n     * @returns {TransactionRecord}\n     */\n    static _fromProtobuf(response) {\n        const record = /** @type {proto.ITransactionRecord} */ (\n            response.transactionRecord\n        );\n\n        let aliasKey =\n            record.alias != null && record.alias.length > 0\n                ? Key._fromProtobufKey(proto.Key.decode(record.alias))\n                : null;\n\n        if (!(aliasKey instanceof PublicKey)) {\n            aliasKey = null;\n        }\n\n        const children =\n            response.childTransactionRecords != null\n                ? response.childTransactionRecords.map((child) =>\n                      TransactionRecord._fromProtobuf({\n                          transactionRecord: child,\n                      })\n                  )\n                : [];\n\n        const duplicates =\n            response.duplicateTransactionRecords != null\n                ? response.duplicateTransactionRecords.map((duplicate) =>\n                      TransactionRecord._fromProtobuf({\n                          transactionRecord: duplicate,\n                      })\n                  )\n                : [];\n\n        const contractFunctionResult =\n            record.contractCallResult != null\n                ? ContractFunctionResult._fromProtobuf(\n                      record.contractCallResult\n                  )\n                : record.contractCreateResult != null\n                ? ContractFunctionResult._fromProtobuf(\n                      record.contractCreateResult\n                  )\n                : undefined;\n\n        return new TransactionRecord({\n            receipt: TransactionReceipt._fromProtobuf({\n                receipt: /** @type {proto.ITransactionReceipt} */ (\n                    record.receipt\n                ),\n            }),\n            transactionHash:\n                record.transactionHash != null\n                    ? record.transactionHash\n                    : new Uint8Array(),\n            consensusTimestamp: Timestamp._fromProtobuf(\n                /** @type {proto.ITimestamp} */\n                (record.consensusTimestamp)\n            ),\n            transactionId: TransactionId._fromProtobuf(\n                /** @type {proto.ITransactionID} */ (record.transactionID)\n            ),\n            transactionMemo: record.memo != null ? record.memo : \"\",\n            transactionFee: Hbar.fromTinybars(\n                record.transactionFee != null ? record.transactionFee : 0\n            ),\n            transfers: (record.transferList != null\n                ? record.transferList.accountAmounts != null\n                    ? record.transferList.accountAmounts\n                    : []\n                : []\n            ).map((aa) => Transfer._fromProtobuf(aa)),\n            contractFunctionResult,\n            tokenTransfers: TokenTransferMap._fromProtobuf(\n                record.tokenTransferLists != null\n                    ? record.tokenTransferLists\n                    : []\n            ),\n            scheduleRef:\n                record.scheduleRef != null\n                    ? ScheduleId._fromProtobuf(record.scheduleRef)\n                    : null,\n            assessedCustomFees:\n                record.assessedCustomFees != null\n                    ? record.assessedCustomFees.map((fee) =>\n                          AssessedCustomFee._fromProtobuf(fee)\n                      )\n                    : [],\n            nftTransfers: TokenNftTransferMap._fromProtobuf(\n                record.tokenTransferLists != null\n                    ? record.tokenTransferLists\n                    : []\n            ),\n            automaticTokenAssociations:\n                record.automaticTokenAssociations != null\n                    ? record.automaticTokenAssociations.map((association) =>\n                          TokenAssocation._fromProtobuf(association)\n                      )\n                    : [],\n            parentConsensusTimestamp:\n                record.parentConsensusTimestamp != null\n                    ? Timestamp._fromProtobuf(record.parentConsensusTimestamp)\n                    : null,\n            aliasKey,\n            duplicates,\n            children,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionRecord}\n     */\n    static fromBytes(bytes) {\n        return TransactionRecord._fromProtobuf(\n            proto.TransactionGetRecordResponse.decode(bytes)\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.TransactionGetRecordResponse.encode(\n            this._toProtobuf()\n        ).finish();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}