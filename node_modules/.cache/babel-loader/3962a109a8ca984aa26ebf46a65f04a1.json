{"ast":null,"code":"/** @typedef {import(\"./Mnemonic.js\").default} Mnemonic */\nimport BadMnemonicReason from \"./BadMnemonicReason.js\";\nexport default class BadMnemonicError extends Error {\n  /**\n   * @param {Mnemonic} mnemonic\n   * @param {string} reason\n   * @param {number[]} unknownWordIndices\n   * @hideconstructor\n   */\n  constructor(mnemonic, reason, unknownWordIndices) {\n    let reasonMessage;\n\n    switch (reason) {\n      case BadMnemonicReason.BadLength:\n        reasonMessage = \"mnemonic is of an unexpected number of words\";\n        break;\n\n      case BadMnemonicReason.ChecksumMismatch:\n        reasonMessage = \"checksum byte in mnemonic did not match the rest of the mnemonic\";\n        break;\n\n      case BadMnemonicReason.UnknownWords:\n        reasonMessage = \"mnemonic contained words that are not in the standard word list\";\n        break;\n\n      default:\n        throw new Error(`unexpected value ${reason.toString()} for 'reason'`);\n    }\n\n    super(`invalid mnemonic: ${reasonMessage}`);\n\n    if (typeof Error.captureStackTrace !== \"undefined\") {\n      Error.captureStackTrace(this, BadMnemonicError);\n    }\n\n    this.name = \"BadMnemonicError\";\n    /** The reason for which the mnemonic failed validation. */\n\n    this.reason = reason;\n    /** The mnemonic that failed validation. */\n\n    this.mnemonic = mnemonic;\n    /**\n     * The indices in the mnemonic that were not found in the BIP-39\n     * standard English word list.\n     */\n\n    this.unknownWordIndices = unknownWordIndices;\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/cryptography/src/BadMnemonicError.js"],"names":["BadMnemonicReason","BadMnemonicError","Error","constructor","mnemonic","reason","unknownWordIndices","reasonMessage","BadLength","ChecksumMismatch","UnknownWords","toString","captureStackTrace","name"],"mappings":"AAAA;AACA,OAAOA,iBAAP,MAA8B,wBAA9B;AAEA,eAAe,MAAMC,gBAAN,SAA+BC,KAA/B,CAAqC;AAChD;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,QAAD,EAAWC,MAAX,EAAmBC,kBAAnB,EAAuC;AAC9C,QAAIC,aAAJ;;AAEA,YAAQF,MAAR;AACI,WAAKL,iBAAiB,CAACQ,SAAvB;AACID,QAAAA,aAAa,GAAG,8CAAhB;AACA;;AAEJ,WAAKP,iBAAiB,CAACS,gBAAvB;AACIF,QAAAA,aAAa,GACT,kEADJ;AAEA;;AAEJ,WAAKP,iBAAiB,CAACU,YAAvB;AACIH,QAAAA,aAAa,GACT,iEADJ;AAEA;;AAEJ;AACI,cAAM,IAAIL,KAAJ,CACD,oBAAmBG,MAAM,CAACM,QAAP,EAAkB,eADpC,CAAN;AAhBR;;AAqBA,UAAO,qBAAoBJ,aAAc,EAAzC;;AAEA,QAAI,OAAOL,KAAK,CAACU,iBAAb,KAAmC,WAAvC,EAAoD;AAChDV,MAAAA,KAAK,CAACU,iBAAN,CAAwB,IAAxB,EAA8BX,gBAA9B;AACH;;AAED,SAAKY,IAAL,GAAY,kBAAZ;AAEA;;AACA,SAAKR,MAAL,GAAcA,MAAd;AAEA;;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AAEA;AACR;AACA;AACA;;AACQ,SAAKE,kBAAL,GAA0BA,kBAA1B;AACH;;AAlD+C","sourcesContent":["/** @typedef {import(\"./Mnemonic.js\").default} Mnemonic */\nimport BadMnemonicReason from \"./BadMnemonicReason.js\";\n\nexport default class BadMnemonicError extends Error {\n    /**\n     * @param {Mnemonic} mnemonic\n     * @param {string} reason\n     * @param {number[]} unknownWordIndices\n     * @hideconstructor\n     */\n    constructor(mnemonic, reason, unknownWordIndices) {\n        let reasonMessage;\n\n        switch (reason) {\n            case BadMnemonicReason.BadLength:\n                reasonMessage = \"mnemonic is of an unexpected number of words\";\n                break;\n\n            case BadMnemonicReason.ChecksumMismatch:\n                reasonMessage =\n                    \"checksum byte in mnemonic did not match the rest of the mnemonic\";\n                break;\n\n            case BadMnemonicReason.UnknownWords:\n                reasonMessage =\n                    \"mnemonic contained words that are not in the standard word list\";\n                break;\n\n            default:\n                throw new Error(\n                    `unexpected value ${reason.toString()} for 'reason'`\n                );\n        }\n\n        super(`invalid mnemonic: ${reasonMessage}`);\n\n        if (typeof Error.captureStackTrace !== \"undefined\") {\n            Error.captureStackTrace(this, BadMnemonicError);\n        }\n\n        this.name = \"BadMnemonicError\";\n\n        /** The reason for which the mnemonic failed validation. */\n        this.reason = reason;\n\n        /** The mnemonic that failed validation. */\n        this.mnemonic = mnemonic;\n\n        /**\n         * The indices in the mnemonic that were not found in the BIP-39\n         * standard English word list.\n         */\n        this.unknownWordIndices = unknownWordIndices;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}