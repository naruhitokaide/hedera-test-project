{"ast":null,"code":"import AccountId from \"./account/AccountId.js\";\nimport Hbar from \"./Hbar.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IAccountAmount} proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"long\")} Long\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency transfer.\n */\n\nexport default class Transfer {\n  /**\n   * @internal\n   * @param {object} props\n   * @param {AccountId | string} props.accountId\n   * @param {number | string | Long | BigNumber | Hbar} props.amount\n   */\n  constructor(props) {\n    /**\n     * The Account ID that sends or receives cryptocurrency.\n     *\n     * @readonly\n     */\n    this.accountId = props.accountId instanceof AccountId ? props.accountId : AccountId.fromString(props.accountId);\n    /**\n     * The amount of tinybars that the account sends(negative) or receives(positive).\n     *\n     * @readonly\n     */\n\n    this.amount = props.amount instanceof Hbar ? props.amount : new Hbar(props.amount);\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {proto.IAccountAmount} transfer\n   * @returns {Transfer}\n   */\n\n\n  static _fromProtobuf(transfer) {\n    return new Transfer({\n      accountId: AccountId._fromProtobuf(\n      /** @type {proto.IAccountID} */\n      transfer.accountID),\n      amount: Hbar.fromTinybars(transfer.amount != null ? transfer.amount : 0)\n    });\n  }\n  /**\n   * @internal\n   * @returns {proto.IAccountAmount}\n   */\n\n\n  _toProtobuf() {\n    return {\n      accountID: this.accountId._toProtobuf(),\n      amount: this.amount.toTinybars()\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/Transfer.js"],"names":["AccountId","Hbar","Transfer","constructor","props","accountId","fromString","amount","Object","freeze","_fromProtobuf","transfer","accountID","fromTinybars","_toProtobuf","toTinybars"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,QAAN,CAAe;AAC1B;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACR;AACA;AACA;AACA;AACQ,SAAKC,SAAL,GACID,KAAK,CAACC,SAAN,YAA2BL,SAA3B,GACMI,KAAK,CAACC,SADZ,GAEML,SAAS,CAACM,UAAV,CAAqBF,KAAK,CAACC,SAA3B,CAHV;AAKA;AACR;AACA;AACA;AACA;;AACQ,SAAKE,MAAL,GACIH,KAAK,CAACG,MAAN,YAAwBN,IAAxB,GACMG,KAAK,CAACG,MADZ,GAEM,IAAIN,IAAJ,CAASG,KAAK,CAACG,MAAf,CAHV;AAKAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbC,aAAa,CAACC,QAAD,EAAW;AAC3B,WAAO,IAAIT,QAAJ,CAAa;AAChBG,MAAAA,SAAS,EAAEL,SAAS,CAACU,aAAV;AACP;AAAiCC,MAAAA,QAAQ,CAACC,SADnC,CADK;AAIhBL,MAAAA,MAAM,EAAEN,IAAI,CAACY,YAAL,CACJF,QAAQ,CAACJ,MAAT,IAAmB,IAAnB,GAA0BI,QAAQ,CAACJ,MAAnC,GAA4C,CADxC;AAJQ,KAAb,CAAP;AAQH;AAED;AACJ;AACA;AACA;;;AACIO,EAAAA,WAAW,GAAG;AACV,WAAO;AACHF,MAAAA,SAAS,EAAE,KAAKP,SAAL,CAAeS,WAAf,EADR;AAEHP,MAAAA,MAAM,EAAE,KAAKA,MAAL,CAAYQ,UAAZ;AAFL,KAAP;AAIH;;AAxDyB","sourcesContent":["import AccountId from \"./account/AccountId.js\";\nimport Hbar from \"./Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IAccountAmount} proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"long\")} Long\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency transfer.\n */\nexport default class Transfer {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {AccountId | string} props.accountId\n     * @param {number | string | Long | BigNumber | Hbar} props.amount\n     */\n    constructor(props) {\n        /**\n         * The Account ID that sends or receives cryptocurrency.\n         *\n         * @readonly\n         */\n        this.accountId =\n            props.accountId instanceof AccountId\n                ? props.accountId\n                : AccountId.fromString(props.accountId);\n\n        /**\n         * The amount of tinybars that the account sends(negative) or receives(positive).\n         *\n         * @readonly\n         */\n        this.amount =\n            props.amount instanceof Hbar\n                ? props.amount\n                : new Hbar(props.amount);\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.IAccountAmount} transfer\n     * @returns {Transfer}\n     */\n    static _fromProtobuf(transfer) {\n        return new Transfer({\n            accountId: AccountId._fromProtobuf(\n                /** @type {proto.IAccountID} */ (transfer.accountID)\n            ),\n            amount: Hbar.fromTinybars(\n                transfer.amount != null ? transfer.amount : 0\n            ),\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {proto.IAccountAmount}\n     */\n    _toProtobuf() {\n        return {\n            accountID: this.accountId._toProtobuf(),\n            amount: this.amount.toTinybars(),\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}