{"ast":null,"code":"var _jsxFileName = \"C:\\\\Work\\\\coding-sandbox\\\\react-again\\\\dapp-days\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction, TokenMintTransaction } from \"@hashgraph/sdk\";\nimport operator from \"./config.js\";\nimport MyButton from \"./components/MyButton.jsx\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const operatorId = AccountId.fromString(operator.id);\n  const operatorKey = PrivateKey.fromString(operator.pvkey);\n  const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n  const [tokenId, setTokenId] = useState();\n\n  async function tokenCreate() {\n    console.log(\"- Creating token\");\n    const tokenCreateTx = new TokenCreateTransaction().setTokenName(\"dAppDayToken\").setTokenSymbol(\"DDT\").setTreasuryAccountId(operatorId).setInitialSupply(100).setDecimals(0).setSupplyKey(operatorKey).freezeWith(client);\n    const tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n    const tokenCreateSubmit = await tokenCreateSign.execute(client);\n    const tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n    const id = tokenCreateRec.receipt.tokenId;\n    setTokenId(id);\n  }\n\n  const [tokenSupply, setTokenSupply] = useState();\n\n  async function tokenMint() {\n    try {\n      console.log(\"- Minting new tokens!\");\n      const tokenMintTx = new TokenMintTransaction().setTokenId(tokenId).setAmount(100).freezeWith(client);\n      const tokenMintSign = await tokenMintTx.sign(operatorKey);\n      const tokenMintSubmit = await tokenMintSign.execute(client);\n      const tokenMintRec = await tokenMintSubmit.getRecord(client);\n      const supply = tokenMintRec.receipt.totalSupply;\n      setTokenSupply(supply);\n    } catch {\n      console.log(`Create a token first!`);\n    }\n  }\n\n  let tokenCreationText;\n  let tokenSupplyText;\n\n  if (tokenId === undefined) {\n    tokenCreationText = \"\";\n    tokenSupplyText = \"\";\n    console.log(`Nothing  yet`);\n  } else {\n    tokenCreationText = `Created token with ID: ${tokenId}`;\n    tokenSupplyText = `Token supply: ${tokenSupply}`;\n    console.log(`Token ID ${tokenId}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(MyButton, {\n      fcn: tokenCreate,\n      text: \"Create New Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: tokenCreationText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }, this), \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(MyButton, {\n        fcn: tokenMint,\n        text: \"Mint New Tokens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: tokenSupplyText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"cyChN+Y2Mh0uUpwWMDFnDUybyMg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/src/App.jsx"],"names":["React","useState","useRef","Client","AccountId","PrivateKey","TokenCreateTransaction","TokenMintTransaction","operator","MyButton","App","operatorId","fromString","id","operatorKey","pvkey","client","forTestnet","setOperator","tokenId","setTokenId","tokenCreate","console","log","tokenCreateTx","setTokenName","setTokenSymbol","setTreasuryAccountId","setInitialSupply","setDecimals","setSupplyKey","freezeWith","tokenCreateSign","sign","tokenCreateSubmit","execute","tokenCreateRec","getRecord","receipt","tokenSupply","setTokenSupply","tokenMint","tokenMintTx","setAmount","tokenMintSign","tokenMintSubmit","tokenMintRec","supply","totalSupply","tokenCreationText","tokenSupplyText","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction, TokenMintTransaction } from \"@hashgraph/sdk\";\nimport operator from \"./config.js\";\nimport MyButton from \"./components/MyButton.jsx\";\nimport \"./styles/App.css\";\n\nfunction App() {\n\tconst operatorId = AccountId.fromString(operator.id);\n\tconst operatorKey = PrivateKey.fromString(operator.pvkey);\n\tconst client = Client.forTestnet().setOperator(operatorId, operatorKey);\n\n\tconst [tokenId, setTokenId] = useState();\n\tasync function tokenCreate() {\n\t\tconsole.log(\"- Creating token\");\n\n\t\tconst tokenCreateTx = new TokenCreateTransaction()\n\t\t\t.setTokenName(\"dAppDayToken\")\n\t\t\t.setTokenSymbol(\"DDT\")\n\t\t\t.setTreasuryAccountId(operatorId)\n\t\t\t.setInitialSupply(100)\n\t\t\t.setDecimals(0)\n\t\t\t.setSupplyKey(operatorKey)\n\t\t\t.freezeWith(client);\n\t\tconst tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n\t\tconst tokenCreateSubmit = await tokenCreateSign.execute(client);\n\t\tconst tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n\t\tconst id = tokenCreateRec.receipt.tokenId;\n\t\tsetTokenId(id);\n\t}\n\n\tconst [tokenSupply, setTokenSupply] = useState();\n\tasync function tokenMint() {\n\t\ttry {\n\t\t\tconsole.log(\"- Minting new tokens!\");\n\n\t\t\tconst tokenMintTx = new TokenMintTransaction().setTokenId(tokenId).setAmount(100).freezeWith(client);\n\t\t\tconst tokenMintSign = await tokenMintTx.sign(operatorKey);\n\t\t\tconst tokenMintSubmit = await tokenMintSign.execute(client);\n\t\t\tconst tokenMintRec = await tokenMintSubmit.getRecord(client);\n\t\t\tconst supply = tokenMintRec.receipt.totalSupply;\n\t\t\tsetTokenSupply(supply);\n\t\t} catch {\n\t\t\tconsole.log(`Create a token first!`);\n\t\t}\n\t}\n\n\tlet tokenCreationText;\n\tlet tokenSupplyText;\n\tif (tokenId === undefined) {\n\t\ttokenCreationText = \"\";\n\t\ttokenSupplyText = \"\";\n\t\tconsole.log(`Nothing  yet`);\n\t} else {\n\t\ttokenCreationText = `Created token with ID: ${tokenId}`;\n\t\ttokenSupplyText = `Token supply: ${tokenSupply}`;\n\t\tconsole.log(`Token ID ${tokenId}`);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<MyButton fcn={tokenCreate} text={\"Create New Token\"} />\n\t\t\t<p>{tokenCreationText}</p>\n\t\t\t{\"\"}\n\t\t\t<div>\n\t\t\t\t{/* <input type=\"text\" /> */}\n\t\t\t\t<MyButton fcn={tokenMint} text={\"Mint New Tokens\"} />\n\t\t\t\t<p>{tokenSupplyText}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}