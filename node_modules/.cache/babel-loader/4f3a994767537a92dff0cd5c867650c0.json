{"ast":null,"code":"import * as pbkdf2 from \"../primitive/pbkdf2.js\";\nimport * as hmac from \"../primitive/hmac.js\";\n/**\n * @param {Uint8Array} seed\n * @param {number} index\n * @returns {Promise<Uint8Array>}\n */\n\nexport function legacy(seed, index) {\n  const password = new Uint8Array(seed.length + 8);\n  password.set(seed, 0);\n  const view = new DataView(password.buffer, password.byteOffset, password.byteLength);\n\n  if (index === 0xffffffffff) {\n    view.setInt32(seed.length + 0, 0xff);\n    view.setInt32(seed.length + 4, -1); // 0xffffffff\n  } else {\n    view.setInt32(seed.length + 0, index < 0 ? -1 : 0);\n    view.setInt32(seed.length + 4, index);\n  }\n\n  const salt = Uint8Array.from([0xff]);\n  return pbkdf2.deriveKey(hmac.HashAlgorithm.Sha512, password, salt, 2048, 32);\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/cryptography/src/util/derive.js"],"names":["pbkdf2","hmac","legacy","seed","index","password","Uint8Array","length","set","view","DataView","buffer","byteOffset","byteLength","setInt32","salt","from","deriveKey","HashAlgorithm","Sha512"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,IAAZ,MAAsB,sBAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AAChC,QAAMC,QAAQ,GAAG,IAAIC,UAAJ,CAAeH,IAAI,CAACI,MAAL,GAAc,CAA7B,CAAjB;AACAF,EAAAA,QAAQ,CAACG,GAAT,CAAaL,IAAb,EAAmB,CAAnB;AAEA,QAAMM,IAAI,GAAG,IAAIC,QAAJ,CACTL,QAAQ,CAACM,MADA,EAETN,QAAQ,CAACO,UAFA,EAGTP,QAAQ,CAACQ,UAHA,CAAb;;AAMA,MAAIT,KAAK,KAAK,YAAd,EAA4B;AACxBK,IAAAA,IAAI,CAACK,QAAL,CAAcX,IAAI,CAACI,MAAL,GAAc,CAA5B,EAA+B,IAA/B;AACAE,IAAAA,IAAI,CAACK,QAAL,CAAcX,IAAI,CAACI,MAAL,GAAc,CAA5B,EAA+B,CAAC,CAAhC,EAFwB,CAEY;AACvC,GAHD,MAGO;AACHE,IAAAA,IAAI,CAACK,QAAL,CAAcX,IAAI,CAACI,MAAL,GAAc,CAA5B,EAA+BH,KAAK,GAAG,CAAR,GAAY,CAAC,CAAb,GAAiB,CAAhD;AACAK,IAAAA,IAAI,CAACK,QAAL,CAAcX,IAAI,CAACI,MAAL,GAAc,CAA5B,EAA+BH,KAA/B;AACH;;AAED,QAAMW,IAAI,GAAGT,UAAU,CAACU,IAAX,CAAgB,CAAC,IAAD,CAAhB,CAAb;AACA,SAAOhB,MAAM,CAACiB,SAAP,CACHhB,IAAI,CAACiB,aAAL,CAAmBC,MADhB,EAEHd,QAFG,EAGHU,IAHG,EAIH,IAJG,EAKH,EALG,CAAP;AAOH","sourcesContent":["import * as pbkdf2 from \"../primitive/pbkdf2.js\";\nimport * as hmac from \"../primitive/hmac.js\";\n\n/**\n * @param {Uint8Array} seed\n * @param {number} index\n * @returns {Promise<Uint8Array>}\n */\nexport function legacy(seed, index) {\n    const password = new Uint8Array(seed.length + 8);\n    password.set(seed, 0);\n\n    const view = new DataView(\n        password.buffer,\n        password.byteOffset,\n        password.byteLength\n    );\n\n    if (index === 0xffffffffff) {\n        view.setInt32(seed.length + 0, 0xff);\n        view.setInt32(seed.length + 4, -1); // 0xffffffff\n    } else {\n        view.setInt32(seed.length + 0, index < 0 ? -1 : 0);\n        view.setInt32(seed.length + 4, index);\n    }\n\n    const salt = Uint8Array.from([0xff]);\n    return pbkdf2.deriveKey(\n        hmac.HashAlgorithm.Sha512,\n        password,\n        salt,\n        2048,\n        32\n    );\n}\n"]},"metadata":{},"sourceType":"module"}