{"ast":null,"code":"import BigNumber from \"bignumber.js\";\nimport Long from \"long\";\n/**\n * Utility Error Messages\n */\n\nexport const REQUIRE_NON_NULL_ERROR = \"This value cannot be null | undefined.\";\nexport const REQUIRE_STRING_ERROR = \"This value must be a string.\";\nexport const REQUIRE_UINT8ARRAY_ERROR = \"This value must be a Uint8Array.\";\nexport const REQUIRE_STRING_OR_UINT8ARRAY_ERROR = \"This value must be a string or Uint8Array.\";\nexport const REQUIRE_NUMBER_ERROR = \"This value must be a Number.\";\nexport const REQUIRE_BIGNUMBER_ERROR = \"This value must be a BigNumber.\";\nexport const REQUIRE_ARRAY_ERROR = \"The provided variable must be an Array.\";\nexport const REQUIRE_LONG_ERROR = \"This value must be a Long.\";\nexport const REQUIRE_TYPE_ERROR = \"The provided variables are not matching types.\";\nexport const FUNCTION_CONVERT_TO_BIGNUMBER_ERROR = \"This value must be a String, Number, or BigNumber to be converted.\";\nexport const FUNCTION_CONVERT_TO_NUMBER_ERROR = \"This value must be a String, Number, or BigNumber to be converted.\";\nexport const FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR = \"Unable to parse given variable. Returns NaN.\"; //Soft Checks\n\n/**\n * Takes any param and returns false if null or undefined.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isNonNull(variable) {\n  if (variable == null || variable == undefined) {\n    return false;\n  } else {\n    return true;\n  }\n}\n/**\n * Takes any param and returns true if param variable and type are the same.\n *\n * @param {any | null | undefined} variable\n * @param {any | null | undefined} type\n * @returns {boolean}\n */\n\nexport function isType(variable, type) {\n  return typeof variable == typeof type;\n}\n/**\n * Takes any param and returns true if param is not null and of type Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isUint8Array(variable) {\n  return isNonNull(variable) && variable instanceof Uint8Array;\n}\n/**\n * Takes any param and returns true if param is not null and of type Number.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isNumber(variable) {\n  return isNonNull(variable) && (typeof variable == \"number\" || variable instanceof Number);\n}\n/**\n * Takes any param and returns true if param is not null and of type BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isBigNumber(variable) {\n  return isNonNull(variable) && variable instanceof BigNumber;\n}\n/**\n * Takes any param and returns true if param is not null and of type BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isLong(variable) {\n  return isNonNull(variable) && variable instanceof Long;\n}\n/**\n * Takes any param and returns true if param is not null and of type string.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isString(variable) {\n  return isNonNull(variable) && typeof variable == \"string\";\n}\n/**\n * Takes any param and returns true if param is not null and type string or Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\n\nexport function isStringOrUint8Array(variable) {\n  return isNonNull(variable) && (isString(variable) || isUint8Array(variable));\n} //Requires\n\n/**\n * Takes any param and throws custom error if null or undefined.\n *\n * @param {any} variable\n * @returns {object}\n */\n\nexport function requireNonNull(variable) {\n  if (!isNonNull(variable)) {\n    throw new Error(REQUIRE_NON_NULL_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return variable;\n  }\n}\n/**\n * Takes any param and throws custom error if params are not same type.\n *\n * @param {any | null | undefined} variable\n * @param {any | null | undefined} type\n * @returns {object}\n */\n\nexport function requireType(variable, type) {\n  if (!isType(variable, type)) {\n    throw new Error(REQUIRE_TYPE_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return variable;\n  }\n}\n/**\n * Takes any param and throws custom error if non BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {BigNumber}\n */\n\nexport function requireBigNumber(variable) {\n  if (!isBigNumber(requireNonNull(variable))) {\n    throw new Error(REQUIRE_BIGNUMBER_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {BigNumber} */\n      variable\n    );\n  }\n}\n/**\n * Takes any param and throws custom error if non BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {Long}\n */\n\nexport function requireLong(variable) {\n  if (!isLong(requireNonNull(variable))) {\n    throw new Error(REQUIRE_LONG_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {Long} */\n      variable\n    );\n  }\n}\n/**\n * Takes any param and throws custom error if non string.\n *\n * @param {any | null | undefined} variable\n * @returns {string}\n */\n\nexport function requireString(variable) {\n  if (!isString(requireNonNull(variable))) {\n    throw new Error(REQUIRE_STRING_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {string} */\n      variable\n    );\n  }\n}\n/**\n * Takes any param and throws custom error if non Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {Uint8Array}\n */\n\nexport function requireUint8Array(variable) {\n  if (!isUint8Array(requireNonNull(variable))) {\n    throw new Error(REQUIRE_UINT8ARRAY_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {Uint8Array} */\n      variable\n    );\n  }\n}\n/**\n * Takes any param and throws custom error if non Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {number}\n */\n\nexport function requireNumber(variable) {\n  if (!isNumber(requireNonNull(variable))) {\n    throw new Error(REQUIRE_NUMBER_ERROR);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {number} */\n      variable\n    );\n  }\n}\n/**\n * Takes any param and throws custom error if null or undefined and not a string or Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {string | Uint8Array}\n */\n\nexport function requireStringOrUint8Array(variable) {\n  if (isStringOrUint8Array(requireNonNull(variable))) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return (\n      /** @type {string | Uint8Array} */\n      variable\n    );\n  } else {\n    throw new Error(REQUIRE_STRING_OR_UINT8ARRAY_ERROR);\n  }\n} //Conversions\n\n/**\n * Converts number or string to BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {BigNumber}\n */\n\nexport function convertToBigNumber(variable) {\n  requireNonNull(variable);\n\n  if (isBigNumber(variable) || isString(variable) || isNumber(variable) || isLong(variable)) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return new BigNumber(variable);\n  }\n\n  throw new Error(FUNCTION_CONVERT_TO_BIGNUMBER_ERROR);\n}\n/**\n * Converts Array of Numbers or Strings to Array of BigNumbers.\n *\n * @param {any | null | undefined} variable\n * @returns {Array<BigNumber>}\n */\n\nexport function convertToBigNumberArray(variable) {\n  if (variable instanceof Array) {\n    return (\n      /** @type {Array<BigNumber>} */\n      variable.map(convertToBigNumber)\n    );\n  } else {\n    throw new Error(REQUIRE_ARRAY_ERROR);\n  }\n}\n/**\n * @param {*} variable\n * @returns {number}\n */\n\nexport function convertToNumber(variable) {\n  requireNonNull(variable);\n\n  if (isBigNumber(variable) || isString(variable) || isNumber(variable) || isLong(variable)) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const num = parseInt(variable);\n\n    if (isNaN(num)) {\n      throw new Error(FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR);\n    } else {\n      return num;\n    }\n  } else {\n    throw new Error(FUNCTION_CONVERT_TO_NUMBER_ERROR);\n  }\n}\n/**\n * Creates a DataView on top of an Uint8Array that could be or not be pooled, ensuring that we don't get out of bounds.\n *\n * @param {Uint8Array} arr\n * @param {number | undefined} offset\n * @param {number | undefined} length\n * @returns {DataView}\n */\n\nexport function safeView(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.byteLength;\n  if (!(Number.isInteger(offset) && offset >= 0)) throw new Error(\"Invalid offset!\");\n  if (!(Number.isInteger(length) && length >= 0)) throw new Error(\"Invalid length!\");\n  return new DataView(arr.buffer, arr.byteOffset + offset, Math.min(length, arr.byteLength - offset));\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/util.js"],"names":["BigNumber","Long","REQUIRE_NON_NULL_ERROR","REQUIRE_STRING_ERROR","REQUIRE_UINT8ARRAY_ERROR","REQUIRE_STRING_OR_UINT8ARRAY_ERROR","REQUIRE_NUMBER_ERROR","REQUIRE_BIGNUMBER_ERROR","REQUIRE_ARRAY_ERROR","REQUIRE_LONG_ERROR","REQUIRE_TYPE_ERROR","FUNCTION_CONVERT_TO_BIGNUMBER_ERROR","FUNCTION_CONVERT_TO_NUMBER_ERROR","FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR","isNonNull","variable","undefined","isType","type","isUint8Array","Uint8Array","isNumber","Number","isBigNumber","isLong","isString","isStringOrUint8Array","requireNonNull","Error","requireType","requireBigNumber","requireLong","requireString","requireUint8Array","requireNumber","requireStringOrUint8Array","convertToBigNumber","convertToBigNumberArray","Array","map","convertToNumber","num","parseInt","isNaN","safeView","arr","offset","length","byteLength","isInteger","DataView","buffer","byteOffset","Math","min"],"mappings":"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","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport Long from \"long\";\n\n/**\n * Utility Error Messages\n */\nexport const REQUIRE_NON_NULL_ERROR = \"This value cannot be null | undefined.\";\nexport const REQUIRE_STRING_ERROR = \"This value must be a string.\";\nexport const REQUIRE_UINT8ARRAY_ERROR = \"This value must be a Uint8Array.\";\nexport const REQUIRE_STRING_OR_UINT8ARRAY_ERROR =\n    \"This value must be a string or Uint8Array.\";\nexport const REQUIRE_NUMBER_ERROR = \"This value must be a Number.\";\nexport const REQUIRE_BIGNUMBER_ERROR = \"This value must be a BigNumber.\";\nexport const REQUIRE_ARRAY_ERROR = \"The provided variable must be an Array.\";\nexport const REQUIRE_LONG_ERROR = \"This value must be a Long.\";\n\nexport const REQUIRE_TYPE_ERROR =\n    \"The provided variables are not matching types.\";\n\nexport const FUNCTION_CONVERT_TO_BIGNUMBER_ERROR =\n    \"This value must be a String, Number, or BigNumber to be converted.\";\nexport const FUNCTION_CONVERT_TO_NUMBER_ERROR =\n    \"This value must be a String, Number, or BigNumber to be converted.\";\nexport const FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR =\n    \"Unable to parse given variable. Returns NaN.\";\n\n//Soft Checks\n\n/**\n * Takes any param and returns false if null or undefined.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isNonNull(variable) {\n    if (variable == null || variable == undefined) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n/**\n * Takes any param and returns true if param variable and type are the same.\n *\n * @param {any | null | undefined} variable\n * @param {any | null | undefined} type\n * @returns {boolean}\n */\nexport function isType(variable, type) {\n    return typeof variable == typeof type;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isUint8Array(variable) {\n    return isNonNull(variable) && variable instanceof Uint8Array;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type Number.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isNumber(variable) {\n    return (\n        isNonNull(variable) &&\n        (typeof variable == \"number\" || variable instanceof Number)\n    );\n}\n\n/**\n * Takes any param and returns true if param is not null and of type BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isBigNumber(variable) {\n    return isNonNull(variable) && variable instanceof BigNumber;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isLong(variable) {\n    return isNonNull(variable) && variable instanceof Long;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type string.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isString(variable) {\n    return isNonNull(variable) && typeof variable == \"string\";\n}\n\n/**\n * Takes any param and returns true if param is not null and type string or Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isStringOrUint8Array(variable) {\n    return (\n        isNonNull(variable) && (isString(variable) || isUint8Array(variable))\n    );\n}\n\n//Requires\n\n/**\n * Takes any param and throws custom error if null or undefined.\n *\n * @param {any} variable\n * @returns {object}\n */\nexport function requireNonNull(variable) {\n    if (!isNonNull(variable)) {\n        throw new Error(REQUIRE_NON_NULL_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return variable;\n    }\n}\n\n/**\n * Takes any param and throws custom error if params are not same type.\n *\n * @param {any | null | undefined} variable\n * @param {any | null | undefined} type\n * @returns {object}\n */\nexport function requireType(variable, type) {\n    if (!isType(variable, type)) {\n        throw new Error(REQUIRE_TYPE_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return variable;\n    }\n}\n\n/**\n * Takes any param and throws custom error if non BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {BigNumber}\n */\nexport function requireBigNumber(variable) {\n    if (!isBigNumber(requireNonNull(variable))) {\n        throw new Error(REQUIRE_BIGNUMBER_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {BigNumber} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {Long}\n */\nexport function requireLong(variable) {\n    if (!isLong(requireNonNull(variable))) {\n        throw new Error(REQUIRE_LONG_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {Long} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non string.\n *\n * @param {any | null | undefined} variable\n * @returns {string}\n */\nexport function requireString(variable) {\n    if (!isString(requireNonNull(variable))) {\n        throw new Error(REQUIRE_STRING_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {string} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {Uint8Array}\n */\nexport function requireUint8Array(variable) {\n    if (!isUint8Array(requireNonNull(variable))) {\n        throw new Error(REQUIRE_UINT8ARRAY_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {Uint8Array} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {number}\n */\nexport function requireNumber(variable) {\n    if (!isNumber(requireNonNull(variable))) {\n        throw new Error(REQUIRE_NUMBER_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {number} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if null or undefined and not a string or Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {string | Uint8Array}\n */\nexport function requireStringOrUint8Array(variable) {\n    if (isStringOrUint8Array(requireNonNull(variable))) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {string | Uint8Array} */ (variable);\n    } else {\n        throw new Error(REQUIRE_STRING_OR_UINT8ARRAY_ERROR);\n    }\n}\n\n//Conversions\n\n/**\n * Converts number or string to BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {BigNumber}\n */\nexport function convertToBigNumber(variable) {\n    requireNonNull(variable);\n    if (\n        isBigNumber(variable) ||\n        isString(variable) ||\n        isNumber(variable) ||\n        isLong(variable)\n    ) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return new BigNumber(variable);\n    }\n    throw new Error(FUNCTION_CONVERT_TO_BIGNUMBER_ERROR);\n}\n\n/**\n * Converts Array of Numbers or Strings to Array of BigNumbers.\n *\n * @param {any | null | undefined} variable\n * @returns {Array<BigNumber>}\n */\nexport function convertToBigNumberArray(variable) {\n    if (variable instanceof Array) {\n        return /** @type {Array<BigNumber>} */ (\n            variable.map(convertToBigNumber)\n        );\n    } else {\n        throw new Error(REQUIRE_ARRAY_ERROR);\n    }\n}\n\n/**\n * @param {*} variable\n * @returns {number}\n */\nexport function convertToNumber(variable) {\n    requireNonNull(variable);\n    if (\n        isBigNumber(variable) ||\n        isString(variable) ||\n        isNumber(variable) ||\n        isLong(variable)\n    ) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const num = parseInt(variable);\n        if (isNaN(num)) {\n            throw new Error(FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR);\n        } else {\n            return num;\n        }\n    } else {\n        throw new Error(FUNCTION_CONVERT_TO_NUMBER_ERROR);\n    }\n}\n\n/**\n * Creates a DataView on top of an Uint8Array that could be or not be pooled, ensuring that we don't get out of bounds.\n *\n * @param {Uint8Array} arr\n * @param {number | undefined} offset\n * @param {number | undefined} length\n * @returns {DataView}\n */\nexport function safeView(arr, offset = 0, length = arr.byteLength) {\n    if (!(Number.isInteger(offset) && offset >= 0))\n        throw new Error(\"Invalid offset!\");\n    if (!(Number.isInteger(length) && length >= 0))\n        throw new Error(\"Invalid length!\");\n    return new DataView(\n        arr.buffer,\n        arr.byteOffset + offset,\n        Math.min(length, arr.byteLength - offset)\n    );\n}\n"]},"metadata":{},"sourceType":"module"}