{"ast":null,"code":"import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport LiveHash from \"./LiveHash.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetLiveHashQuery} proto.ICryptoGetLiveHashQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetLiveHashResponse} proto.ICryptoGetLiveHashResponse\n * @typedef {import(\"@hashgraph/proto\").ILiveHash} proto.ILiveHash\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * @augments {Query<LiveHash>}\n */\n\nexport default class LiveHashQuery extends Query {\n  /**\n   * @param {object} [props]\n   * @param {AccountId | string} [props.accountId]\n   * @param {Uint8Array} [props.hash]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @type {?AccountId}\n     * @private\n     */\n\n    this._accountId = null;\n\n    if (props.accountId != null) {\n      this.setAccountId(props.accountId);\n    }\n    /**\n     * @type {?Uint8Array}\n     * @private\n     */\n\n\n    this._hash = null;\n\n    if (props.hash != null) {\n      this.setHash(props.hash);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.IQuery} query\n   * @returns {LiveHashQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const hash =\n    /** @type {proto.ICryptoGetLiveHashQuery} */\n    query.cryptoGetLiveHash;\n    return new LiveHashQuery({\n      accountId: hash.accountID != null ? AccountId._fromProtobuf(hash.accountID) : undefined,\n      hash: hash.hash != null ? hash.hash : undefined\n    });\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get accountId() {\n    return this._accountId;\n  }\n  /**\n   * Set the account to which the livehash is associated.\n   *\n   * @param {AccountId | string} accountId\n   * @returns {this}\n   */\n\n\n  setAccountId(accountId) {\n    this._accountId = accountId instanceof AccountId ? accountId : AccountId.fromString(accountId);\n    return this;\n  }\n  /**\n   * @returns {?Uint8Array}\n   */\n\n\n  get liveHash() {\n    return this._hash;\n  }\n  /**\n   * Set the SHA-384 data in the livehash.\n   *\n   * @param {Uint8Array} hash\n   * @returns {this}\n   */\n\n\n  setHash(hash) {\n    this._hash = hash;\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._accountId != null) {\n      this._accountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.IQuery} request\n   * @returns {Promise<proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.getLiveHash(request);\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IResponse} response\n   * @returns {proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const cryptoGetLiveHash =\n    /** @type {proto.ICryptoGetLiveHashResponse} */\n    response.cryptoGetLiveHash;\n    return (\n      /** @type {proto.IResponseHeader} */\n      cryptoGetLiveHash.header\n    );\n  }\n  /**\n   * @protected\n   * @override\n   * @param {proto.IResponse} response\n   * @returns {Promise<LiveHash>}\n   */\n\n\n  _mapResponse(response) {\n    const hashes =\n    /** @type {proto.ICryptoGetLiveHashResponse} */\n    response.cryptoGetLiveHash;\n    return Promise.resolve(LiveHash._fromProtobuf(\n    /** @type {proto.ILiveHash} */\n    hashes.liveHash));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IQueryHeader} header\n   * @returns {proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      cryptoGetLiveHash: {\n        header,\n        accountID: this._accountId != null ? this._accountId._toProtobuf() : null,\n        hash: this._hash\n      }\n    };\n  }\n\n} // @ts-ignore\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\nQUERY_REGISTRY.set(\"cryptoGetLiveHash\", LiveHashQuery._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/account/LiveHashQuery.js"],"names":["Query","QUERY_REGISTRY","AccountId","LiveHash","LiveHashQuery","constructor","props","_accountId","accountId","setAccountId","_hash","hash","setHash","_fromProtobuf","query","cryptoGetLiveHash","accountID","undefined","fromString","liveHash","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","getLiveHash","_mapResponseHeader","response","header","_mapResponse","hashes","Promise","resolve","_onMakeRequest","_toProtobuf","set"],"mappings":"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","sourcesContent":["import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport LiveHash from \"./LiveHash.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetLiveHashQuery} proto.ICryptoGetLiveHashQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetLiveHashResponse} proto.ICryptoGetLiveHashResponse\n * @typedef {import(\"@hashgraph/proto\").ILiveHash} proto.ILiveHash\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * @augments {Query<LiveHash>}\n */\nexport default class LiveHashQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {AccountId | string} [props.accountId]\n     * @param {Uint8Array} [props.hash]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        /**\n         * @type {?Uint8Array}\n         * @private\n         */\n        this._hash = null;\n\n        if (props.hash != null) {\n            this.setHash(props.hash);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {LiveHashQuery}\n     */\n    static _fromProtobuf(query) {\n        const hash = /** @type {proto.ICryptoGetLiveHashQuery} */ (\n            query.cryptoGetLiveHash\n        );\n\n        return new LiveHashQuery({\n            accountId:\n                hash.accountID != null\n                    ? AccountId._fromProtobuf(hash.accountID)\n                    : undefined,\n            hash: hash.hash != null ? hash.hash : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account to which the livehash is associated.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get liveHash() {\n        return this._hash;\n    }\n\n    /**\n     * Set the SHA-384 data in the livehash.\n     *\n     * @param {Uint8Array} hash\n     * @returns {this}\n     */\n    setHash(hash) {\n        this._hash = hash;\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getLiveHash(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetLiveHash =\n            /** @type {proto.ICryptoGetLiveHashResponse} */ (\n                response.cryptoGetLiveHash\n            );\n        return /** @type {proto.IResponseHeader} */ (cryptoGetLiveHash.header);\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<LiveHash>}\n     */\n    _mapResponse(response) {\n        const hashes = /** @type {proto.ICryptoGetLiveHashResponse} */ (\n            response.cryptoGetLiveHash\n        );\n\n        return Promise.resolve(\n            LiveHash._fromProtobuf(\n                /** @type {proto.ILiveHash} */ (hashes.liveHash)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetLiveHash: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n                hash: this._hash,\n            },\n        };\n    }\n}\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"cryptoGetLiveHash\", LiveHashQuery._fromProtobuf);\n"]},"metadata":{},"sourceType":"module"}