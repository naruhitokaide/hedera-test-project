{"ast":null,"code":"/**\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"./address_book/NodeAddress.js\").default} NodeAddress\n */\nexport const HOST_AND_PORT = /^(\\S+):(\\d+)$/;\nexport default class ManagedNodeAddress {\n  /**\n   * @param {object} props\n   * @param {string} [props.address]\n   * @param {string} [props.host]\n   * @param {number | null} [props.port]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (props.address != null) {\n      const hostAndPortResult = HOST_AND_PORT.exec(props.address);\n\n      if (hostAndPortResult == null) {\n        throw new Error(`failed to parse address: ${props.address}`);\n      }\n      /** @type {string} */\n\n\n      this._address =\n      /** @type {string} */\n      hostAndPortResult[1];\n      /** @type {number | null} */\n\n      this._port = hostAndPortResult[2] != null ? parseInt(\n      /** @type {string }*/\n      hostAndPortResult[2]) : null;\n    } else if (props.host != null && props.port != null) {\n      /** @type {string} */\n      this._address = props.host;\n      /** @type {number | null} */\n\n      this._port = props.port;\n    } else {\n      throw new Error(`failed to create a managed node address: ${JSON.stringify(props)}`);\n    }\n\n    Object.freeze(this);\n  }\n  /**\n   * @param {string} address\n   * @returns {ManagedNodeAddress};\n   */\n\n\n  static fromString(address) {\n    return new ManagedNodeAddress({\n      address\n    });\n  }\n\n  toInsecure() {\n    let port = this.port;\n\n    switch (this.port) {\n      case 50212:\n        port = 50211;\n        break;\n\n      case 433:\n        port = 5600;\n    }\n\n    return new ManagedNodeAddress({\n      host: this.address,\n      port\n    });\n  }\n\n  toSecure() {\n    let port = this.port;\n\n    switch (this.port) {\n      case 50211:\n        port = 50212;\n        break;\n\n      case 5600:\n        port = 433;\n    }\n\n    return new ManagedNodeAddress({\n      host: this.address,\n      port\n    });\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  get address() {\n    return this._address;\n  }\n  /**\n   * @returns {number | null}\n   */\n\n\n  get port() {\n    return this._port;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  isTransportSecurity() {\n    return this._port == 50212 || this._port == 433;\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    if (this.port == null) {\n      return this.address;\n    } else {\n      return `${this.address}:${this.port}`;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/ManagedNodeAddress.js"],"names":["HOST_AND_PORT","ManagedNodeAddress","constructor","props","address","hostAndPortResult","exec","Error","_address","_port","parseInt","host","port","JSON","stringify","Object","freeze","fromString","toInsecure","toSecure","isTransportSecurity","toString"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,aAAa,GAAG,eAAtB;AAEP,eAAe,MAAMC,kBAAN,CAAyB;AACpC;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,GAAa;AAAA,QAAZC,KAAY,uEAAJ,EAAI;;AACpB,QAAIA,KAAK,CAACC,OAAN,IAAiB,IAArB,EAA2B;AACvB,YAAMC,iBAAiB,GAAGL,aAAa,CAACM,IAAd,CAAmBH,KAAK,CAACC,OAAzB,CAA1B;;AAEA,UAAIC,iBAAiB,IAAI,IAAzB,EAA+B;AAC3B,cAAM,IAAIE,KAAJ,CAAW,4BAA2BJ,KAAK,CAACC,OAAQ,EAApD,CAAN;AACH;AAED;;;AACA,WAAKI,QAAL;AAAgB;AAAuBH,MAAAA,iBAAiB,CAAC,CAAD,CAAxD;AAEA;;AACA,WAAKI,KAAL,GACIJ,iBAAiB,CAAC,CAAD,CAAjB,IAAwB,IAAxB,GACMK,QAAQ;AAAC;AAAuBL,MAAAA,iBAAiB,CAAC,CAAD,CAAzC,CADd,GAEM,IAHV;AAIH,KAfD,MAeO,IAAIF,KAAK,CAACQ,IAAN,IAAc,IAAd,IAAsBR,KAAK,CAACS,IAAN,IAAc,IAAxC,EAA8C;AACjD;AACA,WAAKJ,QAAL,GAAgBL,KAAK,CAACQ,IAAtB;AAEA;;AACA,WAAKF,KAAL,GAAaN,KAAK,CAACS,IAAnB;AACH,KANM,MAMA;AACH,YAAM,IAAIL,KAAJ,CACD,4CAA2CM,IAAI,CAACC,SAAL,CACxCX,KADwC,CAE1C,EAHA,CAAN;AAKH;;AAEDY,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;;;AACqB,SAAVC,UAAU,CAACb,OAAD,EAAU;AACvB,WAAO,IAAIH,kBAAJ,CAAuB;AAAEG,MAAAA;AAAF,KAAvB,CAAP;AACH;;AAEDc,EAAAA,UAAU,GAAG;AACT,QAAIN,IAAI,GAAG,KAAKA,IAAhB;;AAEA,YAAQ,KAAKA,IAAb;AACI,WAAK,KAAL;AACIA,QAAAA,IAAI,GAAG,KAAP;AACA;;AACJ,WAAK,GAAL;AACIA,QAAAA,IAAI,GAAG,IAAP;AALR;;AAQA,WAAO,IAAIX,kBAAJ,CAAuB;AAAEU,MAAAA,IAAI,EAAE,KAAKP,OAAb;AAAsBQ,MAAAA;AAAtB,KAAvB,CAAP;AACH;;AAEDO,EAAAA,QAAQ,GAAG;AACP,QAAIP,IAAI,GAAG,KAAKA,IAAhB;;AAEA,YAAQ,KAAKA,IAAb;AACI,WAAK,KAAL;AACIA,QAAAA,IAAI,GAAG,KAAP;AACA;;AACJ,WAAK,IAAL;AACIA,QAAAA,IAAI,GAAG,GAAP;AALR;;AAQA,WAAO,IAAIX,kBAAJ,CAAuB;AAAEU,MAAAA,IAAI,EAAE,KAAKP,OAAb;AAAsBQ,MAAAA;AAAtB,KAAvB,CAAP;AACH;AAED;AACJ;AACA;;;AACe,MAAPR,OAAO,GAAG;AACV,WAAO,KAAKI,QAAZ;AACH;AAED;AACJ;AACA;;;AACY,MAAJI,IAAI,GAAG;AACP,WAAO,KAAKH,KAAZ;AACH;AAED;AACJ;AACA;;;AACIW,EAAAA,mBAAmB,GAAG;AAClB,WAAO,KAAKX,KAAL,IAAc,KAAd,IAAuB,KAAKA,KAAL,IAAc,GAA5C;AACH;AAED;AACJ;AACA;;;AACIY,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKT,IAAL,IAAa,IAAjB,EAAuB;AACnB,aAAO,KAAKR,OAAZ;AACH,KAFD,MAEO;AACH,aAAQ,GAAE,KAAKA,OAAQ,IAAG,KAAKQ,IAAK,EAApC;AACH;AACJ;;AA1GmC","sourcesContent":["/**\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"./address_book/NodeAddress.js\").default} NodeAddress\n */\n\nexport const HOST_AND_PORT = /^(\\S+):(\\d+)$/;\n\nexport default class ManagedNodeAddress {\n    /**\n     * @param {object} props\n     * @param {string} [props.address]\n     * @param {string} [props.host]\n     * @param {number | null} [props.port]\n     */\n    constructor(props = {}) {\n        if (props.address != null) {\n            const hostAndPortResult = HOST_AND_PORT.exec(props.address);\n\n            if (hostAndPortResult == null) {\n                throw new Error(`failed to parse address: ${props.address}`);\n            }\n\n            /** @type {string} */\n            this._address = /** @type {string} */ (hostAndPortResult[1]);\n\n            /** @type {number | null} */\n            this._port =\n                hostAndPortResult[2] != null\n                    ? parseInt(/** @type {string }*/ (hostAndPortResult[2]))\n                    : null;\n        } else if (props.host != null && props.port != null) {\n            /** @type {string} */\n            this._address = props.host;\n\n            /** @type {number | null} */\n            this._port = props.port;\n        } else {\n            throw new Error(\n                `failed to create a managed node address: ${JSON.stringify(\n                    props\n                )}`\n            );\n        }\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {string} address\n     * @returns {ManagedNodeAddress};\n     */\n    static fromString(address) {\n        return new ManagedNodeAddress({ address });\n    }\n\n    toInsecure() {\n        let port = this.port;\n\n        switch (this.port) {\n            case 50212:\n                port = 50211;\n                break;\n            case 433:\n                port = 5600;\n        }\n\n        return new ManagedNodeAddress({ host: this.address, port });\n    }\n\n    toSecure() {\n        let port = this.port;\n\n        switch (this.port) {\n            case 50211:\n                port = 50212;\n                break;\n            case 5600:\n                port = 433;\n        }\n\n        return new ManagedNodeAddress({ host: this.address, port });\n    }\n\n    /**\n     * @returns {string}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * @returns {number | null}\n     */\n    get port() {\n        return this._port;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isTransportSecurity() {\n        return this._port == 50212 || this._port == 433;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        if (this.port == null) {\n            return this.address;\n        } else {\n            return `${this.address}:${this.port}`;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}