{"ast":null,"code":"import AccountId from \"../account/AccountId.js\";\nimport AccountBalanceQuery from \"../account/AccountBalanceQuery.js\";\nimport Hbar from \"../Hbar.js\";\nimport Network from \"./Network.js\";\nimport MirrorNetwork from \"./MirrorNetwork.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport PrivateKey from \"../PrivateKey.js\";\nimport LedgerId from \"../LedgerId.js\";\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n */\n\n/**\n * @typedef {object} Operator\n * @property {string | PrivateKey} privateKey\n * @property {string | AccountId} accountId\n */\n\n/**\n * @typedef {object} ClientOperator\n * @property {PublicKey} publicKey\n * @property {AccountId} accountId\n * @property {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n */\n\n/**\n * @typedef {object} ClientConfiguration\n * @property {{[key: string]: (string | AccountId)} | string} network\n * @property {string[] | string} [mirrorNetwork]\n * @property {Operator} [operator]\n */\n\n/**\n * @typedef {\"mainnet\" | \"testnet\" | \"previewnet\"} NetworkName\n */\n\n/**\n * @abstract\n * @template {Channel} ChannelT\n * @template {MirrorChannel} MirrorChannelT\n */\n\nexport default class Client {\n  /**\n   * @protected\n   * @hideconstructor\n   * @param {ClientConfiguration} [props]\n   */\n  constructor(props) {\n    /**\n     * List of mirror network URLs.\n     *\n     * @internal\n     * @type {MirrorNetwork}\n     */\n    this._mirrorNetwork = new MirrorNetwork(this._createMirrorNetworkChannel());\n    /**\n     * Map of node account ID (as a string)\n     * to the node URL.\n     *\n     * @internal\n     * @type {Network}\n     */\n\n    this._network = new Network(this._createNetworkChannel());\n    /**\n     * @internal\n     * @type {?ClientOperator}\n     */\n\n    this._operator = null;\n    /**\n     * @private\n     * @type {Hbar}\n     */\n\n    this._maxTransactionFee = new Hbar(2);\n    /**\n     * @private\n     * @type {Hbar}\n     */\n\n    this._maxQueryPayment = new Hbar(1);\n\n    if (props != null) {\n      if (props.operator != null) {\n        this.setOperator(props.operator.accountId, props.operator.privateKey);\n      }\n    }\n\n    this._signOnDemand = false;\n    this._autoValidateChecksums = false;\n    /** @type {number | null} */\n\n    this._maxAttempts = null;\n    /** @type {number} */\n\n    this._minBackoff = 250;\n    /** @type {number} */\n\n    this._maxBackoff = 8000;\n  }\n  /**\n   * @deprecated\n   * @param {NetworkName} networkName\n   * @returns {this}\n   */\n\n\n  setNetworkName(networkName) {\n    // uses custom NetworkName type\n    // remove if phasing out set|get NetworkName\n    console.warn(\"Deprecated: Use `setLedgerId` instead\");\n    return this.setLedgerId(networkName);\n  }\n  /**\n   * @deprecated\n   * @returns {string | null}\n   */\n\n\n  get networkName() {\n    console.warn(\"Deprecated: Use `ledgerId` instead\");\n    return this.ledgerId != null ? this.ledgerId.toString() : null;\n  }\n  /**\n   * @param {string|LedgerId} ledgerId\n   * @returns {this}\n   */\n\n\n  setLedgerId(ledgerId) {\n    this._network.setLedgerId(typeof ledgerId === \"string\" ? LedgerId.fromString(ledgerId) : ledgerId);\n\n    return this;\n  }\n  /**\n   * @returns {LedgerId | null}\n   */\n\n\n  get ledgerId() {\n    return this._network._ledgerId != null ? this._network.ledgerId : null;\n  }\n  /**\n   * @param {{[key: string]: (string | AccountId)} | string} network\n   * @returns {void}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  setNetwork(network) {\n    throw new Error(\"not implemented\");\n  }\n  /**\n   * @returns {{[key: string]: (string | AccountId)}}\n   */\n\n\n  get network() {\n    return this._network.network;\n  }\n  /**\n   * @param {string[] | string} mirrorNetwork\n   * @returns {void}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  setMirrorNetwork(mirrorNetwork) {\n    throw new Error(\"not implemented\");\n  }\n  /**\n   * @returns {string[]}\n   */\n\n\n  get mirrorNetwork() {\n    return this._mirrorNetwork.network;\n  }\n  /**\n   * @param {boolean} signOnDemand\n   */\n\n\n  setSignOnDemand(signOnDemand) {\n    this._signOnDemand = signOnDemand;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  isTransportSecurity() {\n    return this._network.isTransportSecurity();\n  }\n  /**\n   * @param {boolean} transportSecurity\n   * @returns {this}\n   */\n\n\n  setTransportSecurity(transportSecurity) {\n    this._network.setTransportSecurity(transportSecurity);\n\n    return this;\n  }\n  /**\n   * Set the account that will, by default, pay for transactions and queries built with this client.\n   *\n   * @param {AccountId | string} accountId\n   * @param {PrivateKey | string} privateKey\n   * @returns {this}\n   */\n\n\n  setOperator(accountId, privateKey) {\n    const key = typeof privateKey === \"string\" ? PrivateKey.fromString(privateKey) : privateKey;\n    return this.setOperatorWith(accountId, key.publicKey, message => Promise.resolve(key.sign(message)));\n  }\n  /**\n   * Sets the account that will, by default, pay for transactions and queries built with\n   * this client.\n   *\n   * @param {AccountId | string} accountId\n   * @param {PublicKey | string} publicKey\n   * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n   * @returns {this}\n   */\n\n\n  setOperatorWith(accountId, publicKey, transactionSigner) {\n    const accountId_ = accountId instanceof AccountId ? accountId : AccountId.fromString(accountId);\n\n    if (this._network._ledgerId != null) {\n      accountId_.validateChecksum(this);\n    }\n\n    this._operator = {\n      transactionSigner,\n      accountId: accountId_,\n      publicKey: publicKey instanceof PublicKey ? publicKey : PublicKey.fromString(publicKey)\n    };\n    return this;\n  }\n  /**\n   * @param {boolean} value\n   * @returns {this}\n   */\n\n\n  setAutoValidateChecksums(value) {\n    this._autoValidateChecksums = value;\n    return this;\n  }\n  /**\n   * @returns {boolean}\n   */\n\n\n  isAutoValidateChecksumsEnabled() {\n    return this._autoValidateChecksums;\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get operatorAccountId() {\n    return this._operator != null ? this._operator.accountId : null;\n  }\n  /**\n   * @returns {?PublicKey}\n   */\n\n\n  get operatorPublicKey() {\n    return this._operator != null ? this._operator.publicKey : null;\n  }\n  /**\n   * @returns {Hbar}\n   */\n\n\n  get maxTransactionFee() {\n    return this._maxTransactionFee;\n  }\n  /**\n   * Set the maximum fee to be paid for transactions\n   * executed by this client.\n   *\n   * @param {Hbar} maxTransactionFee\n   * @returns {this}\n   */\n\n\n  setMaxTransactionFee(maxTransactionFee) {\n    this._maxTransactionFee = maxTransactionFee;\n    return this;\n  }\n  /**\n   * @returns {Hbar}\n   */\n\n\n  get maxQueryPayment() {\n    return this._maxQueryPayment;\n  }\n  /**\n   * Set the maximum payment allowable for queries.\n   *\n   * @param {Hbar} maxQueryPayment\n   * @returns {Client<ChannelT, MirrorChannelT>}\n   */\n\n\n  setMaxQueryPayment(maxQueryPayment) {\n    this._maxQueryPayment = maxQueryPayment;\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get maxAttempts() {\n    return this._maxAttempts != null ? this._maxAttempts : 10;\n  }\n  /**\n   * @param {number} maxAttempts\n   * @returns {this}\n   */\n\n\n  setMaxAttempts(maxAttempts) {\n    this._maxAttempts = maxAttempts;\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get maxNodeAttempts() {\n    return this._network.maxNodeAttempts;\n  }\n  /**\n   * @param {number} maxNodeAttempts\n   * @returns {this}\n   */\n\n\n  setMaxNodeAttempts(maxNodeAttempts) {\n    this._network.setMaxNodeAttempts(maxNodeAttempts);\n\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get nodeWaitTime() {\n    return this._network.minBackoff;\n  }\n  /**\n   * @param {number} nodeWaitTime\n   * @returns {this}\n   */\n\n\n  setNodeWaitTime(nodeWaitTime) {\n    this._network.setMinBackoff(nodeWaitTime);\n\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get maxNodesPerTransaction() {\n    return this._network.maxNodesPerTransaction;\n  }\n  /**\n   * @param {number} maxNodesPerTransaction\n   * @returns {this}\n   */\n\n\n  setMaxNodesPerTransaction(maxNodesPerTransaction) {\n    this._network.setMaxNodesPerTransaction(maxNodesPerTransaction);\n\n    return this;\n  }\n  /**\n   * @param {?number} minBackoff\n   * @returns {this}\n   */\n\n\n  setMinBackoff(minBackoff) {\n    if (minBackoff == null) {\n      throw new Error(\"minBackoff cannot be null.\");\n    }\n\n    if (minBackoff > this._maxBackoff) {\n      throw new Error(\"minBackoff cannot be larger than maxBackoff.\");\n    }\n\n    this._minBackoff = minBackoff;\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get minBackoff() {\n    return this._minBackoff;\n  }\n  /**\n   * @param {?number} maxBackoff\n   * @returns {this}\n   */\n\n\n  setMaxBackoff(maxBackoff) {\n    if (maxBackoff == null) {\n      throw new Error(\"maxBackoff cannot be null.\");\n    } else if (maxBackoff < this._minBackoff) {\n      throw new Error(\"maxBackoff cannot be smaller than minBackoff.\");\n    }\n\n    this._maxBackoff = maxBackoff;\n    return this;\n  }\n  /**\n   * @returns {number}\n   */\n\n\n  get maxBackoff() {\n    return this._maxBackoff;\n  }\n  /**\n   * @param {AccountId | string} accountId\n   */\n\n\n  async ping(accountId) {\n    try {\n      await new AccountBalanceQuery({\n        accountId\n      }).setNodeAccountIds([accountId instanceof AccountId ? accountId : AccountId.fromString(accountId)]).execute(this);\n    } catch (_) {// Do nothing\n    }\n  }\n\n  async pingAll() {\n    for (const nodeAccountId of Object.values(this._network.network)) {\n      await this.ping(nodeAccountId);\n    }\n  }\n  /**\n   * @returns {void}\n   */\n\n\n  close() {\n    this._network.close();\n\n    this._mirrorNetwork.close();\n  }\n  /**\n   * @abstract\n   * @returns {(address: string) => ChannelT}\n   */\n\n\n  _createNetworkChannel() {\n    throw new Error(\"not implemented\");\n  }\n  /**\n   * @abstract\n   * @returns {(address: string) => MirrorChannelT}\n   */\n\n\n  _createMirrorNetworkChannel() {\n    throw new Error(\"not implemented\");\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/client/Client.js"],"names":["AccountId","AccountBalanceQuery","Hbar","Network","MirrorNetwork","PublicKey","PrivateKey","LedgerId","Client","constructor","props","_mirrorNetwork","_createMirrorNetworkChannel","_network","_createNetworkChannel","_operator","_maxTransactionFee","_maxQueryPayment","operator","setOperator","accountId","privateKey","_signOnDemand","_autoValidateChecksums","_maxAttempts","_minBackoff","_maxBackoff","setNetworkName","networkName","console","warn","setLedgerId","ledgerId","toString","fromString","_ledgerId","setNetwork","network","Error","setMirrorNetwork","mirrorNetwork","setSignOnDemand","signOnDemand","isTransportSecurity","setTransportSecurity","transportSecurity","key","setOperatorWith","publicKey","message","Promise","resolve","sign","transactionSigner","accountId_","validateChecksum","setAutoValidateChecksums","value","isAutoValidateChecksumsEnabled","operatorAccountId","operatorPublicKey","maxTransactionFee","setMaxTransactionFee","maxQueryPayment","setMaxQueryPayment","maxAttempts","setMaxAttempts","maxNodeAttempts","setMaxNodeAttempts","nodeWaitTime","minBackoff","setNodeWaitTime","setMinBackoff","maxNodesPerTransaction","setMaxNodesPerTransaction","setMaxBackoff","maxBackoff","ping","setNodeAccountIds","execute","_","pingAll","nodeAccountId","Object","values","close"],"mappings":"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","sourcesContent":["import AccountId from \"../account/AccountId.js\";\nimport AccountBalanceQuery from \"../account/AccountBalanceQuery.js\";\nimport Hbar from \"../Hbar.js\";\nimport Network from \"./Network.js\";\nimport MirrorNetwork from \"./MirrorNetwork.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport PrivateKey from \"../PrivateKey.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n */\n\n/**\n * @typedef {object} Operator\n * @property {string | PrivateKey} privateKey\n * @property {string | AccountId} accountId\n */\n\n/**\n * @typedef {object} ClientOperator\n * @property {PublicKey} publicKey\n * @property {AccountId} accountId\n * @property {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n */\n\n/**\n * @typedef {object} ClientConfiguration\n * @property {{[key: string]: (string | AccountId)} | string} network\n * @property {string[] | string} [mirrorNetwork]\n * @property {Operator} [operator]\n */\n\n/**\n * @typedef {\"mainnet\" | \"testnet\" | \"previewnet\"} NetworkName\n */\n\n/**\n * @abstract\n * @template {Channel} ChannelT\n * @template {MirrorChannel} MirrorChannelT\n */\nexport default class Client {\n    /**\n     * @protected\n     * @hideconstructor\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        /**\n         * List of mirror network URLs.\n         *\n         * @internal\n         * @type {MirrorNetwork}\n         */\n        this._mirrorNetwork = new MirrorNetwork(\n            this._createMirrorNetworkChannel()\n        );\n\n        /**\n         * Map of node account ID (as a string)\n         * to the node URL.\n         *\n         * @internal\n         * @type {Network}\n         */\n        this._network = new Network(this._createNetworkChannel());\n\n        /**\n         * @internal\n         * @type {?ClientOperator}\n         */\n        this._operator = null;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._maxTransactionFee = new Hbar(2);\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._maxQueryPayment = new Hbar(1);\n\n        if (props != null) {\n            if (props.operator != null) {\n                this.setOperator(\n                    props.operator.accountId,\n                    props.operator.privateKey\n                );\n            }\n        }\n\n        this._signOnDemand = false;\n\n        this._autoValidateChecksums = false;\n\n        /** @type {number | null} */\n        this._maxAttempts = null;\n\n        /** @type {number} */\n        this._minBackoff = 250;\n\n        /** @type {number} */\n        this._maxBackoff = 8000;\n    }\n\n    /**\n     * @deprecated\n     * @param {NetworkName} networkName\n     * @returns {this}\n     */\n    setNetworkName(networkName) {\n        // uses custom NetworkName type\n        // remove if phasing out set|get NetworkName\n        console.warn(\"Deprecated: Use `setLedgerId` instead\");\n        return this.setLedgerId(networkName);\n    }\n\n    /**\n     * @deprecated\n     * @returns {string | null}\n     */\n    get networkName() {\n        console.warn(\"Deprecated: Use `ledgerId` instead\");\n        return this.ledgerId != null ? this.ledgerId.toString() : null;\n    }\n\n    /**\n     * @param {string|LedgerId} ledgerId\n     * @returns {this}\n     */\n    setLedgerId(ledgerId) {\n        this._network.setLedgerId(\n            typeof ledgerId === \"string\"\n                ? LedgerId.fromString(ledgerId)\n                : ledgerId\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {LedgerId | null}\n     */\n    get ledgerId() {\n        return this._network._ledgerId != null ? this._network.ledgerId : null;\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNetwork(network) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    get network() {\n        return this._network.network;\n    }\n\n    /**\n     * @param {string[] | string} mirrorNetwork\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMirrorNetwork(mirrorNetwork) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @returns {string[]}\n     */\n    get mirrorNetwork() {\n        return this._mirrorNetwork.network;\n    }\n\n    /**\n     * @param {boolean} signOnDemand\n     */\n    setSignOnDemand(signOnDemand) {\n        this._signOnDemand = signOnDemand;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isTransportSecurity() {\n        return this._network.isTransportSecurity();\n    }\n\n    /**\n     * @param {boolean} transportSecurity\n     * @returns {this}\n     */\n    setTransportSecurity(transportSecurity) {\n        this._network.setTransportSecurity(transportSecurity);\n        return this;\n    }\n\n    /**\n     * Set the account that will, by default, pay for transactions and queries built with this client.\n     *\n     * @param {AccountId | string} accountId\n     * @param {PrivateKey | string} privateKey\n     * @returns {this}\n     */\n    setOperator(accountId, privateKey) {\n        const key =\n            typeof privateKey === \"string\"\n                ? PrivateKey.fromString(privateKey)\n                : privateKey;\n\n        return this.setOperatorWith(accountId, key.publicKey, (message) =>\n            Promise.resolve(key.sign(message))\n        );\n    }\n\n    /**\n     * Sets the account that will, by default, pay for transactions and queries built with\n     * this client.\n     *\n     * @param {AccountId | string} accountId\n     * @param {PublicKey | string} publicKey\n     * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n     * @returns {this}\n     */\n    setOperatorWith(accountId, publicKey, transactionSigner) {\n        const accountId_ =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        if (this._network._ledgerId != null) {\n            accountId_.validateChecksum(this);\n        }\n\n        this._operator = {\n            transactionSigner,\n\n            accountId: accountId_,\n\n            publicKey:\n                publicKey instanceof PublicKey\n                    ? publicKey\n                    : PublicKey.fromString(publicKey),\n        };\n\n        return this;\n    }\n\n    /**\n     * @param {boolean} value\n     * @returns {this}\n     */\n    setAutoValidateChecksums(value) {\n        this._autoValidateChecksums = value;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isAutoValidateChecksumsEnabled() {\n        return this._autoValidateChecksums;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get operatorAccountId() {\n        return this._operator != null ? this._operator.accountId : null;\n    }\n\n    /**\n     * @returns {?PublicKey}\n     */\n    get operatorPublicKey() {\n        return this._operator != null ? this._operator.publicKey : null;\n    }\n\n    /**\n     * @returns {Hbar}\n     */\n    get maxTransactionFee() {\n        return this._maxTransactionFee;\n    }\n\n    /**\n     * Set the maximum fee to be paid for transactions\n     * executed by this client.\n     *\n     * @param {Hbar} maxTransactionFee\n     * @returns {this}\n     */\n    setMaxTransactionFee(maxTransactionFee) {\n        this._maxTransactionFee = maxTransactionFee;\n        return this;\n    }\n\n    /**\n     * @returns {Hbar}\n     */\n    get maxQueryPayment() {\n        return this._maxQueryPayment;\n    }\n\n    /**\n     * Set the maximum payment allowable for queries.\n     *\n     * @param {Hbar} maxQueryPayment\n     * @returns {Client<ChannelT, MirrorChannelT>}\n     */\n    setMaxQueryPayment(maxQueryPayment) {\n        this._maxQueryPayment = maxQueryPayment;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxAttempts() {\n        return this._maxAttempts != null ? this._maxAttempts : 10;\n    }\n\n    /**\n     * @param {number} maxAttempts\n     * @returns {this}\n     */\n    setMaxAttempts(maxAttempts) {\n        this._maxAttempts = maxAttempts;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxNodeAttempts() {\n        return this._network.maxNodeAttempts;\n    }\n\n    /**\n     * @param {number} maxNodeAttempts\n     * @returns {this}\n     */\n    setMaxNodeAttempts(maxNodeAttempts) {\n        this._network.setMaxNodeAttempts(maxNodeAttempts);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeWaitTime() {\n        return this._network.minBackoff;\n    }\n\n    /**\n     * @param {number} nodeWaitTime\n     * @returns {this}\n     */\n    setNodeWaitTime(nodeWaitTime) {\n        this._network.setMinBackoff(nodeWaitTime);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxNodesPerTransaction() {\n        return this._network.maxNodesPerTransaction;\n    }\n\n    /**\n     * @param {number} maxNodesPerTransaction\n     * @returns {this}\n     */\n    setMaxNodesPerTransaction(maxNodesPerTransaction) {\n        this._network.setMaxNodesPerTransaction(maxNodesPerTransaction);\n        return this;\n    }\n\n    /**\n     * @param {?number} minBackoff\n     * @returns {this}\n     */\n    setMinBackoff(minBackoff) {\n        if (minBackoff == null) {\n            throw new Error(\"minBackoff cannot be null.\");\n        }\n        if (minBackoff > this._maxBackoff) {\n            throw new Error(\"minBackoff cannot be larger than maxBackoff.\");\n        }\n        this._minBackoff = minBackoff;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get minBackoff() {\n        return this._minBackoff;\n    }\n\n    /**\n     * @param {?number} maxBackoff\n     * @returns {this}\n     */\n    setMaxBackoff(maxBackoff) {\n        if (maxBackoff == null) {\n            throw new Error(\"maxBackoff cannot be null.\");\n        } else if (maxBackoff < this._minBackoff) {\n            throw new Error(\"maxBackoff cannot be smaller than minBackoff.\");\n        }\n        this._maxBackoff = maxBackoff;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxBackoff() {\n        return this._maxBackoff;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     */\n    async ping(accountId) {\n        try {\n            await new AccountBalanceQuery({ accountId })\n                .setNodeAccountIds([\n                    accountId instanceof AccountId\n                        ? accountId\n                        : AccountId.fromString(accountId),\n                ])\n                .execute(this);\n        } catch (_) {\n            // Do nothing\n        }\n    }\n\n    async pingAll() {\n        for (const nodeAccountId of Object.values(this._network.network)) {\n            await this.ping(nodeAccountId);\n        }\n    }\n\n    /**\n     * @returns {void}\n     */\n    close() {\n        this._network.close();\n        this._mirrorNetwork.close();\n    }\n\n    /**\n     * @abstract\n     * @returns {(address: string) => ChannelT}\n     */\n    _createNetworkChannel() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @returns {(address: string) => MirrorChannelT}\n     */\n    _createMirrorNetworkChannel() {\n        throw new Error(\"not implemented\");\n    }\n}\n"]},"metadata":{},"sourceType":"module"}