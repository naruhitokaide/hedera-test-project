{"ast":null,"code":"import TokenId from \"../token/TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenTransferAccountMap from \"./TokenTransferAccountMap.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITokenTransferList} proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").IAccountAmount} proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @augments {ObjectMap<TokenId, TokenTransferAccountMap>}\n */\n\nexport default class TokenTransferMap extends ObjectMap {\n  constructor() {\n    super(s => TokenId.fromString(s));\n  }\n  /**\n   * @internal\n   * @param {TokenId} tokenId\n   * @param {AccountId} accountId\n   * @param {Long} amount\n   */\n\n\n  __set(tokenId, accountId, amount) {\n    const token = tokenId.toString();\n\n    let _map = this._map.get(token);\n\n    if (_map == null) {\n      _map = new TokenTransferAccountMap();\n\n      this._map.set(token, _map);\n\n      this.__map.set(tokenId, _map);\n    }\n\n    _map._set(accountId, amount);\n  }\n  /**\n   * @param {proto.ITokenTransferList[]} transfers\n   * @returns {TokenTransferMap}\n   */\n\n\n  static _fromProtobuf(transfers) {\n    const tokenTransfersMap = new TokenTransferMap();\n\n    for (const transfer of transfers) {\n      const token = TokenId._fromProtobuf(\n      /** @type {proto.ITokenID} */\n      transfer.token);\n\n      for (const aa of transfer.transfers != null ? transfer.transfers : []) {\n        const account = AccountId._fromProtobuf(\n        /** @type {proto.IAccountID} */\n        aa.accountID);\n\n        tokenTransfersMap.__set(token, account,\n        /** @type {Long} */\n        aa.amount);\n      }\n    }\n\n    return tokenTransfersMap;\n  }\n  /**\n   * @returns {proto.ITokenTransferList[]}\n   */\n\n\n  _toProtobuf() {\n    /** @type {proto.ITokenTransferList[]} */\n    const tokenTransferList = [];\n\n    for (const [tokenId, value] of this) {\n      /** @type {proto.IAccountAmount[]} */\n      const transfers = [];\n\n      for (const [accountId, amount] of value) {\n        transfers.push({\n          accountID: accountId._toProtobuf(),\n          amount: amount\n        });\n      }\n\n      tokenTransferList.push({\n        token: tokenId._toProtobuf(),\n        transfers: transfers\n      });\n    }\n\n    return tokenTransferList;\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/account/TokenTransferMap.js"],"names":["TokenId","AccountId","TokenTransferAccountMap","ObjectMap","TokenTransferMap","constructor","s","fromString","__set","tokenId","accountId","amount","token","toString","_map","get","set","__map","_set","_fromProtobuf","transfers","tokenTransfersMap","transfer","aa","account","accountID","_toProtobuf","tokenTransferList","value","push"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,uBAAP,MAAoC,8BAApC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BD,SAA/B,CAAyC;AACpDE,EAAAA,WAAW,GAAG;AACV,UAAOC,CAAD,IAAON,OAAO,CAACO,UAAR,CAAmBD,CAAnB,CAAb;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,KAAK,CAACC,OAAD,EAAUC,SAAV,EAAqBC,MAArB,EAA6B;AAC9B,UAAMC,KAAK,GAAGH,OAAO,CAACI,QAAR,EAAd;;AAEA,QAAIC,IAAI,GAAG,KAAKA,IAAL,CAAUC,GAAV,CAAcH,KAAd,CAAX;;AACA,QAAIE,IAAI,IAAI,IAAZ,EAAkB;AACdA,MAAAA,IAAI,GAAG,IAAIZ,uBAAJ,EAAP;;AACA,WAAKY,IAAL,CAAUE,GAAV,CAAcJ,KAAd,EAAqBE,IAArB;;AACA,WAAKG,KAAL,CAAWD,GAAX,CAAeP,OAAf,EAAwBK,IAAxB;AACH;;AAEDA,IAAAA,IAAI,CAACI,IAAL,CAAUR,SAAV,EAAqBC,MAArB;AACH;AAED;AACJ;AACA;AACA;;;AACwB,SAAbQ,aAAa,CAACC,SAAD,EAAY;AAC5B,UAAMC,iBAAiB,GAAG,IAAIjB,gBAAJ,EAA1B;;AAEA,SAAK,MAAMkB,QAAX,IAAuBF,SAAvB,EAAkC;AAC9B,YAAMR,KAAK,GAAGZ,OAAO,CAACmB,aAAR;AACV;AAA+BG,MAAAA,QAAQ,CAACV,KAD9B,CAAd;;AAIA,WAAK,MAAMW,EAAX,IAAiBD,QAAQ,CAACF,SAAT,IAAsB,IAAtB,GACXE,QAAQ,CAACF,SADE,GAEX,EAFN,EAEU;AACN,cAAMI,OAAO,GAAGvB,SAAS,CAACkB,aAAV;AACZ;AAAiCI,QAAAA,EAAE,CAACE,SADxB,CAAhB;;AAIAJ,QAAAA,iBAAiB,CAACb,KAAlB,CACII,KADJ,EAEIY,OAFJ;AAGI;AAAqBD,QAAAA,EAAE,CAACZ,MAH5B;AAKH;AACJ;;AAED,WAAOU,iBAAP;AACH;AAED;AACJ;AACA;;;AACIK,EAAAA,WAAW,GAAG;AACV;AACA,UAAMC,iBAAiB,GAAG,EAA1B;;AAEA,SAAK,MAAM,CAAClB,OAAD,EAAUmB,KAAV,CAAX,IAA+B,IAA/B,EAAqC;AACjC;AACA,YAAMR,SAAS,GAAG,EAAlB;;AAEA,WAAK,MAAM,CAACV,SAAD,EAAYC,MAAZ,CAAX,IAAkCiB,KAAlC,EAAyC;AACrCR,QAAAA,SAAS,CAACS,IAAV,CAAe;AACXJ,UAAAA,SAAS,EAAEf,SAAS,CAACgB,WAAV,EADA;AAEXf,UAAAA,MAAM,EAAEA;AAFG,SAAf;AAIH;;AAEDgB,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBjB,QAAAA,KAAK,EAAEH,OAAO,CAACiB,WAAR,EADY;AAEnBN,QAAAA,SAAS,EAAEA;AAFQ,OAAvB;AAIH;;AAED,WAAOO,iBAAP;AACH;;AA/EmD","sourcesContent":["import TokenId from \"../token/TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenTransferAccountMap from \"./TokenTransferAccountMap.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITokenTransferList} proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").IAccountAmount} proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n */\n\n/**\n * @augments {ObjectMap<TokenId, TokenTransferAccountMap>}\n */\nexport default class TokenTransferMap extends ObjectMap {\n    constructor() {\n        super((s) => TokenId.fromString(s));\n    }\n\n    /**\n     * @internal\n     * @param {TokenId} tokenId\n     * @param {AccountId} accountId\n     * @param {Long} amount\n     */\n    __set(tokenId, accountId, amount) {\n        const token = tokenId.toString();\n\n        let _map = this._map.get(token);\n        if (_map == null) {\n            _map = new TokenTransferAccountMap();\n            this._map.set(token, _map);\n            this.__map.set(tokenId, _map);\n        }\n\n        _map._set(accountId, amount);\n    }\n\n    /**\n     * @param {proto.ITokenTransferList[]} transfers\n     * @returns {TokenTransferMap}\n     */\n    static _fromProtobuf(transfers) {\n        const tokenTransfersMap = new TokenTransferMap();\n\n        for (const transfer of transfers) {\n            const token = TokenId._fromProtobuf(\n                /** @type {proto.ITokenID} */ (transfer.token)\n            );\n\n            for (const aa of transfer.transfers != null\n                ? transfer.transfers\n                : []) {\n                const account = AccountId._fromProtobuf(\n                    /** @type {proto.IAccountID} */ (aa.accountID)\n                );\n\n                tokenTransfersMap.__set(\n                    token,\n                    account,\n                    /** @type {Long} */ (aa.amount)\n                );\n            }\n        }\n\n        return tokenTransfersMap;\n    }\n\n    /**\n     * @returns {proto.ITokenTransferList[]}\n     */\n    _toProtobuf() {\n        /** @type {proto.ITokenTransferList[]} */\n        const tokenTransferList = [];\n\n        for (const [tokenId, value] of this) {\n            /** @type {proto.IAccountAmount[]} */\n            const transfers = [];\n\n            for (const [accountId, amount] of value) {\n                transfers.push({\n                    accountID: accountId._toProtobuf(),\n                    amount: amount,\n                });\n            }\n\n            tokenTransferList.push({\n                token: tokenId._toProtobuf(),\n                transfers: transfers,\n            });\n        }\n\n        return tokenTransferList;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}