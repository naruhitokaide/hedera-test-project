{"ast":null,"code":"import AccountId from \"../account/AccountId.js\";\nimport * as sha384 from \"../cryptography/sha384.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n */\n\n/**\n * @augments {ObjectMap<AccountId, Uint8Array>}\n */\n\nexport default class TransactionHashMap extends ObjectMap {\n  constructor() {\n    super(s => AccountId.fromString(s));\n  }\n  /**\n   * @param {import(\"./Transaction.js\").default} transaction\n   * @returns {Promise<TransactionHashMap>}\n   */\n\n\n  static async _fromTransaction(transaction) {\n    const hashes = new TransactionHashMap();\n\n    for (let i = 0; i < transaction._nodeIds.length; i++) {\n      const nodeAccountId = transaction._nodeIds[i];\n      const tx =\n      /** @type {proto.ITransaction} */\n      transaction._transactions[i];\n      const hash = await sha384.digest(\n      /** @type {Uint8Array} */\n      tx.signedTransactionBytes);\n\n      hashes._set(nodeAccountId, hash);\n    }\n\n    return hashes;\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/transaction/TransactionHashMap.js"],"names":["AccountId","sha384","ObjectMap","TransactionHashMap","constructor","s","fromString","_fromTransaction","transaction","hashes","i","_nodeIds","length","nodeAccountId","tx","_transactions","hash","digest","signedTransactionBytes","_set"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAO,KAAKC,MAAZ,MAAwB,2BAAxB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,kBAAN,SAAiCD,SAAjC,CAA2C;AACtDE,EAAAA,WAAW,GAAG;AACV,UAAOC,CAAD,IAAOL,SAAS,CAACM,UAAV,CAAqBD,CAArB,CAAb;AACH;AAED;AACJ;AACA;AACA;;;AACiC,eAAhBE,gBAAgB,CAACC,WAAD,EAAc;AACvC,UAAMC,MAAM,GAAG,IAAIN,kBAAJ,EAAf;;AAEA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,QAAZ,CAAqBC,MAAzC,EAAiDF,CAAC,EAAlD,EAAsD;AAClD,YAAMG,aAAa,GAAGL,WAAW,CAACG,QAAZ,CAAqBD,CAArB,CAAtB;AACA,YAAMI,EAAE;AAAG;AACPN,MAAAA,WAAW,CAACO,aAAZ,CAA0BL,CAA1B,CADJ;AAGA,YAAMM,IAAI,GAAG,MAAMf,MAAM,CAACgB,MAAP;AACf;AAA2BH,MAAAA,EAAE,CAACI,sBADf,CAAnB;;AAIAT,MAAAA,MAAM,CAACU,IAAP,CAAYN,aAAZ,EAA2BG,IAA3B;AACH;;AAED,WAAOP,MAAP;AACH;;AAzBqD","sourcesContent":["import AccountId from \"../account/AccountId.js\";\nimport * as sha384 from \"../cryptography/sha384.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n */\n\n/**\n * @augments {ObjectMap<AccountId, Uint8Array>}\n */\nexport default class TransactionHashMap extends ObjectMap {\n    constructor() {\n        super((s) => AccountId.fromString(s));\n    }\n\n    /**\n     * @param {import(\"./Transaction.js\").default} transaction\n     * @returns {Promise<TransactionHashMap>}\n     */\n    static async _fromTransaction(transaction) {\n        const hashes = new TransactionHashMap();\n\n        for (let i = 0; i < transaction._nodeIds.length; i++) {\n            const nodeAccountId = transaction._nodeIds[i];\n            const tx = /** @type {proto.ITransaction} */ (\n                transaction._transactions[i]\n            );\n            const hash = await sha384.digest(\n                /** @type {Uint8Array} */ (tx.signedTransactionBytes)\n            );\n\n            hashes._set(nodeAccountId, hash);\n        }\n\n        return hashes;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}