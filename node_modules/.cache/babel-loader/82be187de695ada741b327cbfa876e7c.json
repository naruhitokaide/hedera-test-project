{"ast":null,"code":"import * as hmac from \"../primitive/hmac.js\";\n/**\n * @param {Uint8Array} parentKey\n * @param {Uint8Array} chainCode\n * @param {number} index\n * @returns {Promise<{ keyData: Uint8Array; chainCode: Uint8Array }>}\n */\n\nexport async function derive(parentKey, chainCode, index) {\n  const input = new Uint8Array(37); // 0x00 + parentKey + index(BE)\n\n  input[0] = 0;\n  input.set(parentKey, 1);\n  new DataView(input.buffer, input.byteOffset, input.byteLength).setUint32(33, index, false); // set the index to hardened\n\n  input[33] |= 128;\n  const digest = await hmac.hash(hmac.HashAlgorithm.Sha512, chainCode, input);\n  return {\n    keyData: digest.subarray(0, 32),\n    chainCode: digest.subarray(32)\n  };\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/cryptography/src/primitive/slip10.js"],"names":["hmac","derive","parentKey","chainCode","index","input","Uint8Array","set","DataView","buffer","byteOffset","byteLength","setUint32","digest","hash","HashAlgorithm","Sha512","keyData","subarray"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,sBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,MAAf,CAAsBC,SAAtB,EAAiCC,SAAjC,EAA4CC,KAA5C,EAAmD;AACtD,QAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAd,CADsD,CAGtD;;AACAD,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACAA,EAAAA,KAAK,CAACE,GAAN,CAAUL,SAAV,EAAqB,CAArB;AACA,MAAIM,QAAJ,CAAaH,KAAK,CAACI,MAAnB,EAA2BJ,KAAK,CAACK,UAAjC,EAA6CL,KAAK,CAACM,UAAnD,EAA+DC,SAA/D,CACI,EADJ,EAEIR,KAFJ,EAGI,KAHJ,EANsD,CAYtD;;AACAC,EAAAA,KAAK,CAAC,EAAD,CAAL,IAAa,GAAb;AAEA,QAAMQ,MAAM,GAAG,MAAMb,IAAI,CAACc,IAAL,CAAUd,IAAI,CAACe,aAAL,CAAmBC,MAA7B,EAAqCb,SAArC,EAAgDE,KAAhD,CAArB;AAEA,SAAO;AAAEY,IAAAA,OAAO,EAAEJ,MAAM,CAACK,QAAP,CAAgB,CAAhB,EAAmB,EAAnB,CAAX;AAAmCf,IAAAA,SAAS,EAAEU,MAAM,CAACK,QAAP,CAAgB,EAAhB;AAA9C,GAAP;AACH","sourcesContent":["import * as hmac from \"../primitive/hmac.js\";\n\n/**\n * @param {Uint8Array} parentKey\n * @param {Uint8Array} chainCode\n * @param {number} index\n * @returns {Promise<{ keyData: Uint8Array; chainCode: Uint8Array }>}\n */\nexport async function derive(parentKey, chainCode, index) {\n    const input = new Uint8Array(37);\n\n    // 0x00 + parentKey + index(BE)\n    input[0] = 0;\n    input.set(parentKey, 1);\n    new DataView(input.buffer, input.byteOffset, input.byteLength).setUint32(\n        33,\n        index,\n        false\n    );\n\n    // set the index to hardened\n    input[33] |= 128;\n\n    const digest = await hmac.hash(hmac.HashAlgorithm.Sha512, chainCode, input);\n\n    return { keyData: digest.subarray(0, 32), chainCode: digest.subarray(32) };\n}\n"]},"metadata":{},"sourceType":"module"}