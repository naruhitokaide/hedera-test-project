{"ast":null,"code":"var _jsxFileName = \"C:\\\\Work\\\\coding-sandbox\\\\react-again\\\\dapp-days\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction } from \"@hashgraph/sdk\";\nimport CreateButton from \"./components/CreateButton.jsx\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [token, setToken] = useState();\n\n  async function tokenCreate() {\n    console.log(\"- Creating token\");\n    const operatorId = AccountId.fromString(operator.id);\n    const operatorKey = PrivateKey.fromString(operator.pvkey);\n    const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n    const tokenCreateTx = new TokenCreateTransaction().setTokenName(\"dAppDayToken\").setTokenSymbol(\"DDT\").setTreasuryAccountId(operatorId).setInitialSupply(100).setDecimals(0).freezeWith(client);\n    const tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n    const tokenCreateSubmit = await tokenCreateSign.execute(client);\n    const tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n    const tokenId = tokenCreateRec.receipt.tokenId;\n    setToken(tokenId);\n  }\n\n  let confirmationText;\n\n  if (token === undefined) {\n    confirmationText = \"\";\n    console.log(`Nothing  yet`);\n  } else {\n    confirmationText = `Created token with ID: ${token}`;\n    console.log(`Token ID ${token}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(CreateButton, {\n      fcn: tokenCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"2b1Gw51qdmmjpiYzw8hh0YVh/kM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/src/App.jsx"],"names":["React","useState","useRef","Client","AccountId","PrivateKey","TokenCreateTransaction","CreateButton","App","token","setToken","tokenCreate","console","log","operatorId","fromString","operator","id","operatorKey","pvkey","client","forTestnet","setOperator","tokenCreateTx","setTokenName","setTokenSymbol","setTreasuryAccountId","setInitialSupply","setDecimals","freezeWith","tokenCreateSign","sign","tokenCreateSubmit","execute","tokenCreateRec","getRecord","tokenId","receipt","confirmationText","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,EAAwCC,sBAAxC,QAAsE,gBAAtE;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAO,kBAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,EAAlC;;AAEA,iBAAeU,WAAf,GAA6B;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,UAAMC,UAAU,GAAGV,SAAS,CAACW,UAAV,CAAqBC,QAAQ,CAACC,EAA9B,CAAnB;AACA,UAAMC,WAAW,GAAGb,UAAU,CAACU,UAAX,CAAsBC,QAAQ,CAACG,KAA/B,CAApB;AACA,UAAMC,MAAM,GAAGjB,MAAM,CAACkB,UAAP,GAAoBC,WAApB,CAAgCR,UAAhC,EAA4CI,WAA5C,CAAf;AAEA,UAAMK,aAAa,GAAG,IAAIjB,sBAAJ,GACpBkB,YADoB,CACP,cADO,EAEpBC,cAFoB,CAEL,KAFK,EAGpBC,oBAHoB,CAGCZ,UAHD,EAIpBa,gBAJoB,CAIH,GAJG,EAKpBC,WALoB,CAKR,CALQ,EAMpBC,UANoB,CAMTT,MANS,CAAtB;AAOA,UAAMU,eAAe,GAAG,MAAMP,aAAa,CAACQ,IAAd,CAAmBb,WAAnB,CAA9B;AACA,UAAMc,iBAAiB,GAAG,MAAMF,eAAe,CAACG,OAAhB,CAAwBb,MAAxB,CAAhC;AACA,UAAMc,cAAc,GAAG,MAAMF,iBAAiB,CAACG,SAAlB,CAA4Bf,MAA5B,CAA7B;AACA,UAAMgB,OAAO,GAAGF,cAAc,CAACG,OAAf,CAAuBD,OAAvC;AACA1B,IAAAA,QAAQ,CAAC0B,OAAD,CAAR;AACA;;AAED,MAAIE,gBAAJ;;AACA,MAAI7B,KAAK,KAAK8B,SAAd,EAAyB;AACxBD,IAAAA,gBAAgB,GAAG,EAAnB;AACA1B,IAAAA,OAAO,CAACC,GAAR,CAAa,cAAb;AACA,GAHD,MAGO;AACNyB,IAAAA,gBAAgB,GAAI,0BAAyB7B,KAAM,EAAnD;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWJ,KAAM,EAA9B;AACA;;AAED,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACC,QAAC,YAAD;AAAc,MAAA,GAAG,EAAEE;AAAnB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GAtCQH,G;;KAAAA,G;AAwCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction } from \"@hashgraph/sdk\";\nimport CreateButton from \"./components/CreateButton.jsx\";\nimport \"./styles/App.css\";\n\nfunction App() {\n\tconst [token, setToken] = useState();\n\n\tasync function tokenCreate() {\n\t\tconsole.log(\"- Creating token\");\n\n\t\tconst operatorId = AccountId.fromString(operator.id);\n\t\tconst operatorKey = PrivateKey.fromString(operator.pvkey);\n\t\tconst client = Client.forTestnet().setOperator(operatorId, operatorKey);\n\n\t\tconst tokenCreateTx = new TokenCreateTransaction()\n\t\t\t.setTokenName(\"dAppDayToken\")\n\t\t\t.setTokenSymbol(\"DDT\")\n\t\t\t.setTreasuryAccountId(operatorId)\n\t\t\t.setInitialSupply(100)\n\t\t\t.setDecimals(0)\n\t\t\t.freezeWith(client);\n\t\tconst tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n\t\tconst tokenCreateSubmit = await tokenCreateSign.execute(client);\n\t\tconst tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n\t\tconst tokenId = tokenCreateRec.receipt.tokenId;\n\t\tsetToken(tokenId);\n\t}\n\n\tlet confirmationText;\n\tif (token === undefined) {\n\t\tconfirmationText = \"\";\n\t\tconsole.log(`Nothing  yet`);\n\t} else {\n\t\tconfirmationText = `Created token with ID: ${token}`;\n\t\tconsole.log(`Token ID ${token}`);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<CreateButton fcn={tokenCreate} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}