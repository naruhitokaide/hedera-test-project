{"ast":null,"code":"import ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport Status from \"../Status.js\";\nimport TransactionReceiptQuery from \"./TransactionReceiptQuery.js\";\nimport TransactionRecordQuery from \"./TransactionRecordQuery.js\";\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"./TransactionId.js\").default} TransactionId\n * @typedef {import(\"./TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./TransactionRecord.js\").default} TransactionRecord\n */\n\nexport default class TransactionResponse {\n  /**\n   * @internal\n   * @param {object} props\n   * @param {AccountId} props.nodeId\n   * @param {Uint8Array} props.transactionHash\n   * @param {TransactionId} props.transactionId\n   */\n  constructor(props) {\n    /** @readonly */\n    this.nodeId = props.nodeId;\n    /** @readonly */\n\n    this.transactionHash = props.transactionHash;\n    /** @readonly */\n\n    this.transactionId = props.transactionId;\n    Object.freeze(this);\n  }\n  /**\n   * @param {Client} client\n   * @returns {Promise<TransactionReceipt>}\n   */\n\n\n  async getReceipt(client) {\n    const receipt = await new TransactionReceiptQuery().setTransactionId(this.transactionId).setNodeAccountIds([this.nodeId]).execute(client);\n\n    if (receipt.status !== Status.Success) {\n      throw new ReceiptStatusError({\n        transactionReceipt: receipt,\n        status: receipt.status,\n        transactionId: this.transactionId\n      });\n    }\n\n    return receipt;\n  }\n  /**\n   * @param {Client} client\n   * @returns {Promise<TransactionRecord>}\n   */\n\n\n  async getRecord(client) {\n    await this.getReceipt(client);\n    return new TransactionRecordQuery().setTransactionId(this.transactionId).setNodeAccountIds([this.nodeId]).execute(client);\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/transaction/TransactionResponse.js"],"names":["ReceiptStatusError","Status","TransactionReceiptQuery","TransactionRecordQuery","TransactionResponse","constructor","props","nodeId","transactionHash","transactionId","Object","freeze","getReceipt","client","receipt","setTransactionId","setNodeAccountIds","execute","status","Success","transactionReceipt","getRecord"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,0BAA/B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,uBAAP,MAAoC,8BAApC;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,mBAAN,CAA0B;AACrC;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACA,SAAKC,MAAL,GAAcD,KAAK,CAACC,MAApB;AAEA;;AACA,SAAKC,eAAL,GAAuBF,KAAK,CAACE,eAA7B;AAEA;;AACA,SAAKC,aAAL,GAAqBH,KAAK,CAACG,aAA3B;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;;;AACoB,QAAVC,UAAU,CAACC,MAAD,EAAS;AACrB,UAAMC,OAAO,GAAG,MAAM,IAAIZ,uBAAJ,GACjBa,gBADiB,CACA,KAAKN,aADL,EAEjBO,iBAFiB,CAEC,CAAC,KAAKT,MAAN,CAFD,EAGjBU,OAHiB,CAGTJ,MAHS,CAAtB;;AAKA,QAAIC,OAAO,CAACI,MAAR,KAAmBjB,MAAM,CAACkB,OAA9B,EAAuC;AACnC,YAAM,IAAInB,kBAAJ,CAAuB;AACzBoB,QAAAA,kBAAkB,EAAEN,OADK;AAEzBI,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFS;AAGzBT,QAAAA,aAAa,EAAE,KAAKA;AAHK,OAAvB,CAAN;AAKH;;AAED,WAAOK,OAAP;AACH;AAED;AACJ;AACA;AACA;;;AACmB,QAATO,SAAS,CAACR,MAAD,EAAS;AACpB,UAAM,KAAKD,UAAL,CAAgBC,MAAhB,CAAN;AAEA,WAAO,IAAIV,sBAAJ,GACFY,gBADE,CACe,KAAKN,aADpB,EAEFO,iBAFE,CAEgB,CAAC,KAAKT,MAAN,CAFhB,EAGFU,OAHE,CAGMJ,MAHN,CAAP;AAIH;;AArDoC","sourcesContent":["import ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport Status from \"../Status.js\";\nimport TransactionReceiptQuery from \"./TransactionReceiptQuery.js\";\nimport TransactionRecordQuery from \"./TransactionRecordQuery.js\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"./TransactionId.js\").default} TransactionId\n * @typedef {import(\"./TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./TransactionRecord.js\").default} TransactionRecord\n */\n\nexport default class TransactionResponse {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {AccountId} props.nodeId\n     * @param {Uint8Array} props.transactionHash\n     * @param {TransactionId} props.transactionId\n     */\n    constructor(props) {\n        /** @readonly */\n        this.nodeId = props.nodeId;\n\n        /** @readonly */\n        this.transactionHash = props.transactionHash;\n\n        /** @readonly */\n        this.transactionId = props.transactionId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {Promise<TransactionReceipt>}\n     */\n    async getReceipt(client) {\n        const receipt = await new TransactionReceiptQuery()\n            .setTransactionId(this.transactionId)\n            .setNodeAccountIds([this.nodeId])\n            .execute(client);\n\n        if (receipt.status !== Status.Success) {\n            throw new ReceiptStatusError({\n                transactionReceipt: receipt,\n                status: receipt.status,\n                transactionId: this.transactionId,\n            });\n        }\n\n        return receipt;\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {Promise<TransactionRecord>}\n     */\n    async getRecord(client) {\n        await this.getReceipt(client);\n\n        return new TransactionRecordQuery()\n            .setTransactionId(this.transactionId)\n            .setNodeAccountIds([this.nodeId])\n            .execute(client);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}