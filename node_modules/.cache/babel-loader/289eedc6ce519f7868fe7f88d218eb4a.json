{"ast":null,"code":"import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport AccountBalance from \"./AccountBalance.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountBalanceQuery} proto.ICryptoGetAccountBalanceQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountBalanceResponse} proto.ICryptoGetAccountBalanceResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * Get the balance of a Hederaâ„¢ crypto-currency account.\n *\n * This returns only the balance, so its a smaller and faster reply\n * than AccountInfoQuery.\n *\n * This query is free.\n *\n * @augments {Query<AccountBalance>}\n */\n\nexport default class AccountBalanceQuery extends Query {\n  /**\n   * @param {object} [props]\n   * @param {AccountId | string} [props.accountId]\n   * @param {ContractId | string} [props.contractId]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @type {?AccountId}\n     * @private\n     */\n\n    this._accountId = null;\n    /**\n     * @type {?ContractId}\n     * @private\n     */\n\n    this._contractId = null;\n\n    if (props.accountId != null) {\n      this.setAccountId(props.accountId);\n    }\n\n    if (props.contractId != null) {\n      this.setContractId(props.contractId);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.IQuery} query\n   * @returns {AccountBalanceQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const balance =\n    /** @type {proto.ICryptoGetAccountBalanceQuery} */\n    query.cryptogetAccountBalance;\n    return new AccountBalanceQuery({\n      accountId: balance.accountID != null ? AccountId._fromProtobuf(balance.accountID) : undefined,\n      contractId: balance.contractID != null ? ContractId._fromProtobuf(balance.contractID) : undefined\n    });\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get accountId() {\n    return this._accountId;\n  }\n  /**\n   * Set the account ID for which the balance is being requested.\n   *\n   * This is mutually exclusive with `setContractId`.\n   *\n   * @param {AccountId | string} accountId\n   * @returns {this}\n   */\n\n\n  setAccountId(accountId) {\n    this._accountId = typeof accountId === \"string\" ? AccountId.fromString(accountId) : accountId.clone();\n    return this;\n  }\n  /**\n   * @returns {?ContractId}\n   */\n\n\n  get contractId() {\n    return this._contractId;\n  }\n  /**\n   * Set the contract ID for which the balance is being requested.\n   *\n   * This is mutually exclusive with `setAccountId`.\n   *\n   * @param {ContractId | string} contractId\n   * @returns {this}\n   */\n\n\n  setContractId(contractId) {\n    this._contractId = typeof contractId === \"string\" ? ContractId.fromString(contractId) : contractId.clone();\n    return this;\n  }\n  /**\n   * @protected\n   * @override\n   * @returns {boolean}\n   */\n\n\n  _isPaymentRequired() {\n    return false;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._accountId != null) {\n      this._accountId.validateChecksum(client);\n    }\n\n    if (this._contractId != null) {\n      this._contractId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.IQuery} request\n   * @returns {Promise<proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.cryptoGetBalance(request);\n  }\n  /**\n   * @override\n   * @override\n   * @internal\n   * @param {proto.IResponse} response\n   * @returns {proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const cryptogetAccountBalance =\n    /** @type {proto.ICryptoGetAccountBalanceResponse} */\n    response.cryptogetAccountBalance;\n    return (\n      /** @type {proto.IResponseHeader} */\n      cryptogetAccountBalance.header\n    );\n  }\n  /**\n   * @override\n   * @override\n   * @internal\n   * @param {proto.IResponse} response\n   * @param {AccountId} nodeAccountId\n   * @param {proto.IQuery} request\n   * @returns {Promise<AccountBalance>}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _mapResponse(response, nodeAccountId, request) {\n    const cryptogetAccountBalance =\n    /** @type {proto.ICryptoGetAccountBalanceResponse} */\n    response.cryptogetAccountBalance;\n    return Promise.resolve(AccountBalance._fromProtobuf(cryptogetAccountBalance));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IQueryHeader} header\n   * @returns {proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      cryptogetAccountBalance: {\n        header,\n        accountID: this._accountId != null ? this._accountId._toProtobuf() : null,\n        contractID: this._contractId != null ? this._contractId._toProtobuf() : null\n      }\n    };\n  }\n\n}\nQUERY_REGISTRY.set(\"cryptogetAccountBalance\", // eslint-disable-next-line @typescript-eslint/unbound-method\nAccountBalanceQuery._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/account/AccountBalanceQuery.js"],"names":["Query","QUERY_REGISTRY","AccountId","ContractId","AccountBalance","AccountBalanceQuery","constructor","props","_accountId","_contractId","accountId","setAccountId","contractId","setContractId","_fromProtobuf","query","balance","cryptogetAccountBalance","accountID","undefined","contractID","fromString","clone","_isPaymentRequired","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","cryptoGetBalance","_mapResponseHeader","response","header","_mapResponse","nodeAccountId","Promise","resolve","_onMakeRequest","_toProtobuf","set"],"mappings":"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","sourcesContent":["import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport AccountBalance from \"./AccountBalance.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountBalanceQuery} proto.ICryptoGetAccountBalanceQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountBalanceResponse} proto.ICryptoGetAccountBalanceResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * Get the balance of a Hederaâ„¢ crypto-currency account.\n *\n * This returns only the balance, so its a smaller and faster reply\n * than AccountInfoQuery.\n *\n * This query is free.\n *\n * @augments {Query<AccountBalance>}\n */\nexport default class AccountBalanceQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {AccountId | string} [props.accountId]\n     * @param {ContractId | string} [props.contractId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        /**\n         * @type {?ContractId}\n         * @private\n         */\n        this._contractId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {AccountBalanceQuery}\n     */\n    static _fromProtobuf(query) {\n        const balance = /** @type {proto.ICryptoGetAccountBalanceQuery} */ (\n            query.cryptogetAccountBalance\n        );\n\n        return new AccountBalanceQuery({\n            accountId:\n                balance.accountID != null\n                    ? AccountId._fromProtobuf(balance.accountID)\n                    : undefined,\n            contractId:\n                balance.contractID != null\n                    ? ContractId._fromProtobuf(balance.contractID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the balance is being requested.\n     *\n     * This is mutually exclusive with `setContractId`.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the balance is being requested.\n     *\n     * This is mutually exclusive with `setAccountId`.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {this}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            typeof contractId === \"string\"\n                ? ContractId.fromString(contractId)\n                : contractId.clone();\n\n        return this;\n    }\n\n    /**\n     * @protected\n     * @override\n     * @returns {boolean}\n     */\n    _isPaymentRequired() {\n        return false;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n\n        if (this._contractId != null) {\n            this._contractId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.cryptoGetBalance(request);\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptogetAccountBalance =\n            /** @type {proto.ICryptoGetAccountBalanceResponse} */ (\n                response.cryptogetAccountBalance\n            );\n        return /** @type {proto.IResponseHeader} */ (\n            cryptogetAccountBalance.header\n        );\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {proto.IQuery} request\n     * @returns {Promise<AccountBalance>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const cryptogetAccountBalance =\n            /** @type {proto.ICryptoGetAccountBalanceResponse} */ (\n                response.cryptogetAccountBalance\n            );\n        return Promise.resolve(\n            AccountBalance._fromProtobuf(cryptogetAccountBalance)\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptogetAccountBalance: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"cryptogetAccountBalance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountBalanceQuery._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}