{"ast":null,"code":"import { keccak256 } from \"./keccak.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport elliptic from \"elliptic\";\nconst secp256k1 = new elliptic.ec(\"secp256k1\");\n/**\n * @typedef {import(\"../EcdsaPrivateKey.js\").KeyPair} KeyPair\n */\n\n/**\n * @returns {KeyPair}\n */\n\nexport function generate() {\n  const keypair = secp256k1.genKeyPair();\n  return {\n    privateKey: hex.decode(keypair.getPrivate(\"hex\")),\n    publicKey: hex.decode(keypair.getPublic(true, \"hex\"))\n  };\n}\n/**\n * @returns {Promise<KeyPair>}\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport async function generateAsync() {\n  return Promise.resolve(generate());\n}\n/**\n * @param {Uint8Array} data\n * @returns {KeyPair}\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function fromBytes(data) {\n  const keypair = secp256k1.keyFromPrivate(data);\n  return {\n    privateKey: hex.decode(keypair.getPrivate(\"hex\")),\n    publicKey: hex.decode(keypair.getPublic(true, \"hex\"))\n  };\n}\n/**\n * @param {Uint8Array} keydata\n * @param {Uint8Array} message\n * @returns {Uint8Array}\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function sign(keydata, message) {\n  const msg = hex.encode(message);\n  const data = hex.decode(keccak256(`0x${msg}`));\n  const keypair = secp256k1.keyFromPrivate(keydata);\n  const signature = keypair.sign(data);\n  const r = signature.r.toArray(\"be\", 32);\n  const s = signature.s.toArray(\"be\", 32);\n  const result = new Uint8Array(64);\n  result.set(r, 0);\n  result.set(s, 32);\n  return result;\n}\n/**\n * @param {Uint8Array} keydata\n * @param {Uint8Array} message\n * @param {Uint8Array} signature\n * @returns {boolean}\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function verify(keydata, message, signature) {\n  const msg = hex.encode(message);\n  const data = hex.decode(keccak256(`0x${msg}`));\n  const keypair = secp256k1.keyFromPublic(keydata);\n  return keypair.verify(data, {\n    r: signature.subarray(0, 32),\n    s: signature.subarray(32, 64)\n  });\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/cryptography/src/primitive/ecdsa.js"],"names":["keccak256","hex","elliptic","secp256k1","ec","generate","keypair","genKeyPair","privateKey","decode","getPrivate","publicKey","getPublic","generateAsync","Promise","resolve","fromBytes","data","keyFromPrivate","sign","keydata","message","msg","encode","signature","r","toArray","s","result","Uint8Array","set","verify","keyFromPublic","subarray"],"mappings":"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","sourcesContent":["import { keccak256 } from \"./keccak.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport elliptic from \"elliptic\";\n\nconst secp256k1 = new elliptic.ec(\"secp256k1\");\n\n/**\n * @typedef {import(\"../EcdsaPrivateKey.js\").KeyPair} KeyPair\n */\n\n/**\n * @returns {KeyPair}\n */\nexport function generate() {\n    const keypair = secp256k1.genKeyPair();\n\n    return {\n        privateKey: hex.decode(keypair.getPrivate(\"hex\")),\n        publicKey: hex.decode(keypair.getPublic(true, \"hex\")),\n    };\n}\n\n/**\n * @returns {Promise<KeyPair>}\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport async function generateAsync() {\n    return Promise.resolve(generate());\n}\n\n/**\n * @param {Uint8Array} data\n * @returns {KeyPair}\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function fromBytes(data) {\n    const keypair = secp256k1.keyFromPrivate(data);\n\n    return {\n        privateKey: hex.decode(keypair.getPrivate(\"hex\")),\n        publicKey: hex.decode(keypair.getPublic(true, \"hex\")),\n    };\n}\n\n/**\n * @param {Uint8Array} keydata\n * @param {Uint8Array} message\n * @returns {Uint8Array}\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function sign(keydata, message) {\n    const msg = hex.encode(message);\n    const data = hex.decode(keccak256(`0x${msg}`));\n    const keypair = secp256k1.keyFromPrivate(keydata);\n    const signature = keypair.sign(data);\n\n    const r = signature.r.toArray(\"be\", 32);\n    const s = signature.s.toArray(\"be\", 32);\n\n    const result = new Uint8Array(64);\n    result.set(r, 0);\n    result.set(s, 32);\n    return result;\n}\n\n/**\n * @param {Uint8Array} keydata\n * @param {Uint8Array} message\n * @param {Uint8Array} signature\n * @returns {boolean}\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function verify(keydata, message, signature) {\n    const msg = hex.encode(message);\n    const data = hex.decode(keccak256(`0x${msg}`));\n    const keypair = secp256k1.keyFromPublic(keydata);\n\n    return keypair.verify(data, {\n        r: signature.subarray(0, 32),\n        s: signature.subarray(32, 64),\n    });\n}\n"]},"metadata":{},"sourceType":"module"}