{"ast":null,"code":"import Long from \"long\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n */\n\nconst MAX_NS = Long.fromNumber(1000000000);\nexport default class Timestamp {\n  /**\n   * @param {Long | number} seconds\n   * @param {Long | number} nanos\n   */\n  constructor(seconds, nanos) {\n    /**\n     * @readonly\n     * @type {Long}\n     */\n    this.seconds = seconds instanceof Long ? seconds : Long.fromNumber(seconds);\n    /**\n     * @readonly\n     * @type {Long}\n     */\n\n    this.nanos = nanos instanceof Long ? nanos : Long.fromNumber(nanos);\n    Object.freeze(this);\n  }\n  /**\n   * @returns {Timestamp}\n   */\n\n\n  static generate() {\n    const jitter = Math.floor(Math.random() * 5000) + 8000;\n    const now = Date.now() - jitter;\n    const seconds = Math.floor(now / 1000);\n    const nanos = Math.floor(now % 1000) * 1000000 + Math.floor(Math.random() * 1000000);\n    return new Timestamp(seconds, nanos);\n  }\n  /**\n   * @param {string | number | Date} date\n   * @returns {Timestamp}\n   */\n\n\n  static fromDate(date) {\n    let ms;\n\n    if (typeof date === \"number\") {\n      ms = date;\n    } else if (typeof date === \"string\") {\n      ms = Date.parse(date);\n    } else if (date instanceof Date) {\n      ms = date.getTime();\n    } else {\n      throw new TypeError(`invalid type '${typeof date}' for 'data', expected 'Date'`);\n    }\n\n    const seconds = Math.floor(ms / 1000);\n    const nanos = Math.floor(ms % 1000) * 1000000;\n    return new Timestamp(seconds, nanos);\n  }\n  /**\n   * @returns {Date}\n   */\n\n\n  toDate() {\n    return new Date(this.seconds.toInt() * 1000 + Math.floor(this.nanos.toInt() / 1000000));\n  }\n  /**\n   * @param {Long | number} nanos\n   * @returns {Timestamp}\n   */\n\n\n  plusNanos(nanos) {\n    const ns = this.nanos.add(nanos);\n    return new Timestamp(this.seconds.add(ns.div(MAX_NS)), ns.mod(MAX_NS));\n  }\n  /**\n   * @internal\n   * @returns {proto.ITimestamp}\n   */\n\n\n  _toProtobuf() {\n    return {\n      seconds: this.seconds,\n      nanos: this.nanos.toInt()\n    };\n  }\n  /**\n   * @internal\n   * @param {proto.ITimestamp} timestamp\n   * @returns {Timestamp}\n   */\n\n\n  static _fromProtobuf(timestamp) {\n    return new Timestamp(timestamp.seconds instanceof Long ? timestamp.seconds.toInt() : timestamp.seconds != null ? timestamp.seconds : 0, timestamp.nanos != null ? timestamp.nanos : 0);\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return `${this.seconds.toString()}.${this.nanos.toString()}`;\n  }\n  /**\n   * @param {Timestamp} other\n   * @returns {number}\n   */\n\n\n  compare(other) {\n    const comparison = this.seconds.compare(other.seconds);\n\n    if (comparison != 0) {\n      return comparison;\n    }\n\n    return this.nanos.compare(other.nanos);\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/Timestamp.js"],"names":["Long","MAX_NS","fromNumber","Timestamp","constructor","seconds","nanos","Object","freeze","generate","jitter","Math","floor","random","now","Date","fromDate","date","ms","parse","getTime","TypeError","toDate","toInt","plusNanos","ns","add","div","mod","_toProtobuf","_fromProtobuf","timestamp","toString","compare","other","comparison"],"mappings":"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","sourcesContent":["import Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n */\n\nconst MAX_NS = Long.fromNumber(1000000000);\n\nexport default class Timestamp {\n    /**\n     * @param {Long | number} seconds\n     * @param {Long | number} nanos\n     */\n    constructor(seconds, nanos) {\n        /**\n         * @readonly\n         * @type {Long}\n         */\n        this.seconds =\n            seconds instanceof Long ? seconds : Long.fromNumber(seconds);\n\n        /**\n         * @readonly\n         * @type {Long}\n         */\n        this.nanos = nanos instanceof Long ? nanos : Long.fromNumber(nanos);\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @returns {Timestamp}\n     */\n    static generate() {\n        const jitter = Math.floor(Math.random() * 5000) + 8000;\n        const now = Date.now() - jitter;\n        const seconds = Math.floor(now / 1000);\n        const nanos =\n            Math.floor(now % 1000) * 1000000 +\n            Math.floor(Math.random() * 1000000);\n\n        return new Timestamp(seconds, nanos);\n    }\n\n    /**\n     * @param {string | number | Date} date\n     * @returns {Timestamp}\n     */\n    static fromDate(date) {\n        let ms;\n\n        if (typeof date === \"number\") {\n            ms = date;\n        } else if (typeof date === \"string\") {\n            ms = Date.parse(date);\n        } else if (date instanceof Date) {\n            ms = date.getTime();\n        } else {\n            throw new TypeError(\n                `invalid type '${typeof date}' for 'data', expected 'Date'`\n            );\n        }\n\n        const seconds = Math.floor(ms / 1000);\n        const nanos = Math.floor(ms % 1000) * 1000000;\n\n        return new Timestamp(seconds, nanos);\n    }\n\n    /**\n     * @returns {Date}\n     */\n    toDate() {\n        return new Date(\n            this.seconds.toInt() * 1000 +\n                Math.floor(this.nanos.toInt() / 1000000)\n        );\n    }\n\n    /**\n     * @param {Long | number} nanos\n     * @returns {Timestamp}\n     */\n    plusNanos(nanos) {\n        const ns = this.nanos.add(nanos);\n\n        return new Timestamp(this.seconds.add(ns.div(MAX_NS)), ns.mod(MAX_NS));\n    }\n\n    /**\n     * @internal\n     * @returns {proto.ITimestamp}\n     */\n    _toProtobuf() {\n        return {\n            seconds: this.seconds,\n            nanos: this.nanos.toInt(),\n        };\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITimestamp} timestamp\n     * @returns {Timestamp}\n     */\n    static _fromProtobuf(timestamp) {\n        return new Timestamp(\n            timestamp.seconds instanceof Long\n                ? timestamp.seconds.toInt()\n                : timestamp.seconds != null\n                ? timestamp.seconds\n                : 0,\n\n            timestamp.nanos != null ? timestamp.nanos : 0\n        );\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this.seconds.toString()}.${this.nanos.toString()}`;\n    }\n\n    /**\n     * @param {Timestamp} other\n     * @returns {number}\n     */\n    compare(other) {\n        const comparison = this.seconds.compare(other.seconds);\n\n        if (comparison != 0) {\n            return comparison;\n        }\n\n        return this.nanos.compare(other.nanos);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}