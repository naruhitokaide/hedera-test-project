{"ast":null,"code":"var _jsxFileName = \"C:\\\\Work\\\\coding-sandbox\\\\react-again\\\\dapp-days\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction, TokenMintTransaction } from \"@hashgraph/sdk\";\nimport operator from \"./config.js\";\nimport MyButton from \"./components/MyButton.jsx\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const operatorId = AccountId.fromString(operator.id);\n  const operatorKey = PrivateKey.fromString(operator.pvkey);\n  const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n  const [tokenId, setTokenId] = useState();\n  const [createTextState, setCreateTextSt] = useState(\"Waiting to create token...\");\n  const [mintTextState, setMintTextSt] = useState();\n  const [tokenSupply, setTokenSupply] = useState();\n\n  async function tokenCreate() {\n    if (tokenId === undefined) {\n      console.log(\"- Creating token\");\n      const tokenCreateTx = new TokenCreateTransaction().setTokenName(\"dAppDayToken\").setTokenSymbol(\"DDT\").setTreasuryAccountId(operatorId).setInitialSupply(100).setDecimals(0).setSupplyKey(operatorKey).freezeWith(client);\n      const tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n      const tokenCreateSubmit = await tokenCreateSign.execute(client);\n      const tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n      const id = tokenCreateRec.receipt.tokenId;\n      const supply = tokenCreateTx._initialSupply.low;\n      setTokenId(id);\n      setTokenSupply(supply);\n      setCreateTextSt(tokenCreateText(id));\n      console.log(`Created token with ID: ${id}`);\n      console.log(`Supply: ${supply}`);\n    } else {\n      setCreateTextSt(tokenCreateText());\n      console.log(`${tokenCreateText()}`);\n    }\n  }\n\n  function tokenCreateText(id) {\n    let tcText;\n    let option1 = `Created token with ID: ${id}`;\n    let option2 = `You already have token with ID: ${tokenId}!`;\n    tokenId === undefined ? tcText = option1 : tcText = option2;\n    return tcText;\n  }\n\n  function tokenMintText() {\n    let tmText;\n    let option1 = `Created token with ID: `;\n    let option2 = `You already have token with ID: ${tokenId}!`;\n    tokenId === undefined ? tmText = option1 : tmText = option2;\n    return tmText;\n  }\n\n  async function tokenMint() {\n    try {\n      console.log(\"- Minting new tokens!\");\n      const tokenMintTx = new TokenMintTransaction().setTokenId(tokenId).setAmount(100).freezeWith(client);\n      const tokenMintSign = await tokenMintTx.sign(operatorKey);\n      const tokenMintSubmit = await tokenMintSign.execute(client);\n      const tokenMintRec = await tokenMintSubmit.getRecord(client);\n      const supply = tokenMintRec.receipt.totalSupply;\n      setTokenSupply(supply);\n      console.log(`Minted new tokens. Now there are ${supply}`);\n    } catch {\n      setMintTextSt(tokenCreateText());\n      console.log(`Create a token first!`);\n    }\n  }\n\n  let tokenSupplyText;\n  tokenSupply === undefined ? tokenSupplyText = \"\" : tokenSupplyText = `Supply of token ID ${tokenId} is ${tokenSupply}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(MyButton, {\n      fcn: tokenCreate,\n      text: \"Create New Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: createTextState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n      fcn: tokenMint,\n      text: \"Mint New Tokens\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: tokenSupplyText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"gOgVY2cMSe//wzC22JlKBHJqB8A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/src/App.jsx"],"names":["React","useState","useRef","Client","AccountId","PrivateKey","TokenCreateTransaction","TokenMintTransaction","operator","MyButton","App","operatorId","fromString","id","operatorKey","pvkey","client","forTestnet","setOperator","tokenId","setTokenId","createTextState","setCreateTextSt","mintTextState","setMintTextSt","tokenSupply","setTokenSupply","tokenCreate","undefined","console","log","tokenCreateTx","setTokenName","setTokenSymbol","setTreasuryAccountId","setInitialSupply","setDecimals","setSupplyKey","freezeWith","tokenCreateSign","sign","tokenCreateSubmit","execute","tokenCreateRec","getRecord","receipt","supply","_initialSupply","low","tokenCreateText","tcText","option1","option2","tokenMintText","tmText","tokenMint","tokenMintTx","setAmount","tokenMintSign","tokenMintSubmit","tokenMintRec","totalSupply","tokenSupplyText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,EAAwCC,sBAAxC,EAAgEC,oBAAhE,QAA4F,gBAA5F;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAO,kBAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACd,QAAMC,UAAU,GAAGP,SAAS,CAACQ,UAAV,CAAqBJ,QAAQ,CAACK,EAA9B,CAAnB;AACA,QAAMC,WAAW,GAAGT,UAAU,CAACO,UAAX,CAAsBJ,QAAQ,CAACO,KAA/B,CAApB;AACA,QAAMC,MAAM,GAAGb,MAAM,CAACc,UAAP,GAAoBC,WAApB,CAAgCP,UAAhC,EAA4CG,WAA5C,CAAf;AAEA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,EAAtC;AACA,QAAM,CAACoB,eAAD,EAAkBC,eAAlB,IAAqCrB,QAAQ,CAAC,4BAAD,CAAnD;AACA,QAAM,CAACsB,aAAD,EAAgBC,aAAhB,IAAiCvB,QAAQ,EAA/C;AACA,QAAM,CAACwB,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,EAA9C;;AAEA,iBAAe0B,WAAf,GAA6B;AAC5B,QAAIR,OAAO,KAAKS,SAAhB,EAA2B;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,YAAMC,aAAa,GAAG,IAAIzB,sBAAJ,GACpB0B,YADoB,CACP,cADO,EAEpBC,cAFoB,CAEL,KAFK,EAGpBC,oBAHoB,CAGCvB,UAHD,EAIpBwB,gBAJoB,CAIH,GAJG,EAKpBC,WALoB,CAKR,CALQ,EAMpBC,YANoB,CAMPvB,WANO,EAOpBwB,UAPoB,CAOTtB,MAPS,CAAtB;AAQA,YAAMuB,eAAe,GAAG,MAAMR,aAAa,CAACS,IAAd,CAAmB1B,WAAnB,CAA9B;AACA,YAAM2B,iBAAiB,GAAG,MAAMF,eAAe,CAACG,OAAhB,CAAwB1B,MAAxB,CAAhC;AACA,YAAM2B,cAAc,GAAG,MAAMF,iBAAiB,CAACG,SAAlB,CAA4B5B,MAA5B,CAA7B;AACA,YAAMH,EAAE,GAAG8B,cAAc,CAACE,OAAf,CAAuB1B,OAAlC;AACA,YAAM2B,MAAM,GAAGf,aAAa,CAACgB,cAAd,CAA6BC,GAA5C;AAEA5B,MAAAA,UAAU,CAACP,EAAD,CAAV;AACAa,MAAAA,cAAc,CAACoB,MAAD,CAAd;AACAxB,MAAAA,eAAe,CAAC2B,eAAe,CAACpC,EAAD,CAAhB,CAAf;AAEAgB,MAAAA,OAAO,CAACC,GAAR,CAAa,0BAAyBjB,EAAG,EAAzC;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAa,WAAUgB,MAAO,EAA9B;AACA,KAvBD,MAuBO;AACNxB,MAAAA,eAAe,CAAC2B,eAAe,EAAhB,CAAf;AACApB,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEmB,eAAe,EAAG,EAAjC;AACA;AACD;;AAED,WAASA,eAAT,CAAyBpC,EAAzB,EAA6B;AAC5B,QAAIqC,MAAJ;AACA,QAAIC,OAAO,GAAI,0BAAyBtC,EAAG,EAA3C;AACA,QAAIuC,OAAO,GAAI,mCAAkCjC,OAAQ,GAAzD;AAEAA,IAAAA,OAAO,KAAKS,SAAZ,GAAyBsB,MAAM,GAAGC,OAAlC,GAA8CD,MAAM,GAAGE,OAAvD;AACA,WAAOF,MAAP;AACA;;AAED,WAASG,aAAT,GAAyB;AACxB,QAAIC,MAAJ;AACA,QAAIH,OAAO,GAAI,yBAAf;AACA,QAAIC,OAAO,GAAI,mCAAkCjC,OAAQ,GAAzD;AAEAA,IAAAA,OAAO,KAAKS,SAAZ,GAAyB0B,MAAM,GAAGH,OAAlC,GAA8CG,MAAM,GAAGF,OAAvD;AACA,WAAOE,MAAP;AACA;;AAED,iBAAeC,SAAf,GAA2B;AAC1B,QAAI;AACH1B,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEA,YAAM0B,WAAW,GAAG,IAAIjD,oBAAJ,GAA2Ba,UAA3B,CAAsCD,OAAtC,EAA+CsC,SAA/C,CAAyD,GAAzD,EAA8DnB,UAA9D,CAAyEtB,MAAzE,CAApB;AACA,YAAM0C,aAAa,GAAG,MAAMF,WAAW,CAAChB,IAAZ,CAAiB1B,WAAjB,CAA5B;AACA,YAAM6C,eAAe,GAAG,MAAMD,aAAa,CAAChB,OAAd,CAAsB1B,MAAtB,CAA9B;AACA,YAAM4C,YAAY,GAAG,MAAMD,eAAe,CAACf,SAAhB,CAA0B5B,MAA1B,CAA3B;AACA,YAAM8B,MAAM,GAAGc,YAAY,CAACf,OAAb,CAAqBgB,WAApC;AAEAnC,MAAAA,cAAc,CAACoB,MAAD,CAAd;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAa,oCAAmCgB,MAAO,EAAvD;AACA,KAXD,CAWE,MAAM;AACPtB,MAAAA,aAAa,CAACyB,eAAe,EAAhB,CAAb;AAEApB,MAAAA,OAAO,CAACC,GAAR,CAAa,uBAAb;AACA;AACD;;AAED,MAAIgC,eAAJ;AACArC,EAAAA,WAAW,KAAKG,SAAhB,GACIkC,eAAe,GAAG,EADtB,GAEIA,eAAe,GAAI,sBAAqB3C,OAAQ,OAAMM,WAAY,EAFtE;AAIA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACC,QAAC,QAAD;AAAU,MAAA,GAAG,EAAEE,WAAf;AAA4B,MAAA,IAAI,EAAE;AAAlC;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,gBAAIN;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFD,eAIC,QAAC,QAAD;AAAU,MAAA,GAAG,EAAEkC,SAAf;AAA0B,MAAA,IAAI,EAAE;AAAhC;AAAA;AAAA;AAAA;AAAA,YAJD,eAKC;AAAA,gBAAIO;AAAJ;AAAA;AAAA;AAAA;AAAA,YALD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AASA;;GA3FQpD,G;;KAAAA,G;AA4FT,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction, TokenMintTransaction } from \"@hashgraph/sdk\";\nimport operator from \"./config.js\";\nimport MyButton from \"./components/MyButton.jsx\";\nimport \"./styles/App.css\";\n\nfunction App() {\n\tconst operatorId = AccountId.fromString(operator.id);\n\tconst operatorKey = PrivateKey.fromString(operator.pvkey);\n\tconst client = Client.forTestnet().setOperator(operatorId, operatorKey);\n\n\tconst [tokenId, setTokenId] = useState();\n\tconst [createTextState, setCreateTextSt] = useState(\"Waiting to create token...\");\n\tconst [mintTextState, setMintTextSt] = useState();\n\tconst [tokenSupply, setTokenSupply] = useState();\n\n\tasync function tokenCreate() {\n\t\tif (tokenId === undefined) {\n\t\t\tconsole.log(\"- Creating token\");\n\n\t\t\tconst tokenCreateTx = new TokenCreateTransaction()\n\t\t\t\t.setTokenName(\"dAppDayToken\")\n\t\t\t\t.setTokenSymbol(\"DDT\")\n\t\t\t\t.setTreasuryAccountId(operatorId)\n\t\t\t\t.setInitialSupply(100)\n\t\t\t\t.setDecimals(0)\n\t\t\t\t.setSupplyKey(operatorKey)\n\t\t\t\t.freezeWith(client);\n\t\t\tconst tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n\t\t\tconst tokenCreateSubmit = await tokenCreateSign.execute(client);\n\t\t\tconst tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n\t\t\tconst id = tokenCreateRec.receipt.tokenId;\n\t\t\tconst supply = tokenCreateTx._initialSupply.low;\n\n\t\t\tsetTokenId(id);\n\t\t\tsetTokenSupply(supply);\n\t\t\tsetCreateTextSt(tokenCreateText(id));\n\n\t\t\tconsole.log(`Created token with ID: ${id}`);\n\t\t\tconsole.log(`Supply: ${supply}`);\n\t\t} else {\n\t\t\tsetCreateTextSt(tokenCreateText());\n\t\t\tconsole.log(`${tokenCreateText()}`);\n\t\t}\n\t}\n\n\tfunction tokenCreateText(id) {\n\t\tlet tcText;\n\t\tlet option1 = `Created token with ID: ${id}`;\n\t\tlet option2 = `You already have token with ID: ${tokenId}!`;\n\n\t\ttokenId === undefined ? (tcText = option1) : (tcText = option2);\n\t\treturn tcText;\n\t}\n\n\tfunction tokenMintText() {\n\t\tlet tmText;\n\t\tlet option1 = `Created token with ID: `;\n\t\tlet option2 = `You already have token with ID: ${tokenId}!`;\n\n\t\ttokenId === undefined ? (tmText = option1) : (tmText = option2);\n\t\treturn tmText;\n\t}\n\n\tasync function tokenMint() {\n\t\ttry {\n\t\t\tconsole.log(\"- Minting new tokens!\");\n\n\t\t\tconst tokenMintTx = new TokenMintTransaction().setTokenId(tokenId).setAmount(100).freezeWith(client);\n\t\t\tconst tokenMintSign = await tokenMintTx.sign(operatorKey);\n\t\t\tconst tokenMintSubmit = await tokenMintSign.execute(client);\n\t\t\tconst tokenMintRec = await tokenMintSubmit.getRecord(client);\n\t\t\tconst supply = tokenMintRec.receipt.totalSupply;\n\n\t\t\tsetTokenSupply(supply);\n\t\t\tconsole.log(`Minted new tokens. Now there are ${supply}`);\n\t\t} catch {\n\t\t\tsetMintTextSt(tokenCreateText());\n\n\t\t\tconsole.log(`Create a token first!`);\n\t\t}\n\t}\n\n\tlet tokenSupplyText;\n\ttokenSupply === undefined\n\t\t? (tokenSupplyText = \"\")\n\t\t: (tokenSupplyText = `Supply of token ID ${tokenId} is ${tokenSupply}`);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<MyButton fcn={tokenCreate} text={\"Create New Token\"} />\n\t\t\t<p>{createTextState}</p>\n\t\t\t{/*  */}\n\t\t\t<MyButton fcn={tokenMint} text={\"Mint New Tokens\"} />\n\t\t\t<p>{tokenSupplyText}</p>\n\t\t</div>\n\t);\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}