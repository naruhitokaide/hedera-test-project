{"ast":null,"code":"import Hbar from \"../Hbar.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"./AccountId.js\";\nimport Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport Long from \"long\";\nimport NullableTokenDecimalMap from \"./NullableTokenDecimalMap.js\";\nimport TokenTransferMap from \"./TokenTransferMap.js\";\nimport HbarTransferMap from \"./HbarTransferMap.js\";\nimport TokenNftTransferMap from \"./TokenNftTransferMap.js\";\nimport * as util from \"../util.js\";\nimport NftId from \"../token/NftId.js\";\n/**\n * @typedef {import(\"../long.js\").LongObject} LongObject\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoTransferTransactionBody} proto.ICryptoTransferTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").IAccountAmount} proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").ITokenTransferList} proto.ITokenTransferList\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} TransferTokensInput\n * @property {TokenId | string} tokenId\n * @property {AccountId | string} accountId\n * @property {Long | number} amount\n */\n\n/**\n * @typedef {object} TransferTokenObject\n * @property {TokenId} tokenId\n * @property {AccountId} accountId\n * @property {Long} amount\n */\n\n/**\n * @typedef {object} TransferHbarInput\n * @property {AccountId | string} accountId\n * @property {number | string | Long | BigNumber | Hbar} amount\n */\n\n/**\n * @typedef {object} TransferNftInput\n * @property {TokenId | string} tokenId\n * @property {AccountId | string} sender\n * @property {AccountId | string} recipient\n * @property {Long | number} serial\n */\n\n/**\n * Transfers a new Hederaâ„¢ crypto-currency token.\n */\n\nexport default class TransferTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {(TransferTokensInput)[]} [props.tokenTransfers]\n   * @param {(TransferHbarInput)[]} [props.hbarTransfers]\n   * @param {(TransferNftInput)[]} [props.nftTransfers]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {TokenTransferMap}\n     */\n\n    this._tokenTransfers = new TokenTransferMap();\n    /**\n     * @private\n     * @type {NullableTokenDecimalMap}\n     */\n\n    this._tokenDecimals = new NullableTokenDecimalMap();\n    /**\n     * @private\n     * @type {HbarTransferMap}\n     */\n\n    this._hbarTransfers = new HbarTransferMap();\n    /**\n     * @private\n     * @type {TokenNftTransferMap}\n     */\n\n    this._nftTransfers = new TokenNftTransferMap();\n    this.setMaxTransactionFee(new Hbar(1));\n\n    for (const transfer of props.tokenTransfers != null ? props.tokenTransfers : []) {\n      this.addTokenTransfer(transfer.tokenId, transfer.accountId, transfer.amount);\n    }\n\n    for (const transfer of props.hbarTransfers != null ? props.hbarTransfers : []) {\n      this.addHbarTransfer(transfer.accountId, transfer.amount);\n    }\n\n    for (const transfer of props.nftTransfers != null ? props.nftTransfers : []) {\n      this.addNftTransfer(transfer.tokenId, transfer.serial, transfer.sender, transfer.recipient);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.ITransaction[]} transactions\n   * @param {proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {proto.ITransactionBody[]} bodies\n   * @returns {TransferTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const cryptoTransfer =\n    /** @type {proto.ICryptoTransferTransactionBody} */\n    body.cryptoTransfer;\n    const transfers = new TransferTransaction();\n\n    for (const list of cryptoTransfer.tokenTransfers != null ? cryptoTransfer.tokenTransfers : []) {\n      const tokenId = TokenId._fromProtobuf(\n      /** @type {proto.ITokenID} */\n      list.token);\n\n      for (const transfer of list.transfers != null ? list.transfers : []) {\n        transfers.addTokenTransfer(tokenId, AccountId._fromProtobuf(\n        /** @type {proto.IAccountID} */\n        transfer.accountID),\n        /** @type {Long} */\n        transfer.amount);\n      }\n\n      for (const transfer of list.nftTransfers != null ? list.nftTransfers : []) {\n        transfers.addNftTransfer(tokenId,\n        /** @type {Long} */\n        transfer.serialNumber, AccountId._fromProtobuf(\n        /** @type {proto.IAccountID} */\n        transfer.senderAccountID), AccountId._fromProtobuf(\n        /** @type {proto.IAccountID} */\n        transfer.receiverAccountID));\n      }\n    }\n\n    const accountAmounts = cryptoTransfer.transfers != null ? cryptoTransfer.transfers.accountAmounts != null ? cryptoTransfer.transfers.accountAmounts : [] : [];\n\n    for (const aa of accountAmounts) {\n      transfers.addHbarTransfer(AccountId._fromProtobuf(\n      /** @type {proto.IAccountID} */\n      aa.accountID), Hbar.fromTinybars(\n      /** @type {Long} */\n      aa.amount));\n    }\n\n    return Transaction._fromProtobufTransactions(transfers, transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {TokenTransferMap}\n   */\n\n\n  get tokenTransfers() {\n    return this._tokenTransfers;\n  }\n  /**\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} accountId\n   * @param {number | Long} amount\n   * @returns {this}\n   */\n\n\n  addTokenTransfer(tokenId, accountId, amount) {\n    this._requireNotFrozen();\n\n    const token = tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n    this._tokenTransfers.__set(token, accountId instanceof AccountId ? accountId : AccountId.fromString(accountId), amount instanceof Long ? amount : Long.fromNumber(amount));\n\n    const currentDecimals = this._tokenDecimals.get(token);\n\n    if (currentDecimals == null) {\n      this._tokenDecimals._set(token, null);\n    }\n\n    return this;\n  }\n  /**\n   * @param {TokenId | string} tokenId\n   * @param {AccountId | string} accountId\n   * @param {number | Long} amount\n   * @param {number} decimals\n   * @returns {this}\n   */\n\n\n  addTokenTransferWithDecimals(tokenId, accountId, amount, decimals) {\n    this._requireNotFrozen();\n\n    const token = tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n    this._tokenTransfers.__set(token, accountId instanceof AccountId ? accountId : AccountId.fromString(accountId), amount instanceof Long ? amount : Long.fromNumber(amount));\n\n    const currentDecimals = this._tokenDecimals.get(token);\n\n    if (currentDecimals != null && currentDecimals != decimals) {\n      throw new Error(\"token ID decimal mismatch\");\n    }\n\n    if (currentDecimals == null) {\n      this._tokenDecimals._set(token, decimals);\n    }\n\n    return this;\n  }\n  /**\n   * @returns {NullableTokenDecimalMap}\n   */\n\n\n  get tokenIdDecimals() {\n    return this._tokenDecimals;\n  }\n  /**\n   * @returns {HbarTransferMap}\n   */\n\n\n  get hbarTransfers() {\n    return this._hbarTransfers;\n  }\n  /**\n   * @internal\n   * @param {AccountId | string} accountId\n   * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n   * @returns {TransferTransaction}\n   */\n\n\n  addHbarTransfer(accountId, amount) {\n    this._requireNotFrozen();\n\n    if (this.hbarTransfers.get(accountId) != null) {\n      amount = this._squashTransfers(accountId, amount);\n    }\n\n    this._hbarTransfers._set(accountId instanceof AccountId ? accountId : AccountId.fromString(accountId), amount instanceof Hbar ? amount : new Hbar(amount));\n\n    return this;\n  }\n  /**\n   * @internal\n   * @param {AccountId | string} accountId\n   * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n   * @returns {Hbar}\n   */\n\n\n  _squashTransfers(accountId, amount) {\n    let currentValue = this.hbarTransfers.get(accountId);\n    return Hbar.fromTinybars((currentValue == null ? Long.ZERO : currentValue.toTinybars()).add(amount instanceof Hbar ? amount.toTinybars() : new Hbar(amount).toTinybars()));\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [a, _] of this._hbarTransfers) {\n      if (a != null) {\n        a.validateChecksum(client);\n      }\n    }\n\n    for (const [tokenId, transfers] of this._tokenTransfers) {\n      if (tokenId != null) {\n        tokenId.validateChecksum(client);\n      } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n      for (const [a, _] of transfers) {\n        if (a != null) {\n          a.validateChecksum(client);\n        }\n      }\n    }\n  }\n  /**\n   * @returns {TokenNftTransferMap}\n   */\n\n\n  get nftTransfers() {\n    return this._nftTransfers;\n  }\n  /**\n   * @internal\n   * @param {NftId | TokenId | string} tokenIdOrNftId\n   * @param {AccountId | string | Long | number} senderAccountIdOrSerialNumber\n   * @param {AccountId | string} recipientAccountIdOrSenderAccountId\n   * @param {(AccountId | string)=} recipient\n   * @returns {TransferTransaction}\n   */\n\n\n  addNftTransfer(tokenIdOrNftId, senderAccountIdOrSerialNumber, recipientAccountIdOrSenderAccountId, recipient) {\n    this._requireNotFrozen();\n\n    let tokenId;\n    let serial;\n    let senderId;\n    let recipientId;\n\n    if (typeof tokenIdOrNftId === \"string\") {\n      if (tokenIdOrNftId.includes(\"/\") || tokenIdOrNftId.includes(\"@\")) {\n        tokenIdOrNftId = NftId.fromString(tokenIdOrNftId);\n      } else {\n        tokenIdOrNftId = TokenId.fromString(tokenIdOrNftId);\n      }\n    }\n\n    if (tokenIdOrNftId instanceof NftId) {\n      tokenId = tokenIdOrNftId.tokenId;\n      serial = tokenIdOrNftId.serial;\n      senderId =\n      /** @type {AccountId | string} */\n      senderAccountIdOrSerialNumber;\n      recipientId =\n      /** @type {AccountId | string} */\n      recipientAccountIdOrSenderAccountId;\n    } else if (tokenIdOrNftId instanceof TokenId) {\n      tokenId =\n      /** @type {TokenId} */\n      tokenIdOrNftId;\n      serial =\n      /** @type {Long|number} */\n      senderAccountIdOrSerialNumber;\n      senderId =\n      /** @type {AccountId | string} */\n      recipientAccountIdOrSenderAccountId;\n      util.requireNonNull(recipient);\n      recipientId =\n      /** @type {AccountId | string} */\n      recipient;\n    } else {\n      throw new Error(\"unintended type for tokenIdOrNftId\");\n    }\n\n    this._nftTransfers.__set(typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId, {\n      serial: typeof serial === \"number\" ? Long.fromNumber(serial) : serial,\n      sender: typeof senderId === \"string\" ? AccountId.fromString(senderId) : senderId,\n      recipient: typeof recipientId === \"string\" ? AccountId.fromString(recipientId) : recipientId\n    });\n\n    return this;\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.ITransaction} request\n   * @returns {Promise<proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.cryptoTransfer(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"cryptoTransfer\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {proto.ICryptoTransferTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    /** @type {Set<string>} */\n    const tokenIds = new Set();\n\n    for (const tokenId of this._tokenTransfers.keys()) {\n      tokenIds.add(tokenId.toString());\n    }\n\n    for (const tokenId of this._nftTransfers.keys()) {\n      tokenIds.add(tokenId.toString());\n    }\n\n    const tokenTransfers = Array.from(tokenIds, tokenId => {\n      const thisTokenTransfers = this._tokenTransfers.get(tokenId);\n\n      const thisNftTransfers = this._nftTransfers.get(tokenId);\n\n      let transfers;\n      let nftTransfers;\n\n      if (thisTokenTransfers != null) {\n        transfers = Array.from(thisTokenTransfers, _ref => {\n          let [accountId, amount] = _ref;\n          return {\n            accountId,\n            amount\n          };\n        });\n        transfers.sort((a, b) => {\n          const accountIdComparison = a.accountId.compare(b.accountId);\n\n          if (accountIdComparison != 0) {\n            return accountIdComparison;\n          }\n\n          return a.amount.compare(b.amount);\n        });\n      }\n\n      if (thisNftTransfers != null) {\n        // eslint-disable-next-line ie11/no-loop-func\n        nftTransfers = thisNftTransfers.map(transfer => {\n          return {\n            sender: transfer.sender,\n            recipient: transfer.recipient,\n            serialNumber: transfer.serial\n          };\n        });\n        nftTransfers.sort((a, b) => {\n          const senderComparision = a.sender.compare(b.sender);\n\n          if (senderComparision != 0) {\n            return senderComparision;\n          }\n\n          const recipientComparision = a.recipient.compare(b.recipient);\n\n          if (recipientComparision != 0) {\n            return recipientComparision;\n          }\n\n          return a.serialNumber.compare(b.serialNumber);\n        });\n      }\n\n      return {\n        token: TokenId.fromString(tokenId),\n        transfers,\n        nftTransfers\n      };\n    });\n    const hbarTransfers = Array.from(this._hbarTransfers, _ref2 => {\n      let [accountId, amount] = _ref2;\n      return {\n        accountId,\n        amount\n      };\n    });\n    tokenTransfers.sort((a, b) => {\n      return a.token.compare(b.token);\n    });\n    hbarTransfers.sort((a, b) => {\n      const accountIdComparison = a.accountId.compare(b.accountId);\n\n      if (accountIdComparison != 0) {\n        return accountIdComparison;\n      }\n\n      return a.amount.toTinybars().compare(b.amount.toTinybars());\n    });\n    return {\n      transfers: {\n        accountAmounts: hbarTransfers.map(transfer => {\n          return {\n            accountID: transfer.accountId._toProtobuf(),\n            amount: transfer.amount.toTinybars()\n          };\n        })\n      },\n      tokenTransfers: tokenTransfers.map(tokenTransfer => {\n        const expectedDecimals = this._tokenDecimals.get(tokenTransfer.token);\n\n        return {\n          token: tokenTransfer.token._toProtobuf(),\n          expectedDecimals: expectedDecimals != null ? {\n            value: expectedDecimals\n          } : null,\n          transfers: (tokenTransfer.transfers != null ? tokenTransfer.transfers : []).map(transfer => {\n            return {\n              accountID: transfer.accountId._toProtobuf(),\n              amount: transfer.amount\n            };\n          }),\n          nftTransfers: (tokenTransfer.nftTransfers != null ? tokenTransfer.nftTransfers : []).map(nftTransfer => {\n            return {\n              senderAccountID: nftTransfer.sender._toProtobuf(),\n              receiverAccountID: nftTransfer.recipient._toProtobuf(),\n              serialNumber: nftTransfer.serialNumber\n            };\n          })\n        };\n      })\n    };\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"cryptoTransfer\", // eslint-disable-next-line @typescript-eslint/unbound-method\nTransferTransaction._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/account/TransferTransaction.js"],"names":["Hbar","TokenId","AccountId","Transaction","TRANSACTION_REGISTRY","Long","NullableTokenDecimalMap","TokenTransferMap","HbarTransferMap","TokenNftTransferMap","util","NftId","TransferTransaction","constructor","props","_tokenTransfers","_tokenDecimals","_hbarTransfers","_nftTransfers","setMaxTransactionFee","transfer","tokenTransfers","addTokenTransfer","tokenId","accountId","amount","hbarTransfers","addHbarTransfer","nftTransfers","addNftTransfer","serial","sender","recipient","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","cryptoTransfer","transfers","list","token","accountID","serialNumber","senderAccountID","receiverAccountID","accountAmounts","aa","fromTinybars","_fromProtobufTransactions","_requireNotFrozen","fromString","__set","fromNumber","currentDecimals","get","_set","addTokenTransferWithDecimals","decimals","Error","tokenIdDecimals","_squashTransfers","currentValue","ZERO","toTinybars","add","_validateChecksums","client","a","_","validateChecksum","tokenIdOrNftId","senderAccountIdOrSerialNumber","recipientAccountIdOrSenderAccountId","senderId","recipientId","includes","requireNonNull","_execute","channel","request","crypto","_getTransactionDataCase","_makeTransactionData","tokenIds","Set","keys","toString","Array","from","thisTokenTransfers","thisNftTransfers","sort","b","accountIdComparison","compare","map","senderComparision","recipientComparision","_toProtobuf","tokenTransfer","expectedDecimals","value","nftTransfer","set"],"mappings":"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","sourcesContent":["import Hbar from \"../Hbar.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"./AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Long from \"long\";\nimport NullableTokenDecimalMap from \"./NullableTokenDecimalMap.js\";\nimport TokenTransferMap from \"./TokenTransferMap.js\";\nimport HbarTransferMap from \"./HbarTransferMap.js\";\nimport TokenNftTransferMap from \"./TokenNftTransferMap.js\";\nimport * as util from \"../util.js\";\nimport NftId from \"../token/NftId.js\";\n\n/**\n * @typedef {import(\"../long.js\").LongObject} LongObject\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoTransferTransactionBody} proto.ICryptoTransferTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").IAccountAmount} proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").ITokenTransferList} proto.ITokenTransferList\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} TransferTokensInput\n * @property {TokenId | string} tokenId\n * @property {AccountId | string} accountId\n * @property {Long | number} amount\n */\n\n/**\n * @typedef {object} TransferTokenObject\n * @property {TokenId} tokenId\n * @property {AccountId} accountId\n * @property {Long} amount\n */\n\n/**\n * @typedef {object} TransferHbarInput\n * @property {AccountId | string} accountId\n * @property {number | string | Long | BigNumber | Hbar} amount\n */\n\n/**\n * @typedef {object} TransferNftInput\n * @property {TokenId | string} tokenId\n * @property {AccountId | string} sender\n * @property {AccountId | string} recipient\n * @property {Long | number} serial\n */\n\n/**\n * Transfers a new Hederaâ„¢ crypto-currency token.\n */\nexport default class TransferTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {(TransferTokensInput)[]} [props.tokenTransfers]\n     * @param {(TransferHbarInput)[]} [props.hbarTransfers]\n     * @param {(TransferNftInput)[]} [props.nftTransfers]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {TokenTransferMap}\n         */\n        this._tokenTransfers = new TokenTransferMap();\n\n        /**\n         * @private\n         * @type {NullableTokenDecimalMap}\n         */\n        this._tokenDecimals = new NullableTokenDecimalMap();\n\n        /**\n         * @private\n         * @type {HbarTransferMap}\n         */\n        this._hbarTransfers = new HbarTransferMap();\n\n        /**\n         * @private\n         * @type {TokenNftTransferMap}\n         */\n        this._nftTransfers = new TokenNftTransferMap();\n\n        this.setMaxTransactionFee(new Hbar(1));\n\n        for (const transfer of props.tokenTransfers != null\n            ? props.tokenTransfers\n            : []) {\n            this.addTokenTransfer(\n                transfer.tokenId,\n                transfer.accountId,\n                transfer.amount\n            );\n        }\n\n        for (const transfer of props.hbarTransfers != null\n            ? props.hbarTransfers\n            : []) {\n            this.addHbarTransfer(transfer.accountId, transfer.amount);\n        }\n\n        for (const transfer of props.nftTransfers != null\n            ? props.nftTransfers\n            : []) {\n            this.addNftTransfer(\n                transfer.tokenId,\n                transfer.serial,\n                transfer.sender,\n                transfer.recipient\n            );\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {TransferTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const cryptoTransfer =\n            /** @type {proto.ICryptoTransferTransactionBody} */ (\n                body.cryptoTransfer\n            );\n\n        const transfers = new TransferTransaction();\n        for (const list of cryptoTransfer.tokenTransfers != null\n            ? cryptoTransfer.tokenTransfers\n            : []) {\n            const tokenId = TokenId._fromProtobuf(\n                /** @type {proto.ITokenID} */ (list.token)\n            );\n\n            for (const transfer of list.transfers != null\n                ? list.transfers\n                : []) {\n                transfers.addTokenTransfer(\n                    tokenId,\n                    AccountId._fromProtobuf(\n                        /** @type {proto.IAccountID} */ (transfer.accountID)\n                    ),\n                    /** @type {Long} */ (transfer.amount)\n                );\n            }\n\n            for (const transfer of list.nftTransfers != null\n                ? list.nftTransfers\n                : []) {\n                transfers.addNftTransfer(\n                    tokenId,\n                    /** @type {Long} */ (transfer.serialNumber),\n                    AccountId._fromProtobuf(\n                        /** @type {proto.IAccountID} */ (\n                            transfer.senderAccountID\n                        )\n                    ),\n                    AccountId._fromProtobuf(\n                        /** @type {proto.IAccountID} */ (\n                            transfer.receiverAccountID\n                        )\n                    )\n                );\n            }\n        }\n\n        const accountAmounts =\n            cryptoTransfer.transfers != null\n                ? cryptoTransfer.transfers.accountAmounts != null\n                    ? cryptoTransfer.transfers.accountAmounts\n                    : []\n                : [];\n\n        for (const aa of accountAmounts) {\n            transfers.addHbarTransfer(\n                AccountId._fromProtobuf(\n                    /** @type {proto.IAccountID} */ (aa.accountID)\n                ),\n                Hbar.fromTinybars(/** @type {Long} */ (aa.amount))\n            );\n        }\n\n        return Transaction._fromProtobufTransactions(\n            transfers,\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {TokenTransferMap}\n     */\n    get tokenTransfers() {\n        return this._tokenTransfers;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} accountId\n     * @param {number | Long} amount\n     * @returns {this}\n     */\n    addTokenTransfer(tokenId, accountId, amount) {\n        this._requireNotFrozen();\n\n        const token =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        this._tokenTransfers.__set(\n            token,\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId),\n            amount instanceof Long ? amount : Long.fromNumber(amount)\n        );\n\n        const currentDecimals = this._tokenDecimals.get(token);\n        if (currentDecimals == null) {\n            this._tokenDecimals._set(token, null);\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} accountId\n     * @param {number | Long} amount\n     * @param {number} decimals\n     * @returns {this}\n     */\n    addTokenTransferWithDecimals(tokenId, accountId, amount, decimals) {\n        this._requireNotFrozen();\n\n        const token =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n\n        this._tokenTransfers.__set(\n            token,\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId),\n            amount instanceof Long ? amount : Long.fromNumber(amount)\n        );\n\n        const currentDecimals = this._tokenDecimals.get(token);\n\n        if (currentDecimals != null && currentDecimals != decimals) {\n            throw new Error(\"token ID decimal mismatch\");\n        }\n\n        if (currentDecimals == null) {\n            this._tokenDecimals._set(token, decimals);\n        }\n\n        return this;\n    }\n\n    /**\n     * @returns {NullableTokenDecimalMap}\n     */\n    get tokenIdDecimals() {\n        return this._tokenDecimals;\n    }\n\n    /**\n     * @returns {HbarTransferMap}\n     */\n    get hbarTransfers() {\n        return this._hbarTransfers;\n    }\n\n    /**\n     * @internal\n     * @param {AccountId | string} accountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {TransferTransaction}\n     */\n    addHbarTransfer(accountId, amount) {\n        this._requireNotFrozen();\n\n        if (this.hbarTransfers.get(accountId) != null) {\n            amount = this._squashTransfers(accountId, amount);\n        }\n\n        this._hbarTransfers._set(\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId),\n            amount instanceof Hbar ? amount : new Hbar(amount)\n        );\n\n        return this;\n    }\n\n    /**\n     * @internal\n     * @param {AccountId | string} accountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {Hbar}\n     */\n    _squashTransfers(accountId, amount) {\n        let currentValue = this.hbarTransfers.get(accountId);\n        return Hbar.fromTinybars(\n            (currentValue == null ? Long.ZERO : currentValue.toTinybars()).add(\n                amount instanceof Hbar\n                    ? amount.toTinybars()\n                    : new Hbar(amount).toTinybars()\n            )\n        );\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const [a, _] of this._hbarTransfers) {\n            if (a != null) {\n                a.validateChecksum(client);\n            }\n        }\n\n        for (const [tokenId, transfers] of this._tokenTransfers) {\n            if (tokenId != null) {\n                tokenId.validateChecksum(client);\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            for (const [a, _] of transfers) {\n                if (a != null) {\n                    a.validateChecksum(client);\n                }\n            }\n        }\n    }\n\n    /**\n     * @returns {TokenNftTransferMap}\n     */\n    get nftTransfers() {\n        return this._nftTransfers;\n    }\n\n    /**\n     * @internal\n     * @param {NftId | TokenId | string} tokenIdOrNftId\n     * @param {AccountId | string | Long | number} senderAccountIdOrSerialNumber\n     * @param {AccountId | string} recipientAccountIdOrSenderAccountId\n     * @param {(AccountId | string)=} recipient\n     * @returns {TransferTransaction}\n     */\n    addNftTransfer(\n        tokenIdOrNftId,\n        senderAccountIdOrSerialNumber,\n        recipientAccountIdOrSenderAccountId,\n        recipient\n    ) {\n        this._requireNotFrozen();\n\n        let tokenId;\n        let serial;\n        let senderId;\n        let recipientId;\n\n        if (typeof tokenIdOrNftId === \"string\") {\n            if (tokenIdOrNftId.includes(\"/\") || tokenIdOrNftId.includes(\"@\")) {\n                tokenIdOrNftId = NftId.fromString(tokenIdOrNftId);\n            } else {\n                tokenIdOrNftId = TokenId.fromString(tokenIdOrNftId);\n            }\n        }\n\n        if (tokenIdOrNftId instanceof NftId) {\n            tokenId = tokenIdOrNftId.tokenId;\n            serial = tokenIdOrNftId.serial;\n            senderId = /** @type {AccountId | string} */ (\n                senderAccountIdOrSerialNumber\n            );\n            recipientId = /** @type {AccountId | string} */ (\n                recipientAccountIdOrSenderAccountId\n            );\n        } else if (tokenIdOrNftId instanceof TokenId) {\n            tokenId = /** @type {TokenId} */ (tokenIdOrNftId);\n            serial = /** @type {Long|number} */ (senderAccountIdOrSerialNumber);\n            senderId = /** @type {AccountId | string} */ (\n                recipientAccountIdOrSenderAccountId\n            );\n            util.requireNonNull(recipient);\n            recipientId = /** @type {AccountId | string} */ (recipient);\n        } else {\n            throw new Error(\"unintended type for tokenIdOrNftId\");\n        }\n\n        this._nftTransfers.__set(\n            typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId,\n            {\n                serial:\n                    typeof serial === \"number\"\n                        ? Long.fromNumber(serial)\n                        : serial,\n                sender:\n                    typeof senderId === \"string\"\n                        ? AccountId.fromString(senderId)\n                        : senderId,\n\n                recipient:\n                    typeof recipientId === \"string\"\n                        ? AccountId.fromString(recipientId)\n                        : recipientId,\n            }\n        );\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.cryptoTransfer(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoTransfer\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ICryptoTransferTransactionBody}\n     */\n    _makeTransactionData() {\n        /** @type {Set<string>} */\n        const tokenIds = new Set();\n\n        for (const tokenId of this._tokenTransfers.keys()) {\n            tokenIds.add(tokenId.toString());\n        }\n\n        for (const tokenId of this._nftTransfers.keys()) {\n            tokenIds.add(tokenId.toString());\n        }\n\n        const tokenTransfers = Array.from(tokenIds, (tokenId) => {\n            const thisTokenTransfers = this._tokenTransfers.get(tokenId);\n            const thisNftTransfers = this._nftTransfers.get(tokenId);\n\n            let transfers;\n            let nftTransfers;\n\n            if (thisTokenTransfers != null) {\n                transfers = Array.from(\n                    thisTokenTransfers,\n                    ([accountId, amount]) => {\n                        return {\n                            accountId,\n                            amount,\n                        };\n                    }\n                );\n\n                transfers.sort((a, b) => {\n                    const accountIdComparison = a.accountId.compare(\n                        b.accountId\n                    );\n                    if (accountIdComparison != 0) {\n                        return accountIdComparison;\n                    }\n\n                    return a.amount.compare(b.amount);\n                });\n            }\n\n            if (thisNftTransfers != null) {\n                // eslint-disable-next-line ie11/no-loop-func\n                nftTransfers = thisNftTransfers.map((transfer) => {\n                    return {\n                        sender: transfer.sender,\n                        recipient: transfer.recipient,\n                        serialNumber: transfer.serial,\n                    };\n                });\n\n                nftTransfers.sort((a, b) => {\n                    const senderComparision = a.sender.compare(b.sender);\n                    if (senderComparision != 0) {\n                        return senderComparision;\n                    }\n\n                    const recipientComparision = a.recipient.compare(\n                        b.recipient\n                    );\n                    if (recipientComparision != 0) {\n                        return recipientComparision;\n                    }\n\n                    return a.serialNumber.compare(b.serialNumber);\n                });\n            }\n\n            return {\n                token: TokenId.fromString(tokenId),\n                transfers,\n                nftTransfers,\n            };\n        });\n\n        const hbarTransfers = Array.from(\n            this._hbarTransfers,\n            ([accountId, amount]) => {\n                return {\n                    accountId,\n                    amount,\n                };\n            }\n        );\n\n        tokenTransfers.sort((a, b) => {\n            return a.token.compare(b.token);\n        });\n\n        hbarTransfers.sort((a, b) => {\n            const accountIdComparison = a.accountId.compare(b.accountId);\n            if (accountIdComparison != 0) {\n                return accountIdComparison;\n            }\n\n            return a.amount.toTinybars().compare(b.amount.toTinybars());\n        });\n\n        return {\n            transfers: {\n                accountAmounts: hbarTransfers.map((transfer) => {\n                    return {\n                        accountID: transfer.accountId._toProtobuf(),\n                        amount: transfer.amount.toTinybars(),\n                    };\n                }),\n            },\n            tokenTransfers: tokenTransfers.map((tokenTransfer) => {\n                const expectedDecimals = this._tokenDecimals.get(\n                    tokenTransfer.token\n                );\n\n                return {\n                    token: tokenTransfer.token._toProtobuf(),\n                    expectedDecimals:\n                        expectedDecimals != null\n                            ? {\n                                  value: expectedDecimals,\n                              }\n                            : null,\n                    transfers: (tokenTransfer.transfers != null\n                        ? tokenTransfer.transfers\n                        : []\n                    ).map((transfer) => {\n                        return {\n                            accountID: transfer.accountId._toProtobuf(),\n                            amount: transfer.amount,\n                        };\n                    }),\n                    nftTransfers: (tokenTransfer.nftTransfers != null\n                        ? tokenTransfer.nftTransfers\n                        : []\n                    ).map((nftTransfer) => {\n                        return {\n                            senderAccountID: nftTransfer.sender._toProtobuf(),\n                            receiverAccountID:\n                                nftTransfer.recipient._toProtobuf(),\n                            serialNumber: nftTransfer.serialNumber,\n                        };\n                    }),\n                };\n            }),\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoTransfer\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TransferTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}