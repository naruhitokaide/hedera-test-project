{"ast":null,"code":"import Key from \"./Key.js\";\nimport BadKeyError from \"./BadKeyError.js\";\nimport Ed25519PublicKey from \"./Ed25519PublicKey.js\";\nimport EcdsaPublicKey from \"./EcdsaPublicKey.js\";\nimport { arrayEqual } from \"./util/array.js\";\nimport * as hex from \"./encoding/hex.js\";\n/**\n * @typedef {import(\"./PrivateKey.js\").Transaction} Transaction\n */\n\n/**\n * An public key on the Hedera™ network.\n */\n\nexport default class PublicKey extends Key {\n  /**\n   * @internal\n   * @hideconstructor\n   * @param {Ed25519PublicKey | EcdsaPublicKey} key\n   */\n  constructor(key) {\n    super();\n    /**\n     * @type {Ed25519PublicKey | EcdsaPublicKey}\n     * @private\n     * @readonly\n     */\n\n    this._key = key;\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  get _type() {\n    return this._key._type;\n  }\n  /**\n   * @param {Uint8Array} data\n   * @returns {PublicKey}\n   */\n\n\n  static fromBytes(data) {\n    try {\n      return new PublicKey(Ed25519PublicKey.fromBytes(data));\n    } catch {// Do nothing\n    }\n\n    try {\n      return new PublicKey(EcdsaPublicKey.fromBytes(data));\n    } catch {// Do nothing\n    }\n\n    throw new BadKeyError(`invalid public key length: ${data.length} bytes`);\n  }\n  /**\n   * @param {Uint8Array} data\n   * @returns {PublicKey}\n   */\n\n\n  static fromBytesED25519(data) {\n    return new PublicKey(Ed25519PublicKey.fromBytes(data));\n  }\n  /**\n   * @param {Uint8Array} data\n   * @returns {PublicKey}\n   */\n\n\n  static fromBytesECDSA(data) {\n    return new PublicKey(EcdsaPublicKey.fromBytes(data));\n  }\n  /**\n   * Parse a public key from a string of hexadecimal digits.\n   *\n   * The public key may optionally be prefixed with\n   * the DER header.\n   *\n   * @param {string} text\n   * @returns {PublicKey}\n   */\n\n\n  static fromString(text) {\n    return PublicKey.fromBytes(hex.decode(text));\n  }\n  /**\n   * @param {string} text\n   * @returns {PublicKey}\n   */\n\n\n  static fromStringED25519(text) {\n    return PublicKey.fromBytesED25519(hex.decode(text));\n  }\n  /**\n   * @param {string} text\n   * @returns {PublicKey}\n   */\n\n\n  static fromStringECDSA(text) {\n    return PublicKey.fromBytesECDSA(hex.decode(text));\n  }\n  /**\n   * Verify a signature on a message with this public key.\n   *\n   * @param {Uint8Array} message\n   * @param {Uint8Array} signature\n   * @returns {boolean}\n   */\n\n\n  verify(message, signature) {\n    return this._key.verify(message, signature);\n  }\n  /**\n   * @deprecated - use `@hashgraph/sdk`.PublicKey instead\n   * @param {Transaction} transaction\n   * @returns {boolean}\n   */\n\n\n  verifyTransaction(transaction) {\n    console.log(\"Deprecated: use `@hashgraph/sdk`.PublicKey instead\");\n\n    transaction._requireFrozen();\n\n    if (!transaction.isFrozen()) {\n      transaction.freeze();\n    }\n\n    for (const signedTransaction of transaction._signedTransactions) {\n      if (signedTransaction.sigMap != null && signedTransaction.sigMap.sigPair != null) {\n        let found = false;\n\n        for (const sigPair of signedTransaction.sigMap.sigPair) {\n          const pubKeyPrefix =\n          /** @type {Uint8Array} */\n          sigPair.pubKeyPrefix;\n\n          if (arrayEqual(pubKeyPrefix, this.toBytesRaw())) {\n            found = true;\n            const bodyBytes =\n            /** @type {Uint8Array} */\n            signedTransaction.bodyBytes;\n            const signature = sigPair.ed25519 != null ? sigPair.ed25519 :\n            /** @type {Uint8Array} */\n            sigPair.ECDSASecp256k1;\n\n            if (!this.verify(bodyBytes, signature)) {\n              return false;\n            }\n          }\n        }\n\n        if (!found) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytes() {\n    if (this._key instanceof Ed25519PublicKey) {\n      return this.toBytesRaw();\n    } else {\n      return this.toBytesDer();\n    }\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytesDer() {\n    return this._key.toBytesDer();\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  toBytesRaw() {\n    return this._key.toBytesRaw();\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return this.toStringDer();\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toStringDer() {\n    return hex.encode(this.toBytesDer());\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toStringRaw() {\n    return hex.encode(this.toBytesRaw());\n  }\n  /**\n   * @param {PublicKey} other\n   * @returns {boolean}\n   */\n\n\n  equals(other) {\n    if (this._key instanceof Ed25519PublicKey && other instanceof Ed25519PublicKey) {\n      return this._key.equals(other);\n    } else if (this._key instanceof EcdsaPublicKey && other instanceof EcdsaPublicKey) {\n      return this._key.equals(other);\n    } else {\n      return false;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/cryptography/src/PublicKey.js"],"names":["Key","BadKeyError","Ed25519PublicKey","EcdsaPublicKey","arrayEqual","hex","PublicKey","constructor","key","_key","_type","fromBytes","data","length","fromBytesED25519","fromBytesECDSA","fromString","text","decode","fromStringED25519","fromStringECDSA","verify","message","signature","verifyTransaction","transaction","console","log","_requireFrozen","isFrozen","freeze","signedTransaction","_signedTransactions","sigMap","sigPair","found","pubKeyPrefix","toBytesRaw","bodyBytes","ed25519","ECDSASecp256k1","toBytes","toBytesDer","toString","toStringDer","encode","toStringRaw","equals","other"],"mappings":"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","sourcesContent":["import Key from \"./Key.js\";\nimport BadKeyError from \"./BadKeyError.js\";\nimport Ed25519PublicKey from \"./Ed25519PublicKey.js\";\nimport EcdsaPublicKey from \"./EcdsaPublicKey.js\";\nimport { arrayEqual } from \"./util/array.js\";\nimport * as hex from \"./encoding/hex.js\";\n\n/**\n * @typedef {import(\"./PrivateKey.js\").Transaction} Transaction\n */\n\n/**\n * An public key on the Hedera™ network.\n */\nexport default class PublicKey extends Key {\n    /**\n     * @internal\n     * @hideconstructor\n     * @param {Ed25519PublicKey | EcdsaPublicKey} key\n     */\n    constructor(key) {\n        super();\n\n        /**\n         * @type {Ed25519PublicKey | EcdsaPublicKey}\n         * @private\n         * @readonly\n         */\n        this._key = key;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get _type() {\n        return this._key._type;\n    }\n\n    /**\n     * @param {Uint8Array} data\n     * @returns {PublicKey}\n     */\n    static fromBytes(data) {\n        try {\n            return new PublicKey(Ed25519PublicKey.fromBytes(data));\n        } catch {\n            // Do nothing\n        }\n\n        try {\n            return new PublicKey(EcdsaPublicKey.fromBytes(data));\n        } catch {\n            // Do nothing\n        }\n\n        throw new BadKeyError(\n            `invalid public key length: ${data.length} bytes`\n        );\n    }\n\n    /**\n     * @param {Uint8Array} data\n     * @returns {PublicKey}\n     */\n    static fromBytesED25519(data) {\n        return new PublicKey(Ed25519PublicKey.fromBytes(data));\n    }\n\n    /**\n     * @param {Uint8Array} data\n     * @returns {PublicKey}\n     */\n    static fromBytesECDSA(data) {\n        return new PublicKey(EcdsaPublicKey.fromBytes(data));\n    }\n\n    /**\n     * Parse a public key from a string of hexadecimal digits.\n     *\n     * The public key may optionally be prefixed with\n     * the DER header.\n     *\n     * @param {string} text\n     * @returns {PublicKey}\n     */\n    static fromString(text) {\n        return PublicKey.fromBytes(hex.decode(text));\n    }\n\n    /**\n     * @param {string} text\n     * @returns {PublicKey}\n     */\n    static fromStringED25519(text) {\n        return PublicKey.fromBytesED25519(hex.decode(text));\n    }\n\n    /**\n     * @param {string} text\n     * @returns {PublicKey}\n     */\n    static fromStringECDSA(text) {\n        return PublicKey.fromBytesECDSA(hex.decode(text));\n    }\n\n    /**\n     * Verify a signature on a message with this public key.\n     *\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {boolean}\n     */\n    verify(message, signature) {\n        return this._key.verify(message, signature);\n    }\n\n    /**\n     * @deprecated - use `@hashgraph/sdk`.PublicKey instead\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    verifyTransaction(transaction) {\n        console.log(\"Deprecated: use `@hashgraph/sdk`.PublicKey instead\");\n\n        transaction._requireFrozen();\n\n        if (!transaction.isFrozen()) {\n            transaction.freeze();\n        }\n\n        for (const signedTransaction of transaction._signedTransactions) {\n            if (\n                signedTransaction.sigMap != null &&\n                signedTransaction.sigMap.sigPair != null\n            ) {\n                let found = false;\n                for (const sigPair of signedTransaction.sigMap.sigPair) {\n                    const pubKeyPrefix = /** @type {Uint8Array} */ (\n                        sigPair.pubKeyPrefix\n                    );\n                    if (arrayEqual(pubKeyPrefix, this.toBytesRaw())) {\n                        found = true;\n                        const bodyBytes = /** @type {Uint8Array} */ (\n                            signedTransaction.bodyBytes\n                        );\n                        const signature =\n                            sigPair.ed25519 != null\n                                ? sigPair.ed25519\n                                : /** @type {Uint8Array} */ (\n                                      sigPair.ECDSASecp256k1\n                                  );\n                        if (!this.verify(bodyBytes, signature)) {\n                            return false;\n                        }\n                    }\n                }\n\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        if (this._key instanceof Ed25519PublicKey) {\n            return this.toBytesRaw();\n        } else {\n            return this.toBytesDer();\n        }\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytesDer() {\n        return this._key.toBytesDer();\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytesRaw() {\n        return this._key.toBytesRaw();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return this.toStringDer();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toStringDer() {\n        return hex.encode(this.toBytesDer());\n    }\n\n    /**\n     * @returns {string}\n     */\n    toStringRaw() {\n        return hex.encode(this.toBytesRaw());\n    }\n\n    /**\n     * @param {PublicKey} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        if (\n            this._key instanceof Ed25519PublicKey &&\n            other instanceof Ed25519PublicKey\n        ) {\n            return this._key.equals(other);\n        } else if (\n            this._key instanceof EcdsaPublicKey &&\n            other instanceof EcdsaPublicKey\n        ) {\n            return this._key.equals(other);\n        } else {\n            return false;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}