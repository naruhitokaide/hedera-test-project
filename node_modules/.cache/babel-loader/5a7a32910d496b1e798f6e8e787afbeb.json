{"ast":null,"code":"var _jsxFileName = \"C:\\\\Work\\\\coding-sandbox\\\\react-again\\\\dapp-days\\\\src\\\\components\\\\CreateButton.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction } from \"@hashgraph/sdk\";\nimport operator from \"../config.js\"; //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function tokenCreate() {\n  _s();\n\n  const [token, setToken] = useState(\"\");\n  console.log(\"- Creating token\");\n  const operatorId = AccountId.fromString(operator.id);\n  const operatorKey = PrivateKey.fromString(operator.pvkey);\n  const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n  const tokenCreateTx = new TokenCreateTransaction().setTokenName(\"dAppDayToken\").setTokenSymbol(\"DDT\").setTreasuryAccountId(operatorId).setInitialSupply(100).setDecimals(0).freezeWith(client);\n  const tokenCreateSign = await tokenCreateTx.sign(operatorKey);\n  const tokenCreateSubmit = await tokenCreateSign.execute(client);\n  const tokenCreateRec = await tokenCreateSubmit.getRecord(client);\n  const tokenId = tokenCreateRec.receipt.tokenId;\n  console.log(`- Token ID: ${tokenId}`);\n  return tokenId;\n}\n\n_s(tokenCreate, \"C3x6IM/dtuvVeI3WyBYezJO1bgU=\");\n\nfunction CreateButton() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: tokenCreate,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Create Tokens\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }, this);\n}\n\n_c = CreateButton;\nexport default CreateButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateButton\");","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/src/components/CreateButton.jsx"],"names":["React","useState","Client","AccountId","PrivateKey","TokenCreateTransaction","operator","tokenCreate","token","setToken","console","log","operatorId","fromString","id","operatorKey","pvkey","client","forTestnet","setOperator","tokenCreateTx","setTokenName","setTokenSymbol","setTreasuryAccountId","setInitialSupply","setDecimals","freezeWith","tokenCreateSign","sign","tokenCreateSubmit","execute","tokenCreateRec","getRecord","tokenId","receipt","CreateButton"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,EAAwCC,sBAAxC,QAAsE,gBAAtE;AACA,OAAOC,QAAP,MAAqB,cAArB,C,CACA;;;;AAEA,eAAeC,WAAf,GAA6B;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,QAAMC,UAAU,GAAGT,SAAS,CAACU,UAAV,CAAqBP,QAAQ,CAACQ,EAA9B,CAAnB;AACA,QAAMC,WAAW,GAAGX,UAAU,CAACS,UAAX,CAAsBP,QAAQ,CAACU,KAA/B,CAApB;AACA,QAAMC,MAAM,GAAGf,MAAM,CAACgB,UAAP,GAAoBC,WAApB,CAAgCP,UAAhC,EAA4CG,WAA5C,CAAf;AAEA,QAAMK,aAAa,GAAG,IAAIf,sBAAJ,GACpBgB,YADoB,CACP,cADO,EAEpBC,cAFoB,CAEL,KAFK,EAGpBC,oBAHoB,CAGCX,UAHD,EAIpBY,gBAJoB,CAIH,GAJG,EAKpBC,WALoB,CAKR,CALQ,EAMpBC,UANoB,CAMTT,MANS,CAAtB;AAOA,QAAMU,eAAe,GAAG,MAAMP,aAAa,CAACQ,IAAd,CAAmBb,WAAnB,CAA9B;AACA,QAAMc,iBAAiB,GAAG,MAAMF,eAAe,CAACG,OAAhB,CAAwBb,MAAxB,CAAhC;AACA,QAAMc,cAAc,GAAG,MAAMF,iBAAiB,CAACG,SAAlB,CAA4Bf,MAA5B,CAA7B;AACA,QAAMgB,OAAO,GAAGF,cAAc,CAACG,OAAf,CAAuBD,OAAvC;AAEAvB,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAcsB,OAAQ,EAAnC;AACA,SAAOA,OAAP;AACA;;GAvBc1B,W;;AAyBf,SAAS4B,YAAT,GAAwB;AACvB,sBACC;AAAA,2BACC;AAAQ,MAAA,OAAO,EAAE5B,WAAjB;AAA8B,MAAA,SAAS,EAAC,kCAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAOA;;KARQ4B,Y;AAST,eAAeA,YAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Client, AccountId, PrivateKey, TokenCreateTransaction } from \"@hashgraph/sdk\";\r\nimport operator from \"../config.js\";\r\n//\r\n\r\nasync function tokenCreate() {\r\n\tconst [token, setToken] = useState(\"\");\r\n\r\n\tconsole.log(\"- Creating token\");\r\n\r\n\tconst operatorId = AccountId.fromString(operator.id);\r\n\tconst operatorKey = PrivateKey.fromString(operator.pvkey);\r\n\tconst client = Client.forTestnet().setOperator(operatorId, operatorKey);\r\n\r\n\tconst tokenCreateTx = new TokenCreateTransaction()\r\n\t\t.setTokenName(\"dAppDayToken\")\r\n\t\t.setTokenSymbol(\"DDT\")\r\n\t\t.setTreasuryAccountId(operatorId)\r\n\t\t.setInitialSupply(100)\r\n\t\t.setDecimals(0)\r\n\t\t.freezeWith(client);\r\n\tconst tokenCreateSign = await tokenCreateTx.sign(operatorKey);\r\n\tconst tokenCreateSubmit = await tokenCreateSign.execute(client);\r\n\tconst tokenCreateRec = await tokenCreateSubmit.getRecord(client);\r\n\tconst tokenId = tokenCreateRec.receipt.tokenId;\r\n\r\n\tconsole.log(`- Token ID: ${tokenId}`);\r\n\treturn tokenId;\r\n}\r\n\r\nfunction CreateButton() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button onClick={tokenCreate} className=\"cta-button connect-wallet-button\">\r\n\t\t\t\tCreate Tokens\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default CreateButton;\r\n"]},"metadata":{},"sourceType":"module"}