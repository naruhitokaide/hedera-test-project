{"ast":null,"code":"import Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport TokenBalanceMap from \"./TokenBalanceMap.js\";\nimport TokenDecimalMap from \"./TokenDecimalMap.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountBalanceResponse} proto.ICryptoGetAccountBalanceResponse\n * @typedef {import(\"@hashgraph/proto\").IKey} proto.IKey\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").ITokenBalance} proto.ITokenBalance\n */\n\n/**\n * @typedef {object} TokenBalanceJson\n * @property {string} tokenId\n * @property {string} balance\n * @property {number} decimals\n */\n\n/**\n * @typedef {object} AccountBalanceJson\n * @property {string} hbars\n * @property {TokenBalanceJson[]} tokens\n */\n\nexport default class AccountBalance {\n  /**\n   * @private\n   * @param {object} props\n   * @param {Hbar} props.hbars\n   * @param {?TokenBalanceMap} props.tokens\n   * @param {?TokenDecimalMap} props.tokenDecimals\n   */\n  constructor(props) {\n    /**\n     * The account ID for which this balancermation applies.\n     *\n     * @readonly\n     */\n    this.hbars = props.hbars;\n    /** @readonly */\n\n    this.tokens = props.tokens;\n    /** @readonly */\n\n    this.tokenDecimals = props.tokenDecimals;\n    Object.freeze(this);\n  }\n  /**\n   * @internal\n   * @param {proto.ICryptoGetAccountBalanceResponse} accountBalance\n   * @returns {AccountBalance}\n   */\n\n\n  static _fromProtobuf(accountBalance) {\n    const tokenBalances = new TokenBalanceMap();\n    const tokenDecimals = new TokenDecimalMap();\n\n    if (accountBalance.tokenBalances != null) {\n      for (const balance of accountBalance.tokenBalances) {\n        const tokenId = TokenId._fromProtobuf(\n        /** @type {proto.ITokenID} */\n        balance.tokenId);\n\n        tokenDecimals._set(tokenId, balance.decimals != null ? balance.decimals : 0);\n\n        tokenBalances._set(tokenId, Long.fromValue(\n        /** @type {Long} */\n        balance.balance));\n      }\n    }\n\n    return new AccountBalance({\n      hbars: Hbar.fromTinybars(\n      /** @type {Long} */\n      accountBalance.balance),\n      tokens: tokenBalances,\n      tokenDecimals\n    });\n  }\n  /**\n   * @returns {proto.ICryptoGetAccountBalanceResponse}\n   */\n\n\n  _toProtobuf() {\n    /** @type {proto.ITokenBalance[]} */\n    const list = [];\n\n    for (const [key, value] of this.tokens != null ? this.tokens : []) {\n      list.push({\n        tokenId: key._toProtobuf(),\n        balance: value,\n        decimals: this.tokenDecimals != null ? this.tokenDecimals.get(key) : null\n      });\n    }\n\n    return {\n      balance: this.hbars.toTinybars(),\n      tokenBalances: list\n    };\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @returns {AccountBalanceJson}\n   */\n\n\n  toJSON() {\n    const tokens = [];\n\n    for (const [key, value] of this.tokens != null ? this.tokens : []) {\n      const decimals = this.tokenDecimals != null ? this.tokenDecimals.get(key) : null;\n      tokens.push({\n        tokenId: key.toString(),\n        balance: value.toString(),\n        decimals: decimals != null ? decimals : 0\n      });\n    }\n\n    return {\n      hbars: this.hbars.toString(),\n      tokens\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/account/AccountBalance.js"],"names":["Long","Hbar","TokenId","TokenBalanceMap","TokenDecimalMap","AccountBalance","constructor","props","hbars","tokens","tokenDecimals","Object","freeze","_fromProtobuf","accountBalance","tokenBalances","balance","tokenId","_set","decimals","fromValue","fromTinybars","_toProtobuf","list","key","value","push","get","toTinybars","toString","JSON","stringify","toJSON"],"mappings":"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","sourcesContent":["import Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport TokenBalanceMap from \"./TokenBalanceMap.js\";\nimport TokenDecimalMap from \"./TokenDecimalMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITimestamp} proto.ITimestamp\n * @typedef {import(\"@hashgraph/proto\").IAccountID} proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetAccountBalanceResponse} proto.ICryptoGetAccountBalanceResponse\n * @typedef {import(\"@hashgraph/proto\").IKey} proto.IKey\n * @typedef {import(\"@hashgraph/proto\").ITokenID} proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").ITokenBalance} proto.ITokenBalance\n */\n\n/**\n * @typedef {object} TokenBalanceJson\n * @property {string} tokenId\n * @property {string} balance\n * @property {number} decimals\n */\n\n/**\n * @typedef {object} AccountBalanceJson\n * @property {string} hbars\n * @property {TokenBalanceJson[]} tokens\n */\n\nexport default class AccountBalance {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Hbar} props.hbars\n     * @param {?TokenBalanceMap} props.tokens\n     * @param {?TokenDecimalMap} props.tokenDecimals\n     */\n    constructor(props) {\n        /**\n         * The account ID for which this balancermation applies.\n         *\n         * @readonly\n         */\n        this.hbars = props.hbars;\n\n        /** @readonly */\n        this.tokens = props.tokens;\n\n        /** @readonly */\n        this.tokenDecimals = props.tokenDecimals;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {proto.ICryptoGetAccountBalanceResponse} accountBalance\n     * @returns {AccountBalance}\n     */\n    static _fromProtobuf(accountBalance) {\n        const tokenBalances = new TokenBalanceMap();\n        const tokenDecimals = new TokenDecimalMap();\n\n        if (accountBalance.tokenBalances != null) {\n            for (const balance of accountBalance.tokenBalances) {\n                const tokenId = TokenId._fromProtobuf(\n                    /** @type {proto.ITokenID} */ (balance.tokenId)\n                );\n\n                tokenDecimals._set(\n                    tokenId,\n                    balance.decimals != null ? balance.decimals : 0\n                );\n                tokenBalances._set(\n                    tokenId,\n                    Long.fromValue(/** @type {Long} */ (balance.balance))\n                );\n            }\n        }\n\n        return new AccountBalance({\n            hbars: Hbar.fromTinybars(\n                /** @type {Long} */ (accountBalance.balance)\n            ),\n            tokens: tokenBalances,\n            tokenDecimals,\n        });\n    }\n\n    /**\n     * @returns {proto.ICryptoGetAccountBalanceResponse}\n     */\n    _toProtobuf() {\n        /** @type {proto.ITokenBalance[]} */\n        const list = [];\n\n        for (const [key, value] of this.tokens != null ? this.tokens : []) {\n            list.push({\n                tokenId: key._toProtobuf(),\n                balance: value,\n                decimals:\n                    this.tokenDecimals != null\n                        ? this.tokenDecimals.get(key)\n                        : null,\n            });\n        }\n\n        return {\n            balance: this.hbars.toTinybars(),\n            tokenBalances: list,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * @returns {AccountBalanceJson}\n     */\n    toJSON() {\n        const tokens = [];\n        for (const [key, value] of this.tokens != null ? this.tokens : []) {\n            const decimals =\n                this.tokenDecimals != null ? this.tokenDecimals.get(key) : null;\n\n            tokens.push({\n                tokenId: key.toString(),\n                balance: value.toString(),\n                decimals: decimals != null ? decimals : 0,\n            });\n        }\n\n        return {\n            hbars: this.hbars.toString(),\n            tokens,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}