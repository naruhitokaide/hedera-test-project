{"ast":null,"code":"import Client from \"./Client.js\";\nimport WebChannel from \"../channel/WebChannel.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport LedgerId from \"../LedgerId.js\";\n/**\n * @typedef {import(\"./Client.js\").ClientConfiguration} ClientConfiguration\n */\n\nexport const Network = {\n  /**\n   * @param {string} name\n   * @returns {{[key: string]: (string | AccountId)}}\n   */\n  fromName(name) {\n    switch (name) {\n      case \"mainnet\":\n        return Network.MAINNET;\n\n      case \"testnet\":\n        return Network.TESTNET;\n\n      case \"previewnet\":\n        return Network.PREVIEWNET;\n\n      default:\n        throw new Error(`unknown network name: ${name}`);\n    }\n  },\n\n  MAINNET: {\n    \"https://grpc-web.myhbarwallet.com:443\": new AccountId(3)\n  },\n  TESTNET: {\n    \"https://grpc-web.testnet.myhbarwallet.com:443\": new AccountId(3)\n  },\n  PREVIEWNET: {\n    \"https://grpc-web.previewnet.myhbarwallet.com:443\": new AccountId(3)\n  }\n};\n/**\n * @augments {Client<WebChannel, *>}\n */\n\nexport default class WebClient extends Client {\n  /**\n   * @param {ClientConfiguration} [props]\n   */\n  constructor(props) {\n    super(props);\n\n    if (props != null) {\n      if (typeof props.network === \"string\") {\n        switch (props.network) {\n          case \"mainnet\":\n            this.setNetwork(Network.MAINNET);\n            this.setLedgerId(LedgerId.MAINNET);\n            break;\n\n          case \"testnet\":\n            this.setNetwork(Network.TESTNET);\n            this.setLedgerId(LedgerId.TESTNET);\n            break;\n\n          case \"previewnet\":\n            this.setNetwork(Network.PREVIEWNET);\n            this.setLedgerId(LedgerId.PREVIEWNET);\n            break;\n\n          default:\n            throw new Error( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `unknown network: ${props.network}`);\n        }\n      } else if (props.network != null) {\n        this.setNetwork(props.network);\n      }\n    }\n  }\n  /**\n   * @param {string | ClientConfiguration} data\n   * @returns {WebClient}\n   */\n\n\n  static fromConfig(data) {\n    return new WebClient(typeof data === \"string\" ?\n    /** @type {ClientConfiguration | undefined} */\n    JSON.parse(data) : data);\n  }\n  /**\n   * Construct a client for a specific network.\n   *\n   * It is the responsibility of the caller to ensure that all nodes in the map are part of the\n   * same Hedera network. Failure to do so will result in undefined behavior.\n   *\n   * The client will load balance all requests to Hedera using a simple round-robin scheme to\n   * chose nodes to send transactions to. For one transaction, at most 1/3 of the nodes will be\n   * tried.\n   *\n   * @param {{[key: string]: (string | AccountId)} | string} network\n   * @returns {WebClient}\n   */\n\n\n  static forNetwork(network) {\n    return new WebClient({\n      network\n    });\n  }\n  /**\n   * @param {string} network\n   * @returns {WebClient}\n   */\n\n\n  static forName(network) {\n    return new WebClient({\n      network\n    });\n  }\n  /**\n   * Construct a Hedera client pre-configured for Mainnet access.\n   *\n   * @returns {WebClient}\n   */\n\n\n  static forMainnet() {\n    return new WebClient({\n      network: \"mainnet\"\n    });\n  }\n  /**\n   * Construct a Hedera client pre-configured for Testnet access.\n   *\n   * @returns {WebClient}\n   */\n\n\n  static forTestnet() {\n    return new WebClient({\n      network: \"testnet\"\n    });\n  }\n  /**\n   * Construct a Hedera client pre-configured for Previewnet access.\n   *\n   * @returns {WebClient}\n   */\n\n\n  static forPreviewnet() {\n    return new WebClient({\n      network: \"previewnet\"\n    });\n  }\n  /**\n   * @param {{[key: string]: (string | AccountId)} | string} network\n   * @returns {void}\n   */\n\n\n  setNetwork(network) {\n    if (typeof network === \"string\") {\n      switch (network) {\n        case \"previewnet\":\n          this._network.setNetwork(Network.PREVIEWNET);\n\n          break;\n\n        case \"testnet\":\n          this._network.setNetwork(Network.TESTNET);\n\n          break;\n\n        case \"mainnet\":\n          this._network.setNetwork(Network.MAINNET);\n\n      }\n    } else {\n      this._network.setNetwork(network);\n    }\n  }\n  /**\n   * @param {string[] | string} mirrorNetwork\n   * @returns {this}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  setMirrorNetwork(mirrorNetwork) {\n    if (typeof mirrorNetwork === \"string\") {\n      this._mirrorNetwork.setNetwork([]);\n    } else {\n      this._mirrorNetwork.setNetwork(mirrorNetwork);\n    }\n\n    return this;\n  }\n  /**\n   * @override\n   * @returns {(address: string) => WebChannel}\n   */\n\n\n  _createNetworkChannel() {\n    return address => new WebChannel(address);\n  }\n  /**\n   * @override\n   * @returns {(address: string) => *}\n   */\n\n\n  _createMirrorNetworkChannel() {\n    return () => {\n      throw new Error(\"mirror support is not supported in browsers\");\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/client/WebClient.js"],"names":["Client","WebChannel","AccountId","LedgerId","Network","fromName","name","MAINNET","TESTNET","PREVIEWNET","Error","WebClient","constructor","props","network","setNetwork","setLedgerId","fromConfig","data","JSON","parse","forNetwork","forName","forMainnet","forTestnet","forPreviewnet","_network","setMirrorNetwork","mirrorNetwork","_mirrorNetwork","_createNetworkChannel","address","_createMirrorNetworkChannel"],"mappings":"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","sourcesContent":["import Client from \"./Client.js\";\nimport WebChannel from \"../channel/WebChannel.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * @typedef {import(\"./Client.js\").ClientConfiguration} ClientConfiguration\n */\n\nexport const Network = {\n    /**\n     * @param {string} name\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    fromName(name) {\n        switch (name) {\n            case \"mainnet\":\n                return Network.MAINNET;\n\n            case \"testnet\":\n                return Network.TESTNET;\n\n            case \"previewnet\":\n                return Network.PREVIEWNET;\n\n            default:\n                throw new Error(`unknown network name: ${name}`);\n        }\n    },\n\n    MAINNET: {\n        \"https://grpc-web.myhbarwallet.com:443\": new AccountId(3),\n    },\n\n    TESTNET: {\n        \"https://grpc-web.testnet.myhbarwallet.com:443\": new AccountId(3),\n    },\n\n    PREVIEWNET: {\n        \"https://grpc-web.previewnet.myhbarwallet.com:443\": new AccountId(3),\n    },\n};\n\n/**\n * @augments {Client<WebChannel, *>}\n */\nexport default class WebClient extends Client {\n    /**\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        super(props);\n\n        if (props != null) {\n            if (typeof props.network === \"string\") {\n                switch (props.network) {\n                    case \"mainnet\":\n                        this.setNetwork(Network.MAINNET);\n                        this.setLedgerId(LedgerId.MAINNET);\n                        break;\n\n                    case \"testnet\":\n                        this.setNetwork(Network.TESTNET);\n                        this.setLedgerId(LedgerId.TESTNET);\n                        break;\n\n                    case \"previewnet\":\n                        this.setNetwork(Network.PREVIEWNET);\n                        this.setLedgerId(LedgerId.PREVIEWNET);\n                        break;\n\n                    default:\n                        throw new Error(\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            `unknown network: ${props.network}`\n                        );\n                }\n            } else if (props.network != null) {\n                this.setNetwork(props.network);\n            }\n        }\n    }\n\n    /**\n     * @param {string | ClientConfiguration} data\n     * @returns {WebClient}\n     */\n    static fromConfig(data) {\n        return new WebClient(\n            typeof data === \"string\"\n                ? /** @type {ClientConfiguration | undefined} */ (\n                      JSON.parse(data)\n                  )\n                : data\n        );\n    }\n\n    /**\n     * Construct a client for a specific network.\n     *\n     * It is the responsibility of the caller to ensure that all nodes in the map are part of the\n     * same Hedera network. Failure to do so will result in undefined behavior.\n     *\n     * The client will load balance all requests to Hedera using a simple round-robin scheme to\n     * chose nodes to send transactions to. For one transaction, at most 1/3 of the nodes will be\n     * tried.\n     *\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {WebClient}\n     */\n    static forNetwork(network) {\n        return new WebClient({ network });\n    }\n\n    /**\n     * @param {string} network\n     * @returns {WebClient}\n     */\n    static forName(network) {\n        return new WebClient({ network });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Mainnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forMainnet() {\n        return new WebClient({ network: \"mainnet\" });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Testnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forTestnet() {\n        return new WebClient({ network: \"testnet\" });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Previewnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forPreviewnet() {\n        return new WebClient({ network: \"previewnet\" });\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {void}\n     */\n    setNetwork(network) {\n        if (typeof network === \"string\") {\n            switch (network) {\n                case \"previewnet\":\n                    this._network.setNetwork(Network.PREVIEWNET);\n                    break;\n                case \"testnet\":\n                    this._network.setNetwork(Network.TESTNET);\n                    break;\n                case \"mainnet\":\n                    this._network.setNetwork(Network.MAINNET);\n            }\n        } else {\n            this._network.setNetwork(network);\n        }\n    }\n\n    /**\n     * @param {string[] | string} mirrorNetwork\n     * @returns {this}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMirrorNetwork(mirrorNetwork) {\n        if (typeof mirrorNetwork === \"string\") {\n            this._mirrorNetwork.setNetwork([]);\n        } else {\n            this._mirrorNetwork.setNetwork(mirrorNetwork);\n        }\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => WebChannel}\n     */\n    _createNetworkChannel() {\n        return (address) => new WebChannel(address);\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => *}\n     */\n    _createMirrorNetworkChannel() {\n        return () => {\n            throw new Error(\"mirror support is not supported in browsers\");\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}