{"ast":null,"code":"import Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport FileId from \"../file/FileId.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport FreezeType from \"../FreezeType.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IFreezeTransactionBody} proto.IFreezeTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} HourMinute\n * @property {number} hour\n * @property {number} minute\n */\n\nexport default class FreezeTransaction extends Transaction {\n  /**\n   * @param {Object} [props]\n   * @param {HourMinute} [props.startTime]\n   * @param {HourMinute} [props.endTime]\n   * @param {Timestamp} [props.startTimestamp]\n   * @param {FileId} [props.updateFileId]\n   * @param {FileId} [props.fileId]\n   * @param {Uint8Array | string} [props.fileHash]\n   * @param { FreezeType } [props.freezeType]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?HourMinute}\n     */\n\n    this._startTime = null;\n    /**\n     * @private\n     * @type {?Timestamp}\n     */\n\n    this._startTimestamp = null;\n    /**\n     * @private\n     * @type {?HourMinute}\n     */\n\n    this._endTime = null;\n    /**\n     * @private\n     * @type {?FileId}\n     */\n\n    this._fileId = null;\n    /**\n     * @private\n     * @type {?Uint8Array}\n     */\n\n    this._fileHash = null;\n    /**\n     * @private\n     * @type {?FreezeType}\n     */\n\n    this._freezeType = null;\n\n    if (props.startTime != null) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.setStartTime(props.startTime.hour, props.startTime.minute);\n    }\n\n    if (props.endTime != null) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.setEndTime(props.endTime.hour, props.endTime.minute);\n    }\n\n    if (props.startTimestamp != null) {\n      this.setStartTimestamp(props.startTimestamp);\n    }\n\n    if (props.updateFileId != null) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.setUpdateFileId(props.updateFileId);\n    }\n\n    if (props.fileId != null) {\n      this.setFileId(props.fileId);\n    }\n\n    if (props.fileHash != null) {\n      this.setFileHash(props.fileHash);\n    }\n\n    if (props.freezeType != null) {\n      this.setFreezeType(props.freezeType);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.ITransaction[]} transactions\n   * @param {proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {proto.ITransactionBody[]} bodies\n   * @returns {FreezeTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const freeze =\n    /** @type {proto.IFreezeTransactionBody} */\n    body.freeze;\n    return Transaction._fromProtobufTransactions(new FreezeTransaction({\n      startTime: freeze.startHour != null && freeze.startMin != null ? {\n        hour: freeze.startHour,\n        minute: freeze.startMin\n      } : undefined,\n      endTime: freeze.endHour != null && freeze.endMin != null ? {\n        hour: freeze.endHour,\n        minute: freeze.endMin\n      } : undefined,\n      startTimestamp: freeze.startTime != null ? Timestamp._fromProtobuf(freeze.startTime) : undefined,\n      updateFileId: freeze.updateFile != null ? FileId._fromProtobuf(freeze.updateFile) : undefined,\n      fileHash: freeze.fileHash != null ? freeze.fileHash : undefined,\n      freezeType: freeze.freezeType != null ? FreezeType._fromCode(freeze.freezeType) : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @deprecated - Use `startTimestamp` instead\n   * @returns {?HourMinute}\n   */\n\n\n  get startTime() {\n    return null;\n  }\n  /**\n   * @deprecated - Use `startTimestamp` instead\n   * @param {number | string} startHourOrString\n   * @param {?number} startMinute\n   * @returns {FreezeTransaction}\n   */\n\n\n  setStartTime(startHourOrString, startMinute) {\n    this._requireNotFrozen();\n\n    if (typeof startHourOrString === \"string\") {\n      const split = startHourOrString.split(\":\");\n      this._startTime = {\n        hour: Number(split[0]),\n        minute: Number(split[1])\n      };\n    } else {\n      this._startTime = {\n        hour: startHourOrString,\n        minute:\n        /** @type {number} */\n        startMinute\n      };\n    }\n\n    return this;\n  }\n  /**\n   * @returns {?Timestamp}\n   */\n\n\n  get startTimestamp() {\n    return this._startTimestamp;\n  }\n  /**\n   * @param {Timestamp} startTimestamp\n   * @returns {FreezeTransaction}\n   */\n\n\n  setStartTimestamp(startTimestamp) {\n    this._requireNotFrozen();\n\n    this._startTimestamp = startTimestamp;\n    return this;\n  }\n  /**\n   * @deprecated\n   * @returns {?HourMinute}\n   */\n\n\n  get endTime() {\n    console.warn(\"`FreezeTransaction.endTime` is deprecated\");\n    return this._endTime;\n  }\n  /**\n   * @deprecated\n   * @param {number | string} endHourOrString\n   * @param {?number} endMinute\n   * @returns {FreezeTransaction}\n   */\n\n\n  setEndTime(endHourOrString, endMinute) {\n    console.warn(\"`FreezeTransaction.endTime` is deprecated\");\n\n    this._requireNotFrozen();\n\n    if (typeof endHourOrString === \"string\") {\n      const split = endHourOrString.split(\":\");\n      this._endTime = {\n        hour: Number(split[0]),\n        minute: Number(split[1])\n      };\n    } else {\n      this._endTime = {\n        hour: endHourOrString,\n        minute:\n        /** @type {number} */\n        endMinute\n      };\n    }\n\n    return this;\n  }\n  /**\n   * @deprecated - Use `fileId` instead\n   * @returns {?FileId}\n   */\n\n\n  get updateFileId() {\n    return this.fileId;\n  }\n  /**\n   * @deprecated - Use `setFileId()` instead\n   * @param {FileId} updateFileId\n   * @returns {FreezeTransaction}\n   */\n\n\n  setUpdateFileId(updateFileId) {\n    return this.setFileId(updateFileId);\n  }\n  /**\n   * @returns {?FileId}\n   */\n\n\n  get fileId() {\n    return this._fileId;\n  }\n  /**\n   * @param {FileId} fileId\n   * @returns {FreezeTransaction}\n   */\n\n\n  setFileId(fileId) {\n    this._requireNotFrozen();\n\n    this._fileId = fileId;\n    return this;\n  }\n  /**\n   * @returns {?Uint8Array}\n   */\n\n\n  get fileHash() {\n    return this._fileHash;\n  }\n  /**\n   * @param {Uint8Array | string} fileHash\n   * @returns {FreezeTransaction}\n   */\n\n\n  setFileHash(fileHash) {\n    this._requireNotFrozen();\n\n    this._fileHash = typeof fileHash === \"string\" ? hex.decode(fileHash) : fileHash;\n    return this;\n  }\n  /**\n   * @returns {?FreezeType}\n   */\n\n\n  get freezeType() {\n    return this._freezeType;\n  }\n  /**\n   * @param {FreezeType} freezeType\n   * @returns {FreezeTransaction}\n   */\n\n\n  setFreezeType(freezeType) {\n    this._requireNotFrozen();\n\n    this._freezeType = freezeType;\n    return this;\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"freeze\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {proto.IFreezeTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      startTime: this._startTimestamp != null ? this._startTimestamp._toProtobuf() : null,\n      updateFile: this._fileId != null ? this._fileId._toProtobuf() : null,\n      fileHash: this._fileHash,\n      freezeType: this._freezeType != null ? this._freezeType.valueOf() : null\n    };\n  }\n\n} // eslint-disable-next-line @typescript-eslint/unbound-method\n\nTRANSACTION_REGISTRY.set(\"freeze\", FreezeTransaction._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/system/FreezeTransaction.js"],"names":["Transaction","TRANSACTION_REGISTRY","Timestamp","FileId","hex","FreezeType","FreezeTransaction","constructor","props","_startTime","_startTimestamp","_endTime","_fileId","_fileHash","_freezeType","startTime","setStartTime","hour","minute","endTime","setEndTime","startTimestamp","setStartTimestamp","updateFileId","setUpdateFileId","fileId","setFileId","fileHash","setFileHash","freezeType","setFreezeType","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","freeze","_fromProtobufTransactions","startHour","startMin","undefined","endHour","endMin","updateFile","_fromCode","startHourOrString","startMinute","_requireNotFrozen","split","Number","console","warn","endHourOrString","endMinute","decode","_getTransactionDataCase","_makeTransactionData","_toProtobuf","valueOf","set"],"mappings":"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","sourcesContent":["import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport FileId from \"../file/FileId.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport FreezeType from \"../FreezeType.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").IFreezeTransactionBody} proto.IFreezeTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} HourMinute\n * @property {number} hour\n * @property {number} minute\n */\n\nexport default class FreezeTransaction extends Transaction {\n    /**\n     * @param {Object} [props]\n     * @param {HourMinute} [props.startTime]\n     * @param {HourMinute} [props.endTime]\n     * @param {Timestamp} [props.startTimestamp]\n     * @param {FileId} [props.updateFileId]\n     * @param {FileId} [props.fileId]\n     * @param {Uint8Array | string} [props.fileHash]\n     * @param { FreezeType } [props.freezeType]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?HourMinute}\n         */\n        this._startTime = null;\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._startTimestamp = null;\n\n        /**\n         * @private\n         * @type {?HourMinute}\n         */\n        this._endTime = null;\n\n        /**\n         * @private\n         * @type {?FileId}\n         */\n        this._fileId = null;\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._fileHash = null;\n\n        /**\n         * @private\n         * @type {?FreezeType}\n         */\n        this._freezeType = null;\n\n        if (props.startTime != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setStartTime(props.startTime.hour, props.startTime.minute);\n        }\n\n        if (props.endTime != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setEndTime(props.endTime.hour, props.endTime.minute);\n        }\n\n        if (props.startTimestamp != null) {\n            this.setStartTimestamp(props.startTimestamp);\n        }\n\n        if (props.updateFileId != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setUpdateFileId(props.updateFileId);\n        }\n\n        if (props.fileId != null) {\n            this.setFileId(props.fileId);\n        }\n\n        if (props.fileHash != null) {\n            this.setFileHash(props.fileHash);\n        }\n\n        if (props.freezeType != null) {\n            this.setFreezeType(props.freezeType);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {FreezeTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const freeze = /** @type {proto.IFreezeTransactionBody} */ (\n            body.freeze\n        );\n\n        return Transaction._fromProtobufTransactions(\n            new FreezeTransaction({\n                startTime:\n                    freeze.startHour != null && freeze.startMin != null\n                        ? {\n                              hour: freeze.startHour,\n                              minute: freeze.startMin,\n                          }\n                        : undefined,\n                endTime:\n                    freeze.endHour != null && freeze.endMin != null\n                        ? {\n                              hour: freeze.endHour,\n                              minute: freeze.endMin,\n                          }\n                        : undefined,\n                startTimestamp:\n                    freeze.startTime != null\n                        ? Timestamp._fromProtobuf(freeze.startTime)\n                        : undefined,\n                updateFileId:\n                    freeze.updateFile != null\n                        ? FileId._fromProtobuf(freeze.updateFile)\n                        : undefined,\n                fileHash: freeze.fileHash != null ? freeze.fileHash : undefined,\n                freezeType:\n                    freeze.freezeType != null\n                        ? FreezeType._fromCode(freeze.freezeType)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @deprecated - Use `startTimestamp` instead\n     * @returns {?HourMinute}\n     */\n    get startTime() {\n        return null;\n    }\n\n    /**\n     * @deprecated - Use `startTimestamp` instead\n     * @param {number | string} startHourOrString\n     * @param {?number} startMinute\n     * @returns {FreezeTransaction}\n     */\n    setStartTime(startHourOrString, startMinute) {\n        this._requireNotFrozen();\n        if (typeof startHourOrString === \"string\") {\n            const split = startHourOrString.split(\":\");\n            this._startTime = {\n                hour: Number(split[0]),\n                minute: Number(split[1]),\n            };\n        } else {\n            this._startTime = {\n                hour: startHourOrString,\n                minute: /** @type {number} */ (startMinute),\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get startTimestamp() {\n        return this._startTimestamp;\n    }\n\n    /**\n     * @param {Timestamp} startTimestamp\n     * @returns {FreezeTransaction}\n     */\n    setStartTimestamp(startTimestamp) {\n        this._requireNotFrozen();\n        this._startTimestamp = startTimestamp;\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @returns {?HourMinute}\n     */\n    get endTime() {\n        console.warn(\"`FreezeTransaction.endTime` is deprecated\");\n        return this._endTime;\n    }\n\n    /**\n     * @deprecated\n     * @param {number | string} endHourOrString\n     * @param {?number} endMinute\n     * @returns {FreezeTransaction}\n     */\n    setEndTime(endHourOrString, endMinute) {\n        console.warn(\"`FreezeTransaction.endTime` is deprecated\");\n        this._requireNotFrozen();\n        if (typeof endHourOrString === \"string\") {\n            const split = endHourOrString.split(\":\");\n            this._endTime = {\n                hour: Number(split[0]),\n                minute: Number(split[1]),\n            };\n        } else {\n            this._endTime = {\n                hour: endHourOrString,\n                minute: /** @type {number} */ (endMinute),\n            };\n        }\n\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `fileId` instead\n     * @returns {?FileId}\n     */\n    get updateFileId() {\n        return this.fileId;\n    }\n\n    /**\n     * @deprecated - Use `setFileId()` instead\n     * @param {FileId} updateFileId\n     * @returns {FreezeTransaction}\n     */\n    setUpdateFileId(updateFileId) {\n        return this.setFileId(updateFileId);\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get fileId() {\n        return this._fileId;\n    }\n\n    /**\n     * @param {FileId} fileId\n     * @returns {FreezeTransaction}\n     */\n    setFileId(fileId) {\n        this._requireNotFrozen();\n        this._fileId = fileId;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get fileHash() {\n        return this._fileHash;\n    }\n\n    /**\n     * @param {Uint8Array | string} fileHash\n     * @returns {FreezeTransaction}\n     */\n    setFileHash(fileHash) {\n        this._requireNotFrozen();\n        this._fileHash =\n            typeof fileHash === \"string\" ? hex.decode(fileHash) : fileHash;\n\n        return this;\n    }\n\n    /**\n     * @returns {?FreezeType}\n     */\n    get freezeType() {\n        return this._freezeType;\n    }\n\n    /**\n     * @param {FreezeType} freezeType\n     * @returns {FreezeTransaction}\n     */\n    setFreezeType(freezeType) {\n        this._requireNotFrozen();\n        this._freezeType = freezeType;\n        return this;\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"freeze\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.IFreezeTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            startTime:\n                this._startTimestamp != null\n                    ? this._startTimestamp._toProtobuf()\n                    : null,\n            updateFile:\n                this._fileId != null ? this._fileId._toProtobuf() : null,\n            fileHash: this._fileHash,\n            freezeType:\n                this._freezeType != null ? this._freezeType.valueOf() : null,\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nTRANSACTION_REGISTRY.set(\"freeze\", FreezeTransaction._fromProtobuf);\n"]},"metadata":{},"sourceType":"module"}