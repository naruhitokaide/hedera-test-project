{"ast":null,"code":"import Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoDeleteLiveHashTransactionBody} proto.ICryptoDeleteLiveHashTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class LiveHashDeleteTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {Uint8Array} [props.hash]\n   * @param {AccountId | string} [props.accountId]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?Uint8Array}\n     */\n\n    this._hash = null;\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n    this._accountId = null;\n\n    if (props.hash != null) {\n      this.setHash(props.hash);\n    }\n\n    if (props.accountId != null) {\n      this.setAccountId(props.accountId);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.ITransaction[]} transactions\n   * @param {proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {proto.ITransactionBody[]} bodies\n   * @returns {LiveHashDeleteTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const hashes =\n    /** @type {proto.ICryptoDeleteLiveHashTransactionBody} */\n    body.cryptoDeleteLiveHash;\n    return Transaction._fromProtobufTransactions(new LiveHashDeleteTransaction({\n      hash: hashes.liveHashToDelete != null ? hashes.liveHashToDelete : undefined,\n      accountId: hashes.accountOfLiveHash != null ? AccountId._fromProtobuf(hashes.accountOfLiveHash) : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {?Uint8Array}\n   */\n\n\n  get hash() {\n    return this._hash;\n  }\n  /**\n   * @param {Uint8Array} hash\n   * @returns {LiveHashDeleteTransaction}\n   */\n\n\n  setHash(hash) {\n    this._requireNotFrozen();\n\n    this._hash = hash;\n    return this;\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get accountId() {\n    return this._accountId;\n  }\n  /**\n   * @param {AccountId | string} accountId\n   * @returns {LiveHashDeleteTransaction}\n   */\n\n\n  setAccountId(accountId) {\n    this._requireNotFrozen();\n\n    this._accountId = typeof accountId === \"string\" ? AccountId.fromString(accountId) : accountId.clone();\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._accountId != null) {\n      this._accountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.ITransaction} request\n   * @returns {Promise<proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.deleteLiveHash(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"cryptoDeleteLiveHash\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {proto.ICryptoDeleteLiveHashTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      liveHashToDelete: this._hash,\n      accountOfLiveHash: this._accountId != null ? this._accountId._toProtobuf() : null\n    };\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"cryptoDeleteLiveHash\", // eslint-disable-next-line @typescript-eslint/unbound-method\nLiveHashDeleteTransaction._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/account/LiveHashDeleteTransaction.js"],"names":["Transaction","TRANSACTION_REGISTRY","AccountId","LiveHashDeleteTransaction","constructor","props","_hash","_accountId","hash","setHash","accountId","setAccountId","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","hashes","cryptoDeleteLiveHash","_fromProtobufTransactions","liveHashToDelete","undefined","accountOfLiveHash","_requireNotFrozen","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","deleteLiveHash","_getTransactionDataCase","_makeTransactionData","_toProtobuf","set"],"mappings":"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","sourcesContent":["import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoDeleteLiveHashTransactionBody} proto.ICryptoDeleteLiveHashTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class LiveHashDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Uint8Array} [props.hash]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._hash = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.hash != null) {\n            this.setHash(props.hash);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {LiveHashDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const hashes =\n            /** @type {proto.ICryptoDeleteLiveHashTransactionBody} */ (\n                body.cryptoDeleteLiveHash\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new LiveHashDeleteTransaction({\n                hash:\n                    hashes.liveHashToDelete != null\n                        ? hashes.liveHashToDelete\n                        : undefined,\n                accountId:\n                    hashes.accountOfLiveHash != null\n                        ? AccountId._fromProtobuf(hashes.accountOfLiveHash)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get hash() {\n        return this._hash;\n    }\n\n    /**\n     * @param {Uint8Array} hash\n     * @returns {LiveHashDeleteTransaction}\n     */\n    setHash(hash) {\n        this._requireNotFrozen();\n        this._hash = hash;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {LiveHashDeleteTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.deleteLiveHash(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoDeleteLiveHash\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ICryptoDeleteLiveHashTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            liveHashToDelete: this._hash,\n            accountOfLiveHash:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoDeleteLiveHash\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    LiveHashDeleteTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}