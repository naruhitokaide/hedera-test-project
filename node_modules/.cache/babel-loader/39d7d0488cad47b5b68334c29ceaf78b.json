{"ast":null,"code":"import ContractLogInfo from \"./ContractLogInfo.js\";\nimport ContractId from \"./ContractId.js\";\nimport BigNumber from \"bignumber.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as util from \"../util.js\";\nimport Long from \"long\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IContractFunctionResult} proto.IContractFunctionResult\n * @typedef {import(\"@hashgraph/proto\").IContractID} proto.IContractID\n */\n\n/**\n * The result returned by a call to a smart contract function. This is part of the response to\n * a ContractCallLocal query, and is in the record for a ContractCall or ContractCreateInstance\n * transaction. The ContractCreateInstance transaction record has the results of the call to\n * the constructor.\n */\n\nexport default class ContractFunctionResult {\n  /**\n   * Constructor isn't part of the stable API\n   *\n   * @param {object} result\n   * @param {?ContractId} result.contractId\n   * @param {?string} result.errorMessage\n   * @param {Uint8Array} result.bloom\n   * @param {Long} result.gasUsed\n   * @param {ContractLogInfo[]} result.logs\n   * @param {ContractId[]} result.createdContractIds\n   * @param {Uint8Array} result.bytes\n   */\n  constructor(result) {\n    /**\n     * The smart contract instance whose function was called.\n     */\n    this.contractId = result.contractId;\n    this.bytes = result.bytes;\n    /**\n     * Message In case there was an error during smart contract execution.\n     */\n\n    this.errorMessage = result.errorMessage;\n    /**\n     * Bloom filter for record\n     */\n\n    this.bloom = result.bloom;\n    /**\n     * Units of gas used  to execute contract.\n     */\n\n    this.gasUsed = result.gasUsed;\n    /**\n     * The log info for events returned by the function.\n     */\n\n    this.logs = result.logs;\n    this.createdContractIds = result.createdContractIds;\n  }\n  /**\n   * @param {proto.IContractFunctionResult} result\n   * @returns {ContractFunctionResult}\n   */\n\n\n  static _fromProtobuf(result) {\n    const contractId =\n    /** @type {proto.IContractID | null} */\n    result.contractID;\n    const gas =\n    /** @type {Long | number} */\n    result.gasUsed;\n    return new ContractFunctionResult({\n      bytes:\n      /** @type {Uint8Array} */\n      result.contractCallResult,\n      contractId: contractId != null ? ContractId._fromProtobuf(contractId) : null,\n      errorMessage: result.errorMessage != null ? result.errorMessage : null,\n      bloom:\n      /** @type {Uint8Array} */\n      result.bloom,\n      gasUsed: gas instanceof Long ? gas : Long.fromValue(gas),\n      logs: (result.logInfo != null ? result.logInfo : []).map(info => ContractLogInfo._fromProtobuf(info)),\n      createdContractIds: (result.createdContractIDs != null ? result.createdContractIDs : []).map(contractId => ContractId._fromProtobuf(contractId))\n    });\n  }\n  /**\n   * @returns {Uint8Array}\n   */\n\n\n  asBytes() {\n    return this.bytes;\n  }\n  /**\n   * @param {number} [index]\n   * @returns {string}\n   */\n\n\n  getString(index) {\n    return utf8.decode(this.getBytes(index));\n  }\n  /**\n   * @private\n   * @param {number} [index]\n   * @returns {Uint8Array}\n   */\n\n\n  getBytes(index) {\n    // Len should never be larger than Number.MAX\n    // index * 32 is the position of the lenth\n    // (index + 1) * 32 onward to (index + 1) * 32 + len will be the elements of the array\n    // Arrays in solidity cannot be longer than 1024:\n    // https://solidity.readthedocs.io/en/v0.4.21/introduction-to-smart-contracts.html\n    const offset = this.getInt32(index);\n    const len = util.safeView(this.bytes).getInt32(offset + 28);\n    return this.bytes.subarray(offset + 32, offset + 32 + len);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {Uint8Array}\n   */\n\n\n  getBytes32(index) {\n    return this.bytes.subarray((index != null ? index : 0) * 32, (index != null ? index : 0) * 32 + 32);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {boolean}\n   */\n\n\n  getBool(index) {\n    return this.bytes[(index != null ? index : 0) * 32 + 31] !== 0;\n  }\n  /**\n   * @param {number} [index]\n   * @returns {number}\n   */\n\n\n  getInt8(index) {\n    return this.bytes[(index != null ? index : 0) * 32 + 31];\n  }\n  /**\n   * @param {number} [index]\n   * @returns {number}\n   */\n\n\n  getInt32(index) {\n    // .getInt32() interprets as big-endian\n    // Using DataView instead of Uint32Array because the latter interprets\n    // using platform endianness which is little-endian on x86\n    const position = (index != null ? index : 0) * 32 + 28;\n    return util.safeView(this.bytes).getInt32(position);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt64(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0).subarray(24, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getInt256(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index != null ? index : 0)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {number}\n   */\n\n\n  getUint8(index) {\n    return this.bytes[(index != null ? index : 0) * 32 + 31];\n  }\n  /**\n   * @param {number} [index]\n   * @returns {number}\n   */\n\n\n  getUint32(index) {\n    // .getUint32() interprets as big-endian\n    // Using DataView instead of Uint32Array because the latter interprets\n    // using platform endianness which is little-endian on x86\n    const position = (index != null ? index : 0) * 32 + 28;\n    return util.safeView(this.bytes).getUint32(position);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint64(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index).subarray(24, 32)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {BigNumber}\n   */\n\n\n  getUint256(index) {\n    return new BigNumber(hex.encode(this._getBytes32(index)), 16);\n  }\n  /**\n   * @param {number} [index]\n   * @returns {string}\n   */\n\n\n  getAddress(index) {\n    return hex.encode(this.bytes.subarray((index != null ? index : 0) * 32 + 12, (index != null ? index : 0) * 32 + 32));\n  }\n  /**\n   * @param {number} [index]\n   * @returns {Uint8Array}\n   */\n\n\n  _getBytes32(index) {\n    return this.bytes.subarray((index != null ? index : 0) * 32, (index != null ? index : 0) * 32 + 32);\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/contract/ContractFunctionResult.js"],"names":["ContractLogInfo","ContractId","BigNumber","hex","utf8","util","Long","ContractFunctionResult","constructor","result","contractId","bytes","errorMessage","bloom","gasUsed","logs","createdContractIds","_fromProtobuf","contractID","gas","contractCallResult","fromValue","logInfo","map","info","createdContractIDs","asBytes","getString","index","decode","getBytes","offset","getInt32","len","safeView","subarray","getBytes32","getBool","getInt8","position","getInt64","encode","_getBytes32","getInt256","getUint8","getUint32","getUint64","getUint256","getAddress"],"mappings":"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","sourcesContent":["import ContractLogInfo from \"./ContractLogInfo.js\";\nimport ContractId from \"./ContractId.js\";\nimport BigNumber from \"bignumber.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as util from \"../util.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IContractFunctionResult} proto.IContractFunctionResult\n * @typedef {import(\"@hashgraph/proto\").IContractID} proto.IContractID\n */\n/**\n * The result returned by a call to a smart contract function. This is part of the response to\n * a ContractCallLocal query, and is in the record for a ContractCall or ContractCreateInstance\n * transaction. The ContractCreateInstance transaction record has the results of the call to\n * the constructor.\n */\nexport default class ContractFunctionResult {\n    /**\n     * Constructor isn't part of the stable API\n     *\n     * @param {object} result\n     * @param {?ContractId} result.contractId\n     * @param {?string} result.errorMessage\n     * @param {Uint8Array} result.bloom\n     * @param {Long} result.gasUsed\n     * @param {ContractLogInfo[]} result.logs\n     * @param {ContractId[]} result.createdContractIds\n     * @param {Uint8Array} result.bytes\n     */\n    constructor(result) {\n        /**\n         * The smart contract instance whose function was called.\n         */\n        this.contractId = result.contractId;\n\n        this.bytes = result.bytes;\n\n        /**\n         * Message In case there was an error during smart contract execution.\n         */\n        this.errorMessage = result.errorMessage;\n\n        /**\n         * Bloom filter for record\n         */\n        this.bloom = result.bloom;\n\n        /**\n         * Units of gas used  to execute contract.\n         */\n        this.gasUsed = result.gasUsed;\n\n        /**\n         * The log info for events returned by the function.\n         */\n        this.logs = result.logs;\n\n        this.createdContractIds = result.createdContractIds;\n    }\n\n    /**\n     * @param {proto.IContractFunctionResult} result\n     * @returns {ContractFunctionResult}\n     */\n    static _fromProtobuf(result) {\n        const contractId = /** @type {proto.IContractID | null} */ (\n            result.contractID\n        );\n        const gas = /** @type {Long | number} */ (result.gasUsed);\n\n        return new ContractFunctionResult({\n            bytes: /** @type {Uint8Array} */ (result.contractCallResult),\n            contractId:\n                contractId != null\n                    ? ContractId._fromProtobuf(contractId)\n                    : null,\n            errorMessage:\n                result.errorMessage != null ? result.errorMessage : null,\n            bloom: /** @type {Uint8Array} */ (result.bloom),\n            gasUsed: gas instanceof Long ? gas : Long.fromValue(gas),\n            logs: (result.logInfo != null ? result.logInfo : []).map((info) =>\n                ContractLogInfo._fromProtobuf(info)\n            ),\n            createdContractIds: (result.createdContractIDs != null\n                ? result.createdContractIDs\n                : []\n            ).map((contractId) => ContractId._fromProtobuf(contractId)),\n        });\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    asBytes() {\n        return this.bytes;\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {string}\n     */\n    getString(index) {\n        return utf8.decode(this.getBytes(index));\n    }\n\n    /**\n     * @private\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    getBytes(index) {\n        // Len should never be larger than Number.MAX\n        // index * 32 is the position of the lenth\n        // (index + 1) * 32 onward to (index + 1) * 32 + len will be the elements of the array\n        // Arrays in solidity cannot be longer than 1024:\n        // https://solidity.readthedocs.io/en/v0.4.21/introduction-to-smart-contracts.html\n        const offset = this.getInt32(index);\n        const len = util.safeView(this.bytes).getInt32(offset + 28);\n\n        return this.bytes.subarray(offset + 32, offset + 32 + len);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    getBytes32(index) {\n        return this.bytes.subarray(\n            (index != null ? index : 0) * 32,\n            (index != null ? index : 0) * 32 + 32\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {boolean}\n     */\n    getBool(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31] !== 0;\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getInt8(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31];\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getInt32(index) {\n        // .getInt32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        const position = (index != null ? index : 0) * 32 + 28;\n        return util.safeView(this.bytes).getInt32(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt64(index) {\n        return new BigNumber(\n            hex.encode(\n                this._getBytes32(index != null ? index : 0).subarray(24, 32)\n            ),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt256(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index != null ? index : 0)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getUint8(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31];\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getUint32(index) {\n        // .getUint32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        const position = (index != null ? index : 0) * 32 + 28;\n        return util.safeView(this.bytes).getUint32(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint64(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(24, 32)),\n            16\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint256(index) {\n        return new BigNumber(hex.encode(this._getBytes32(index)), 16);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {string}\n     */\n    getAddress(index) {\n        return hex.encode(\n            this.bytes.subarray(\n                (index != null ? index : 0) * 32 + 12,\n                (index != null ? index : 0) * 32 + 32\n            )\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    _getBytes32(index) {\n        return this.bytes.subarray(\n            (index != null ? index : 0) * 32,\n            (index != null ? index : 0) * 32 + 32\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}