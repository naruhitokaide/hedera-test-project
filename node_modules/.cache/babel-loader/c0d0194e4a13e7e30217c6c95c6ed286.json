{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\"); // Extends EventEmitter\n\n\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\n\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n  if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n  util.EventEmitter.call(this);\n  /**\n   * RPC implementation. Becomes `null` once the service is ended.\n   * @type {RPCImpl|null}\n   */\n\n  this.rpcImpl = rpcImpl;\n  /**\n   * Whether requests are length-delimited.\n   * @type {boolean}\n   */\n\n  this.requestDelimited = Boolean(requestDelimited);\n  /**\n   * Whether responses are length-delimited.\n   * @type {boolean}\n   */\n\n  this.responseDelimited = Boolean(responseDelimited);\n}\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\n\n\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n  if (!request) throw TypeError(\"request must be specified\");\n  var self = this;\n  if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n  if (!self.rpcImpl) {\n    setTimeout(function () {\n      callback(Error(\"already ended\"));\n    }, 0);\n    return undefined;\n  }\n\n  try {\n    return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n      if (err) {\n        self.emit(\"error\", err, method);\n        return callback(err);\n      }\n\n      if (response === null) {\n        self.end(\n        /* endedByRPC */\n        true);\n        return undefined;\n      }\n\n      if (!(response instanceof responseCtor)) {\n        try {\n          response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n        } catch (err) {\n          self.emit(\"error\", err, method);\n          return callback(err);\n        }\n      }\n\n      self.emit(\"data\", response, method);\n      return callback(null, response);\n    });\n  } catch (err) {\n    self.emit(\"error\", err, method);\n    setTimeout(function () {\n      callback(err);\n    }, 0);\n    return undefined;\n  }\n};\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\n\n\nService.prototype.end = function end(endedByRPC) {\n  if (this.rpcImpl) {\n    if (!endedByRPC) // signal end to rpcImpl\n      this.rpcImpl(null, null, null);\n    this.rpcImpl = null;\n    this.emit(\"end\").off();\n  }\n\n  return this;\n};","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/protobufjs/src/rpc/service.js"],"names":["module","exports","Service","util","require","prototype","Object","create","EventEmitter","constructor","rpcImpl","requestDelimited","responseDelimited","TypeError","call","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","self","asPromise","setTimeout","Error","undefined","finish","rpcCallback","err","response","emit","end","endedByRPC","off"],"mappings":"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","sourcesContent":["\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n"]},"metadata":{},"sourceType":"script"}