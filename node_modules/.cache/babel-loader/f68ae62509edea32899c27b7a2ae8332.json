{"ast":null,"code":"import Transaction, { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport Duration from \"../Duration.js\";\nimport Key from \"../Key.js\";\nimport KeyList from \"../KeyList.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoAddLiveHashTransactionBody} proto.ICryptoAddLiveHashTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ILiveHash} proto.ILiveHash\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class LiveHashAddTransaction extends Transaction {\n  /**\n   * @param {object} [props]\n   * @param {Uint8Array} [props.hash]\n   * @param {Key[]} [props.keys]\n   * @param {Duration | Long | number} [props.duration]\n   * @param {AccountId | string} [props.accountId]\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @private\n     * @type {?Uint8Array}\n     */\n\n    this._hash = null;\n    /**\n     * @private\n     * @type {?Key[]}\n     */\n\n    this._keys = null;\n    /**\n     * @private\n     * @type {?Duration}\n     */\n\n    this._duration = null;\n    /**\n     * @private\n     * @type {?AccountId}\n     */\n\n    this._accountId = null;\n\n    if (props.hash != null) {\n      this.setHash(props.hash);\n    }\n\n    if (props.keys != null) {\n      this.setKeys(props.keys);\n    }\n\n    if (props.duration != null) {\n      this.setDuration(props.duration);\n    }\n\n    if (props.accountId != null) {\n      this.setAccountId(props.accountId);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.ITransaction[]} transactions\n   * @param {proto.ISignedTransaction[]} signedTransactions\n   * @param {TransactionId[]} transactionIds\n   * @param {AccountId[]} nodeIds\n   * @param {proto.ITransactionBody[]} bodies\n   * @returns {LiveHashAddTransaction}\n   */\n\n\n  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {\n    const body = bodies[0];\n    const hashes =\n    /** @type {proto.ICryptoAddLiveHashTransactionBody} */\n    body.cryptoAddLiveHash;\n    const liveHash_ =\n    /** @type {proto.ILiveHash} */\n    hashes.liveHash;\n    return Transaction._fromProtobufTransactions(new LiveHashAddTransaction({\n      hash: liveHash_.hash != null ? liveHash_.hash : undefined,\n      keys: liveHash_.keys != null ? liveHash_.keys.keys != null ? liveHash_.keys.keys.map(key => Key._fromProtobufKey(key)) : undefined : undefined,\n      duration: liveHash_.duration != null ? liveHash_.duration.seconds != null ? liveHash_.duration.seconds : undefined : undefined,\n      accountId: liveHash_.accountId != null ? AccountId._fromProtobuf(liveHash_.accountId) : undefined\n    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);\n  }\n  /**\n   * @returns {?Uint8Array}\n   */\n\n\n  get hash() {\n    return this._hash;\n  }\n  /**\n   * @param {Uint8Array} hash\n   * @returns {LiveHashAddTransaction}\n   */\n\n\n  setHash(hash) {\n    this._requireNotFrozen();\n\n    this._hash = hash;\n    return this;\n  }\n  /**\n   * @returns {?Key[]}\n   */\n\n\n  get keys() {\n    return this._keys;\n  }\n  /**\n   * @param {Key[] | KeyList} keys\n   * @returns {LiveHashAddTransaction}\n   */\n\n\n  setKeys(keys) {\n    this._requireNotFrozen();\n\n    this._keys = keys instanceof KeyList ? keys.toArray() : keys;\n    return this;\n  }\n  /**\n   * @returns {?Duration}\n   */\n\n\n  get duration() {\n    return this._duration;\n  }\n  /**\n   * @param {Duration | Long | number} duration\n   * @returns {LiveHashAddTransaction}\n   */\n\n\n  setDuration(duration) {\n    this._requireNotFrozen();\n\n    this._duration = duration instanceof Duration ? duration : new Duration(duration);\n    return this;\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get accountId() {\n    return this._accountId;\n  }\n  /**\n   * @param {AccountId | string} accountId\n   * @returns {LiveHashAddTransaction}\n   */\n\n\n  setAccountId(accountId) {\n    this._requireNotFrozen();\n\n    this._accountId = typeof accountId === \"string\" ? AccountId.fromString(accountId) : accountId.clone();\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._accountId != null) {\n      this._accountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.ITransaction} request\n   * @returns {Promise<proto.ITransactionResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.addLiveHash(request);\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n   */\n\n\n  _getTransactionDataCase() {\n    return \"cryptoAddLiveHash\";\n  }\n  /**\n   * @override\n   * @protected\n   * @returns {proto.ICryptoAddLiveHashTransactionBody}\n   */\n\n\n  _makeTransactionData() {\n    return {\n      liveHash: {\n        hash: this._hash,\n        keys: this._keys != null ? {\n          keys: this._keys.map(key => key._toProtobufKey())\n        } : undefined,\n        duration: this._duration != null ? this._duration._toProtobuf() : null,\n        accountId: this._accountId != null ? this._accountId._toProtobuf() : null\n      }\n    };\n  }\n\n}\nTRANSACTION_REGISTRY.set(\"cryptoAddLiveHash\", // eslint-disable-next-line @typescript-eslint/unbound-method\nLiveHashAddTransaction._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/account/LiveHashAddTransaction.js"],"names":["Transaction","TRANSACTION_REGISTRY","AccountId","Duration","Key","KeyList","LiveHashAddTransaction","constructor","props","_hash","_keys","_duration","_accountId","hash","setHash","keys","setKeys","duration","setDuration","accountId","setAccountId","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","hashes","cryptoAddLiveHash","liveHash_","liveHash","_fromProtobufTransactions","undefined","map","key","_fromProtobufKey","seconds","_requireNotFrozen","toArray","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","addLiveHash","_getTransactionDataCase","_makeTransactionData","_toProtobufKey","_toProtobuf","set"],"mappings":"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","sourcesContent":["import Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport Duration from \"../Duration.js\";\nimport Key from \"../Key.js\";\nimport KeyList from \"../KeyList.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").ITransaction} proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").ISignedTransaction} proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").TransactionBody} proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionBody} proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").ITransactionResponse} proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").ICryptoAddLiveHashTransactionBody} proto.ICryptoAddLiveHashTransactionBody\n * @typedef {import(\"@hashgraph/proto\").ILiveHash} proto.ILiveHash\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\nexport default class LiveHashAddTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Uint8Array} [props.hash]\n     * @param {Key[]} [props.keys]\n     * @param {Duration | Long | number} [props.duration]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._hash = null;\n\n        /**\n         * @private\n         * @type {?Key[]}\n         */\n        this._keys = null;\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._duration = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.hash != null) {\n            this.setHash(props.hash);\n        }\n\n        if (props.keys != null) {\n            this.setKeys(props.keys);\n        }\n\n        if (props.duration != null) {\n            this.setDuration(props.duration);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.ITransaction[]} transactions\n     * @param {proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {proto.ITransactionBody[]} bodies\n     * @returns {LiveHashAddTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies\n    ) {\n        const body = bodies[0];\n        const hashes = /** @type {proto.ICryptoAddLiveHashTransactionBody} */ (\n            body.cryptoAddLiveHash\n        );\n        const liveHash_ = /** @type {proto.ILiveHash} */ (hashes.liveHash);\n\n        return Transaction._fromProtobufTransactions(\n            new LiveHashAddTransaction({\n                hash: liveHash_.hash != null ? liveHash_.hash : undefined,\n                keys:\n                    liveHash_.keys != null\n                        ? liveHash_.keys.keys != null\n                            ? liveHash_.keys.keys.map((key) =>\n                                  Key._fromProtobufKey(key)\n                              )\n                            : undefined\n                        : undefined,\n                duration:\n                    liveHash_.duration != null\n                        ? liveHash_.duration.seconds != null\n                            ? liveHash_.duration.seconds\n                            : undefined\n                        : undefined,\n                accountId:\n                    liveHash_.accountId != null\n                        ? AccountId._fromProtobuf(liveHash_.accountId)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies\n        );\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get hash() {\n        return this._hash;\n    }\n\n    /**\n     * @param {Uint8Array} hash\n     * @returns {LiveHashAddTransaction}\n     */\n    setHash(hash) {\n        this._requireNotFrozen();\n        this._hash = hash;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key[]}\n     */\n    get keys() {\n        return this._keys;\n    }\n\n    /**\n     * @param {Key[] | KeyList} keys\n     * @returns {LiveHashAddTransaction}\n     */\n    setKeys(keys) {\n        this._requireNotFrozen();\n        this._keys = keys instanceof KeyList ? keys.toArray() : keys;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get duration() {\n        return this._duration;\n    }\n\n    /**\n     * @param {Duration | Long | number} duration\n     * @returns {LiveHashAddTransaction}\n     */\n    setDuration(duration) {\n        this._requireNotFrozen();\n        this._duration =\n            duration instanceof Duration ? duration : new Duration(duration);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {LiveHashAddTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.ITransaction} request\n     * @returns {Promise<proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.addLiveHash(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoAddLiveHash\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {proto.ICryptoAddLiveHashTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            liveHash: {\n                hash: this._hash,\n                keys:\n                    this._keys != null\n                        ? {\n                              keys: this._keys.map((key) =>\n                                  key._toProtobufKey()\n                              ),\n                          }\n                        : undefined,\n                duration:\n                    this._duration != null\n                        ? this._duration._toProtobuf()\n                        : null,\n                accountId:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoAddLiveHash\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    LiveHashAddTransaction._fromProtobuf\n);\n"]},"metadata":{},"sourceType":"module"}