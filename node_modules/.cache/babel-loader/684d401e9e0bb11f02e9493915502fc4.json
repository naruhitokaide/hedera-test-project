{"ast":null,"code":"import * as crypto from \"./aes.js\";\nimport * as der from \"../encoding/der.js\";\nimport * as pbkdf2 from \"./pbkdf2.js\";\nimport * as hmac from \"./hmac.js\";\nexport class AlgorithmIdentifier {\n  /**\n   * @param {import(\"../encoding/der.js\").AsnType} asn\n   */\n  constructor(asn) {\n    if (\"seq\" in asn && asn.seq.length >= 1 && \"ident\" in asn.seq[0]) {\n      /**\n       * @type {string}\n       */\n      this.algIdent = asn.seq[0].ident;\n      /**\n       * @type {import(\"../encoding/der.js\").AsnType | undefined}\n       */\n\n      this.parameters = asn.seq[1];\n    } else {\n      throw new Error(`error parsing AlgorithmIdentifier from ${JSON.stringify(asn)}`);\n    }\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n}\n\nclass PBES2Params {\n  /**\n   * @param {import(\"../encoding/der.js\").AsnType} asn\n   */\n  constructor(asn) {\n    if (\"seq\" in asn && asn.seq.length === 2) {\n      /**\n       * @type {AlgorithmIdentifier}\n       */\n      this.kdf = new AlgorithmIdentifier(asn.seq[0]);\n      /**\n       * @type {AlgorithmIdentifier}\n       */\n\n      this.encScheme = new AlgorithmIdentifier(asn.seq[1]);\n    } else {\n      throw new Error(`error parsing PBES2Params from ${JSON.stringify(asn)}`);\n    }\n  }\n\n}\n\nclass PBKDF2Params {\n  /**\n   * @param {import(\"../encoding/der.js\").AsnType} asn\n   */\n  constructor(asn) {\n    if (\"seq\" in asn && asn.seq.length >= 2 && \"bytes\" in asn.seq[0] && \"int\" in asn.seq[1]) {\n      /**\n       * @type {Uint8Array}\n       */\n      this.salt = asn.seq[0].bytes;\n      /**\n       * @type {number}\n       */\n\n      this.iterCount = asn.seq[1][\"int\"];\n\n      if (asn.seq.length > 2) {\n        if (\"seq\" in asn.seq[2]) {\n          this.prf = new AlgorithmIdentifier(asn.seq[2]);\n          return;\n        } else if (\"int\" in asn.seq[2]) {\n          /**\n           * @type {number | undefined}\n           */\n          this.keyLength = asn.seq[2][\"int\"];\n        }\n\n        if (asn.seq.length === 4) {\n          /**\n           * @type {AlgorithmIdentifier | undefined}\n           */\n          this.prf = new AlgorithmIdentifier(asn.seq[3]);\n        }\n\n        return;\n      }\n    }\n\n    throw new Error(`error parsing PBKDF2Params from ${JSON.stringify(asn)}`);\n  }\n\n}\n\nexport class PrivateKeyInfo {\n  /**\n   * @param {import(\"../encoding/der.js\").AsnType} asn\n   */\n  constructor(asn) {\n    if (\"seq\" in asn && asn.seq.length === 3) {\n      if (\"int\" in asn.seq[0] && asn.seq[0][\"int\"] === 0) {\n        /**\n         * @type {number}\n         */\n        this.version = 0;\n      } else {\n        throw new Error(`expected version = 0, got ${JSON.stringify(asn.seq[0])}`);\n      }\n      /**\n       * @type {AlgorithmIdentifier}\n       */\n\n\n      this.algId = new AlgorithmIdentifier(asn.seq[1]);\n\n      if (\"bytes\" in asn.seq[2]) {\n        /**\n         * @type {Uint8Array}\n         */\n        this.privateKey = asn.seq[2].bytes;\n      } else {\n        throw new Error(`expected octet string as 3rd element, got ${JSON.stringify(asn.seq[2])}`);\n      }\n\n      return;\n    }\n\n    throw new Error(`error parsing PrivateKeyInfo from ${JSON.stringify(asn)}`);\n  }\n  /**\n   * @param {Uint8Array} encoded\n   * @returns {PrivateKeyInfo}\n   */\n\n\n  static parse(encoded) {\n    return new PrivateKeyInfo(der.decode(encoded));\n  }\n\n}\nexport class EncryptedPrivateKeyInfo {\n  /**\n   * @param {import(\"../encoding/der.js\").AsnType} asn\n   */\n  constructor(asn) {\n    if (\"seq\" in asn && asn.seq.length === 2 && \"bytes\" in asn.seq[1]) {\n      /**\n       * @type {AlgorithmIdentifier}\n       */\n      this.algId = new AlgorithmIdentifier(asn.seq[0]);\n      /**\n       * @type {Uint8Array}\n       */\n\n      this.data = asn.seq[1].bytes;\n      return;\n    }\n\n    throw new Error(`error parsing EncryptedPrivateKeyInfo from ${JSON.stringify(asn)}`);\n  }\n  /**\n   * @param {Uint8Array} encoded\n   * @returns {EncryptedPrivateKeyInfo}\n   */\n\n\n  static parse(encoded) {\n    return new EncryptedPrivateKeyInfo(der.decode(encoded));\n  }\n  /**\n   * @param {string} passphrase\n   * @returns {Promise<PrivateKeyInfo>}\n   */\n\n\n  async decrypt(passphrase) {\n    if (this.algId.algIdent !== \"1.2.840.113549.1.5.13\" || !this.algId.parameters) {\n      // PBES2\n      throw new Error(`unsupported key encryption algorithm: ${this.algId.toString()}`);\n    }\n\n    const pbes2Params = new PBES2Params(this.algId.parameters);\n\n    if (pbes2Params.kdf.algIdent !== \"1.2.840.113549.1.5.12\" || !pbes2Params.kdf.parameters) {\n      // PBKDF2\n      throw new Error(`unsupported key derivation function: ${pbes2Params.kdf.toString()}`);\n    }\n\n    const pbkdf2Params = new PBKDF2Params(pbes2Params.kdf.parameters);\n\n    if (!pbkdf2Params.prf) {\n      throw new Error(\"unsupported PRF HMAC-SHA-1\");\n    } else if (pbkdf2Params.prf.algIdent !== \"1.2.840.113549.2.9\") {\n      // HMAC-SHA-256\n      throw new Error(`unsupported PRF ${pbkdf2Params.prf.toString()}`);\n    }\n\n    if (pbes2Params.encScheme.algIdent !== \"2.16.840.1.101.3.4.1.2\") {\n      // AES-128-CBC\n      throw new Error(`unsupported encryption scheme: ${pbes2Params.encScheme.toString()}`);\n    }\n\n    if (!pbes2Params.encScheme.parameters || !(\"bytes\" in pbes2Params.encScheme.parameters)) {\n      throw new Error(\"expected IV as bytes for AES-128-CBC, \" + `got: ${JSON.stringify(pbes2Params.encScheme.parameters)}`);\n    }\n\n    const keyLen = pbkdf2Params.keyLength || 16;\n    const iv = pbes2Params.encScheme.parameters.bytes;\n    const key = await pbkdf2.deriveKey(hmac.HashAlgorithm.Sha256, passphrase, pbkdf2Params.salt, pbkdf2Params.iterCount, keyLen);\n    const decrypted = await crypto.createDecipheriv(crypto.CipherAlgorithm.Aes128Cbc, key, iv, this.data);\n    return PrivateKeyInfo.parse(decrypted);\n  }\n\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/cryptography/src/primitive/pkcs.js"],"names":["crypto","der","pbkdf2","hmac","AlgorithmIdentifier","constructor","asn","seq","length","algIdent","ident","parameters","Error","JSON","stringify","toString","PBES2Params","kdf","encScheme","PBKDF2Params","salt","bytes","iterCount","prf","keyLength","PrivateKeyInfo","version","algId","privateKey","parse","encoded","decode","EncryptedPrivateKeyInfo","data","decrypt","passphrase","pbes2Params","pbkdf2Params","keyLen","iv","key","deriveKey","HashAlgorithm","Sha256","decrypted","createDecipheriv","CipherAlgorithm","Aes128Cbc"],"mappings":"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","sourcesContent":["import * as crypto from \"./aes.js\";\nimport * as der from \"../encoding/der.js\";\nimport * as pbkdf2 from \"./pbkdf2.js\";\nimport * as hmac from \"./hmac.js\";\n\nexport class AlgorithmIdentifier {\n    /**\n     * @param {import(\"../encoding/der.js\").AsnType} asn\n     */\n    constructor(asn) {\n        if (\"seq\" in asn && asn.seq.length >= 1 && \"ident\" in asn.seq[0]) {\n            /**\n             * @type {string}\n             */\n            this.algIdent = asn.seq[0].ident;\n\n            /**\n             * @type {import(\"../encoding/der.js\").AsnType | undefined}\n             */\n            this.parameters = asn.seq[1];\n        } else {\n            throw new Error(\n                `error parsing AlgorithmIdentifier from ${JSON.stringify(asn)}`\n            );\n        }\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this);\n    }\n}\n\nclass PBES2Params {\n    /**\n     * @param {import(\"../encoding/der.js\").AsnType} asn\n     */\n    constructor(asn) {\n        if (\"seq\" in asn && asn.seq.length === 2) {\n            /**\n             * @type {AlgorithmIdentifier}\n             */\n            this.kdf = new AlgorithmIdentifier(asn.seq[0]);\n\n            /**\n             * @type {AlgorithmIdentifier}\n             */\n            this.encScheme = new AlgorithmIdentifier(asn.seq[1]);\n        } else {\n            throw new Error(\n                `error parsing PBES2Params from ${JSON.stringify(asn)}`\n            );\n        }\n    }\n}\n\nclass PBKDF2Params {\n    /**\n     * @param {import(\"../encoding/der.js\").AsnType} asn\n     */\n    constructor(asn) {\n        if (\n            \"seq\" in asn &&\n            asn.seq.length >= 2 &&\n            \"bytes\" in asn.seq[0] &&\n            \"int\" in asn.seq[1]\n        ) {\n            /**\n             * @type {Uint8Array}\n             */\n            this.salt = asn.seq[0].bytes;\n\n            /**\n             * @type {number}\n             */\n            this.iterCount = asn.seq[1][\"int\"];\n\n            if (asn.seq.length > 2) {\n                if (\"seq\" in asn.seq[2]) {\n                    this.prf = new AlgorithmIdentifier(asn.seq[2]);\n                    return;\n                } else if (\"int\" in asn.seq[2]) {\n                    /**\n                     * @type {number | undefined}\n                     */\n                    this.keyLength = asn.seq[2][\"int\"];\n                }\n\n                if (asn.seq.length === 4) {\n                    /**\n                     * @type {AlgorithmIdentifier | undefined}\n                     */\n                    this.prf = new AlgorithmIdentifier(asn.seq[3]);\n                }\n\n                return;\n            }\n        }\n\n        throw new Error(\n            `error parsing PBKDF2Params from ${JSON.stringify(asn)}`\n        );\n    }\n}\n\nexport class PrivateKeyInfo {\n    /**\n     * @param {import(\"../encoding/der.js\").AsnType} asn\n     */\n    constructor(asn) {\n        if (\"seq\" in asn && asn.seq.length === 3) {\n            if (\"int\" in asn.seq[0] && asn.seq[0][\"int\"] === 0) {\n                /**\n                 * @type {number}\n                 */\n                this.version = 0;\n            } else {\n                throw new Error(\n                    `expected version = 0, got ${JSON.stringify(asn.seq[0])}`\n                );\n            }\n\n            /**\n             * @type {AlgorithmIdentifier}\n             */\n            this.algId = new AlgorithmIdentifier(asn.seq[1]);\n\n            if (\"bytes\" in asn.seq[2]) {\n                /**\n                 * @type {Uint8Array}\n                 */\n                this.privateKey = asn.seq[2].bytes;\n            } else {\n                throw new Error(\n                    `expected octet string as 3rd element, got ${JSON.stringify(\n                        asn.seq[2]\n                    )}`\n                );\n            }\n\n            return;\n        }\n\n        throw new Error(\n            `error parsing PrivateKeyInfo from ${JSON.stringify(asn)}`\n        );\n    }\n\n    /**\n     * @param {Uint8Array} encoded\n     * @returns {PrivateKeyInfo}\n     */\n    static parse(encoded) {\n        return new PrivateKeyInfo(der.decode(encoded));\n    }\n}\n\nexport class EncryptedPrivateKeyInfo {\n    /**\n     * @param {import(\"../encoding/der.js\").AsnType} asn\n     */\n    constructor(asn) {\n        if (\"seq\" in asn && asn.seq.length === 2 && \"bytes\" in asn.seq[1]) {\n            /**\n             * @type {AlgorithmIdentifier}\n             */\n            this.algId = new AlgorithmIdentifier(asn.seq[0]);\n\n            /**\n             * @type {Uint8Array}\n             */\n            this.data = asn.seq[1].bytes;\n            return;\n        }\n\n        throw new Error(\n            `error parsing EncryptedPrivateKeyInfo from ${JSON.stringify(asn)}`\n        );\n    }\n\n    /**\n     * @param {Uint8Array} encoded\n     * @returns {EncryptedPrivateKeyInfo}\n     */\n    static parse(encoded) {\n        return new EncryptedPrivateKeyInfo(der.decode(encoded));\n    }\n\n    /**\n     * @param {string} passphrase\n     * @returns {Promise<PrivateKeyInfo>}\n     */\n    async decrypt(passphrase) {\n        if (\n            this.algId.algIdent !== \"1.2.840.113549.1.5.13\" ||\n            !this.algId.parameters\n        ) {\n            // PBES2\n            throw new Error(\n                `unsupported key encryption algorithm: ${this.algId.toString()}`\n            );\n        }\n\n        const pbes2Params = new PBES2Params(this.algId.parameters);\n\n        if (\n            pbes2Params.kdf.algIdent !== \"1.2.840.113549.1.5.12\" ||\n            !pbes2Params.kdf.parameters\n        ) {\n            // PBKDF2\n            throw new Error(\n                `unsupported key derivation function: ${pbes2Params.kdf.toString()}`\n            );\n        }\n\n        const pbkdf2Params = new PBKDF2Params(pbes2Params.kdf.parameters);\n\n        if (!pbkdf2Params.prf) {\n            throw new Error(\"unsupported PRF HMAC-SHA-1\");\n        } else if (pbkdf2Params.prf.algIdent !== \"1.2.840.113549.2.9\") {\n            // HMAC-SHA-256\n            throw new Error(`unsupported PRF ${pbkdf2Params.prf.toString()}`);\n        }\n\n        if (pbes2Params.encScheme.algIdent !== \"2.16.840.1.101.3.4.1.2\") {\n            // AES-128-CBC\n            throw new Error(\n                `unsupported encryption scheme: ${pbes2Params.encScheme.toString()}`\n            );\n        }\n\n        if (\n            !pbes2Params.encScheme.parameters ||\n            !(\"bytes\" in pbes2Params.encScheme.parameters)\n        ) {\n            throw new Error(\n                \"expected IV as bytes for AES-128-CBC, \" +\n                    `got: ${JSON.stringify(pbes2Params.encScheme.parameters)}`\n            );\n        }\n\n        const keyLen = pbkdf2Params.keyLength || 16;\n        const iv = pbes2Params.encScheme.parameters.bytes;\n\n        const key = await pbkdf2.deriveKey(\n            hmac.HashAlgorithm.Sha256,\n            passphrase,\n            pbkdf2Params.salt,\n            pbkdf2Params.iterCount,\n            keyLen\n        );\n\n        const decrypted = await crypto.createDecipheriv(\n            crypto.CipherAlgorithm.Aes128Cbc,\n            key,\n            iv,\n            this.data\n        );\n\n        return PrivateKeyInfo.parse(decrypted);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}