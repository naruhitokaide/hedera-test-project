{"ast":null,"code":"import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport ProxyStaker from \"./ProxyStaker.js\";\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetStakersQuery} proto.ICryptoGetStakersQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetStakersResponse} proto.ICryptoGetStakersResponse\n * @typedef {import(\"@hashgraph/proto\").IAllProxyStakers} proto.IAllProxyStakers\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * Get all the accounts that are proxy staking to this account.\n * For each of them, give the amount currently staked.\n *\n * This is not yet implemented, but will be in a future version of the API.\n *\n * @augments {Query<ProxyStaker[]>}\n */\n\nexport default class AccountStakersQuery extends Query {\n  /**\n   * @param {object} [props]\n   * @param {(AccountId | string)=} props.accountId\n   */\n  constructor() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * @type {?AccountId}\n     * @private\n     */\n\n    this._accountId = null;\n\n    if (props.accountId != null) {\n      this.setAccountId(props.accountId);\n    }\n  }\n  /**\n   * @internal\n   * @param {proto.IQuery} query\n   * @returns {AccountStakersQuery}\n   */\n\n\n  static _fromProtobuf(query) {\n    const stakers =\n    /** @type {proto.ICryptoGetStakersQuery} */\n    query.cryptoGetProxyStakers;\n    return new AccountStakersQuery({\n      accountId: stakers.accountID != null ? AccountId._fromProtobuf(stakers.accountID) : undefined\n    });\n  }\n  /**\n   * @returns {?AccountId}\n   */\n\n\n  get accountId() {\n    return this._accountId;\n  }\n  /**\n   * Set the account ID for which the stakers are being requested.\n   *\n   * @param {AccountId | string} accountId\n   * @returns {this}\n   */\n\n\n  setAccountId(accountId) {\n    this._accountId = typeof accountId === \"string\" ? AccountId.fromString(accountId) : accountId.clone();\n    return this;\n  }\n  /**\n   * @param {Client} client\n   */\n\n\n  _validateChecksums(client) {\n    if (this._accountId != null) {\n      this._accountId.validateChecksum(client);\n    }\n  }\n  /**\n   * @override\n   * @internal\n   * @param {Channel} channel\n   * @param {proto.IQuery} request\n   * @returns {Promise<proto.IResponse>}\n   */\n\n\n  _execute(channel, request) {\n    return channel.crypto.getStakersByAccountID(request);\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IResponse} response\n   * @returns {proto.IResponseHeader}\n   */\n\n\n  _mapResponseHeader(response) {\n    const cryptoGetProxyStakers =\n    /** @type {proto.ICryptoGetStakersResponse} */\n    response.cryptoGetProxyStakers;\n    return (\n      /** @type {proto.IResponseHeader} */\n      cryptoGetProxyStakers.header\n    );\n  }\n  /**\n   * @protected\n   * @override\n   * @param {proto.IResponse} response\n   * @returns {Promise<ProxyStaker[]>}\n   */\n\n\n  _mapResponse(response) {\n    const cryptoGetProxyStakers =\n    /** @type {proto.ICryptoGetStakersResponse} */\n    response.cryptoGetProxyStakers;\n    const stakers =\n    /** @type {proto.IAllProxyStakers} */\n    cryptoGetProxyStakers.stakers;\n    return Promise.resolve((stakers.proxyStaker != null ? stakers.proxyStaker : []).map(staker => ProxyStaker._fromProtobuf(staker)));\n  }\n  /**\n   * @override\n   * @internal\n   * @param {proto.IQueryHeader} header\n   * @returns {proto.IQuery}\n   */\n\n\n  _onMakeRequest(header) {\n    return {\n      cryptoGetProxyStakers: {\n        header,\n        accountID: this._accountId != null ? this._accountId._toProtobuf() : null\n      }\n    };\n  }\n\n} // @ts-ignore\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\nQUERY_REGISTRY.set(\"cryptoGetProxyStakers\", AccountStakersQuery._fromProtobuf);","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/account/AccountStakersQuery.js"],"names":["Query","QUERY_REGISTRY","AccountId","ProxyStaker","AccountStakersQuery","constructor","props","_accountId","accountId","setAccountId","_fromProtobuf","query","stakers","cryptoGetProxyStakers","accountID","undefined","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","getStakersByAccountID","_mapResponseHeader","response","header","_mapResponse","Promise","resolve","proxyStaker","map","staker","_onMakeRequest","_toProtobuf","set"],"mappings":"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","sourcesContent":["import Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport ProxyStaker from \"./ProxyStaker.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").IQuery} proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").IQueryHeader} proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").IResponse} proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").IResponseHeader} proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetStakersQuery} proto.ICryptoGetStakersQuery\n * @typedef {import(\"@hashgraph/proto\").ICryptoGetStakersResponse} proto.ICryptoGetStakersResponse\n * @typedef {import(\"@hashgraph/proto\").IAllProxyStakers} proto.IAllProxyStakers\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * Get all the accounts that are proxy staking to this account.\n * For each of them, give the amount currently staked.\n *\n * This is not yet implemented, but will be in a future version of the API.\n *\n * @augments {Query<ProxyStaker[]>}\n */\nexport default class AccountStakersQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {(AccountId | string)=} props.accountId\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {proto.IQuery} query\n     * @returns {AccountStakersQuery}\n     */\n    static _fromProtobuf(query) {\n        const stakers = /** @type {proto.ICryptoGetStakersQuery} */ (\n            query.cryptoGetProxyStakers\n        );\n\n        return new AccountStakersQuery({\n            accountId:\n                stakers.accountID != null\n                    ? AccountId._fromProtobuf(stakers.accountID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the stakers are being requested.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {proto.IQuery} request\n     * @returns {Promise<proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getStakersByAccountID(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IResponse} response\n     * @returns {proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetProxyStakers =\n            /** @type {proto.ICryptoGetStakersResponse} */ (\n                response.cryptoGetProxyStakers\n            );\n        return /** @type {proto.IResponseHeader} */ (\n            cryptoGetProxyStakers.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {proto.IResponse} response\n     * @returns {Promise<ProxyStaker[]>}\n     */\n    _mapResponse(response) {\n        const cryptoGetProxyStakers =\n            /** @type {proto.ICryptoGetStakersResponse} */ (\n                response.cryptoGetProxyStakers\n            );\n        const stakers = /** @type {proto.IAllProxyStakers} */ (\n            cryptoGetProxyStakers.stakers\n        );\n\n        return Promise.resolve(\n            (stakers.proxyStaker != null ? stakers.proxyStaker : []).map(\n                (staker) => ProxyStaker._fromProtobuf(staker)\n            )\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {proto.IQueryHeader} header\n     * @returns {proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetProxyStakers: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n}\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"cryptoGetProxyStakers\", AccountStakersQuery._fromProtobuf);\n"]},"metadata":{},"sourceType":"module"}