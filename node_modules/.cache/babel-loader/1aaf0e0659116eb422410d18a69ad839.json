{"ast":null,"code":"import { keccak256 } from \"../cryptography/keccak.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\n/**\n * @enum {number}\n */\n\nexport const ArgumentType = {\n  uint8: 0,\n  int8: 1,\n  uint16: 2,\n  int16: 3,\n  uint32: 4,\n  int32: 5,\n  uint64: 6,\n  int64: 7,\n  uint256: 8,\n  int256: 9,\n  string: 10,\n  bool: 11,\n  bytes: 12,\n  bytes32: 13,\n  address: 14,\n  func: 15\n};\n/**\n * @typedef {object} Argument\n * @property {boolean} dynamic\n * @property {Uint8Array} value\n */\n\n/**\n * @typedef {object} SolidityType\n * @property {ArgumentType} ty\n * @property {boolean} array\n */\n\nexport default class ContractFunctionSelector {\n  /**\n   * @param {string} [name]\n   */\n  constructor(name) {\n    /**\n     * @type {?string}\n     */\n    this.name = null;\n    /**\n     * @type {string}\n     */\n\n    this._params = \"\";\n    /**\n     * @type {SolidityType[]}\n     */\n\n    this._paramTypes = [];\n\n    if (name != null) {\n      this._name = name;\n    }\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addString() {\n    return this._addParam({\n      ty: ArgumentType.string,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addStringArray() {\n    return this._addParam({\n      ty: ArgumentType.string,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addBytes() {\n    return this._addParam({\n      ty: ArgumentType.bytes,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addBytes32() {\n    return this._addParam({\n      ty: ArgumentType.bytes32,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addBytesArray() {\n    return this._addParam({\n      ty: ArgumentType.bytes,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addBytes32Array() {\n    return this._addParam({\n      ty: ArgumentType.bytes32,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addInt8() {\n    return this._addParam({\n      ty: ArgumentType.int8,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addInt32() {\n    return this._addParam({\n      ty: ArgumentType.int32,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addInt64() {\n    return this._addParam({\n      ty: ArgumentType.int64,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addInt256() {\n    return this._addParam({\n      ty: ArgumentType.int256,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addInt8Array() {\n    return this._addParam({\n      ty: ArgumentType.int8,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addInt32Array() {\n    return this._addParam({\n      ty: ArgumentType.int32,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addInt64Array() {\n    return this._addParam({\n      ty: ArgumentType.int64,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addInt256Array() {\n    return this._addParam({\n      ty: ArgumentType.int256,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addUint8() {\n    return this._addParam({\n      ty: ArgumentType.uint8,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addUint32() {\n    return this._addParam({\n      ty: ArgumentType.uint32,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addUint64() {\n    return this._addParam({\n      ty: ArgumentType.uint64,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addUint256() {\n    return this._addParam({\n      ty: ArgumentType.uint256,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addUint8Array() {\n    return this._addParam({\n      ty: ArgumentType.uint8,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addUint32Array() {\n    return this._addParam({\n      ty: ArgumentType.uint32,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addUint64Array() {\n    return this._addParam({\n      ty: ArgumentType.uint64,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addUint256Array() {\n    return this._addParam({\n      ty: ArgumentType.uint256,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addBool() {\n    return this._addParam({\n      ty: ArgumentType.bool,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addAddress() {\n    return this._addParam({\n      ty: ArgumentType.address,\n      array: false\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addAddressArray() {\n    return this._addParam({\n      ty: ArgumentType.address,\n      array: true\n    });\n  }\n  /**\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  addFunction() {\n    return this._addParam({\n      ty: ArgumentType.func,\n      array: false\n    });\n  }\n  /**\n   * @param {SolidityType} ty\n   * @returns {ContractFunctionSelector}\n   */\n\n\n  _addParam(ty) {\n    if (this._paramTypes.length > 0) {\n      this._params += \",\";\n    }\n\n    this._params += solidityTypeToString(ty);\n\n    this._paramTypes.push(ty);\n\n    return this;\n  }\n  /**\n   * @param {string} [name]\n   * @returns {Uint8Array}\n   */\n\n\n  _build(name) {\n    if (name != null) {\n      this._name = name;\n    } else if (this._name == null) {\n      throw new Error(\"`name` required for ContractFunctionSelector\");\n    }\n\n    const func = hex.encode(utf8.encode(this.toString()));\n    return hex.decode(keccak256(`0x${func}`)).slice(0, 4);\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  toString() {\n    return `${this._name != null ? this._name.toString() : \"\"}(${this._params})`;\n  }\n\n}\n/**\n * @param {SolidityType} ty\n * @returns {string}\n */\n\nfunction solidityTypeToString(ty) {\n  let s = \"\";\n\n  switch (ty.ty) {\n    case ArgumentType.uint8:\n      s = \"uint8\";\n      break;\n\n    case ArgumentType.int8:\n      s = \"int8\";\n      break;\n\n    case ArgumentType.uint16:\n      s = \"uint16\";\n      break;\n\n    case ArgumentType.int16:\n      s = \"int16\";\n      break;\n\n    case ArgumentType.uint32:\n      s = \"uint32\";\n      break;\n\n    case ArgumentType.int32:\n      s = \"int32\";\n      break;\n\n    case ArgumentType.uint64:\n      s = \"uint64\";\n      break;\n\n    case ArgumentType.int64:\n      s = \"int64\";\n      break;\n\n    case ArgumentType.uint256:\n      s = \"uint256\";\n      break;\n\n    case ArgumentType.int256:\n      s = \"int256\";\n      break;\n\n    case ArgumentType.string:\n      s = \"string\";\n      break;\n\n    case ArgumentType.bool:\n      s = \"bool\";\n      break;\n\n    case ArgumentType.bytes:\n      s = \"bytes\";\n      break;\n\n    case ArgumentType.bytes32:\n      s = \"bytes32\";\n      break;\n\n    case ArgumentType.address:\n      s = \"address\";\n      break;\n\n    case ArgumentType.func:\n      s = \"function\";\n      break;\n\n    default:\n      s = \"\";\n      break;\n  }\n\n  if (ty.array) {\n    s += \"[]\";\n  }\n\n  return s;\n}","map":{"version":3,"sources":["C:/Work/coding-sandbox/react-again/dapp-days/node_modules/@hashgraph/sdk/src/contract/ContractFunctionSelector.js"],"names":["keccak256","hex","utf8","ArgumentType","uint8","int8","uint16","int16","uint32","int32","uint64","int64","uint256","int256","string","bool","bytes","bytes32","address","func","ContractFunctionSelector","constructor","name","_params","_paramTypes","_name","addString","_addParam","ty","array","addStringArray","addBytes","addBytes32","addBytesArray","addBytes32Array","addInt8","addInt32","addInt64","addInt256","addInt8Array","addInt32Array","addInt64Array","addInt256Array","addUint8","addUint32","addUint64","addUint256","addUint8Array","addUint32Array","addUint64Array","addUint256Array","addBool","addAddress","addAddressArray","addFunction","length","solidityTypeToString","push","_build","Error","encode","toString","decode","slice","s"],"mappings":"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","sourcesContent":["import { keccak256 } from \"../cryptography/keccak.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\n\n/**\n * @enum {number}\n */\nexport const ArgumentType = {\n    uint8: 0,\n    int8: 1,\n    uint16: 2,\n    int16: 3,\n    uint32: 4,\n    int32: 5,\n    uint64: 6,\n    int64: 7,\n    uint256: 8,\n    int256: 9,\n    string: 10,\n    bool: 11,\n    bytes: 12,\n    bytes32: 13,\n    address: 14,\n    func: 15,\n};\n\n/**\n * @typedef {object} Argument\n * @property {boolean} dynamic\n * @property {Uint8Array} value\n */\n\n/**\n * @typedef {object} SolidityType\n * @property {ArgumentType} ty\n * @property {boolean} array\n */\n\nexport default class ContractFunctionSelector {\n    /**\n     * @param {string} [name]\n     */\n    constructor(name) {\n        /**\n         * @type {?string}\n         */\n        this.name = null;\n\n        /**\n         * @type {string}\n         */\n        this._params = \"\";\n\n        /**\n         * @type {SolidityType[]}\n         */\n        this._paramTypes = [];\n\n        if (name != null) {\n            this._name = name;\n        }\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addString() {\n        return this._addParam({ ty: ArgumentType.string, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addStringArray() {\n        return this._addParam({ ty: ArgumentType.string, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addBytes() {\n        return this._addParam({ ty: ArgumentType.bytes, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addBytes32() {\n        return this._addParam({ ty: ArgumentType.bytes32, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addBytesArray() {\n        return this._addParam({ ty: ArgumentType.bytes, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addBytes32Array() {\n        return this._addParam({ ty: ArgumentType.bytes32, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt8() {\n        return this._addParam({ ty: ArgumentType.int8, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt32() {\n        return this._addParam({ ty: ArgumentType.int32, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt64() {\n        return this._addParam({ ty: ArgumentType.int64, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt256() {\n        return this._addParam({ ty: ArgumentType.int256, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt8Array() {\n        return this._addParam({ ty: ArgumentType.int8, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt32Array() {\n        return this._addParam({ ty: ArgumentType.int32, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt64Array() {\n        return this._addParam({ ty: ArgumentType.int64, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addInt256Array() {\n        return this._addParam({ ty: ArgumentType.int256, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint8() {\n        return this._addParam({ ty: ArgumentType.uint8, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint32() {\n        return this._addParam({ ty: ArgumentType.uint32, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint64() {\n        return this._addParam({ ty: ArgumentType.uint64, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint256() {\n        return this._addParam({ ty: ArgumentType.uint256, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint8Array() {\n        return this._addParam({ ty: ArgumentType.uint8, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint32Array() {\n        return this._addParam({ ty: ArgumentType.uint32, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint64Array() {\n        return this._addParam({ ty: ArgumentType.uint64, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addUint256Array() {\n        return this._addParam({ ty: ArgumentType.uint256, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addBool() {\n        return this._addParam({ ty: ArgumentType.bool, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addAddress() {\n        return this._addParam({ ty: ArgumentType.address, array: false });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addAddressArray() {\n        return this._addParam({ ty: ArgumentType.address, array: true });\n    }\n\n    /**\n     * @returns {ContractFunctionSelector}\n     */\n    addFunction() {\n        return this._addParam({ ty: ArgumentType.func, array: false });\n    }\n\n    /**\n     * @param {SolidityType} ty\n     * @returns {ContractFunctionSelector}\n     */\n    _addParam(ty) {\n        if (this._paramTypes.length > 0) {\n            this._params += \",\";\n        }\n\n        this._params += solidityTypeToString(ty);\n        this._paramTypes.push(ty);\n\n        return this;\n    }\n\n    /**\n     * @param {string} [name]\n     * @returns {Uint8Array}\n     */\n    _build(name) {\n        if (name != null) {\n            this._name = name;\n        } else if (this._name == null) {\n            throw new Error(\"`name` required for ContractFunctionSelector\");\n        }\n\n        const func = hex.encode(utf8.encode(this.toString()));\n        return hex.decode(keccak256(`0x${func}`)).slice(0, 4);\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this._name != null ? this._name.toString() : \"\"}(${\n            this._params\n        })`;\n    }\n}\n\n/**\n * @param {SolidityType} ty\n * @returns {string}\n */\nfunction solidityTypeToString(ty) {\n    let s = \"\";\n    switch (ty.ty) {\n        case ArgumentType.uint8:\n            s = \"uint8\";\n            break;\n        case ArgumentType.int8:\n            s = \"int8\";\n            break;\n        case ArgumentType.uint16:\n            s = \"uint16\";\n            break;\n        case ArgumentType.int16:\n            s = \"int16\";\n            break;\n        case ArgumentType.uint32:\n            s = \"uint32\";\n            break;\n        case ArgumentType.int32:\n            s = \"int32\";\n            break;\n        case ArgumentType.uint64:\n            s = \"uint64\";\n            break;\n        case ArgumentType.int64:\n            s = \"int64\";\n            break;\n        case ArgumentType.uint256:\n            s = \"uint256\";\n            break;\n        case ArgumentType.int256:\n            s = \"int256\";\n            break;\n        case ArgumentType.string:\n            s = \"string\";\n            break;\n        case ArgumentType.bool:\n            s = \"bool\";\n            break;\n        case ArgumentType.bytes:\n            s = \"bytes\";\n            break;\n        case ArgumentType.bytes32:\n            s = \"bytes32\";\n            break;\n        case ArgumentType.address:\n            s = \"address\";\n            break;\n        case ArgumentType.func:\n            s = \"function\";\n            break;\n        default:\n            s = \"\";\n            break;\n    }\n\n    if (ty.array) {\n        s += \"[]\";\n    }\n\n    return s;\n}\n"]},"metadata":{},"sourceType":"module"}